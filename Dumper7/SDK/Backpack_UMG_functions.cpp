#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Backpack_UMG

#include "Basic.hpp"

#include "Backpack_UMG_classes.hpp"
#include "Backpack_UMG_parameters.hpp"


namespace SDK
{

// Function Backpack_UMG.Backpack_UMG_C.ExecuteUbergraph_Backpack_UMG
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::ExecuteUbergraph_Backpack_UMG(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "ExecuteUbergraph_Backpack_UMG");

	Params::Backpack_UMG_C_ExecuteUbergraph_Backpack_UMG Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.数据对调接口
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::数据对调接口(int32 Current, int32 Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "数据对调接口");

	Params::Backpack_UMG_C_数据对调接口 Parms{};

	Parms.Current = Current;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "Tick");

	Params::Backpack_UMG_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.添加空的武器插槽
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWB_Backpack_Weapon_C*            WeaponDragUMG_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::添加空的武器插槽(class UWB_Backpack_Weapon_C* WeaponDragUMG_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "添加空的武器插槽");

	Params::Backpack_UMG_C_添加空的武器插槽 Parms{};

	Parms.WeaponDragUMG_0 = WeaponDragUMG_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.丢弃武器
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    是否是主武器(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBackpack_UMG_C::丢弃武器(bool 是否是主武器)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "丢弃武器");

	Params::Backpack_UMG_C_丢弃武器 Parms{};

	Parms.是否是主武器 = 是否是主武器;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.添加武器数据
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    是否是主武器(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AWeapon_Master_C*                 weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::添加武器数据(bool 是否是主武器, class AWeapon_Master_C* weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "添加武器数据");

	Params::Backpack_UMG_C_添加武器数据 Parms{};

	Parms.是否是主武器 = 是否是主武器;
	Parms.weapon = weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.刷新数据
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInventoryData_Struct&     InventoryData                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::刷新数据(const struct FInventoryData_Struct& InventoryData, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "刷新数据");

	Params::Backpack_UMG_C_刷新数据 Parms{};

	Parms.InventoryData = std::move(InventoryData);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.添加空格子
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FInventoryData_Struct>&InventoryData                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UInventorySystem_Component_C*     背包组件(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBackpack_DragObject_UMG_C*       ItemDragUMG_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBackpack_Details_C*              BackpackDetailsUMG_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::添加空格子(const TArray<struct FInventoryData_Struct>& InventoryData, class UInventorySystem_Component_C* 背包组件, class UBackpack_DragObject_UMG_C* ItemDragUMG_0, class UBackpack_Details_C* BackpackDetailsUMG_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "添加空格子");

	Params::Backpack_UMG_C_添加空格子 Parms{};

	Parms.InventoryData = std::move(InventoryData);
	Parms.背包组件 = 背包组件;
	Parms.ItemDragUMG_0 = ItemDragUMG_0;
	Parms.BackpackDetailsUMG_0 = BackpackDetailsUMG_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBackpack_UMG_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Backpack_UMG.Backpack_UMG_C.显示背包
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EUMGSequencePlayMode                    PlayMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::显示背包(EUMGSequencePlayMode PlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "显示背包");

	Params::Backpack_UMG_C_显示背包 Parms{};

	Parms.PlayMode = PlayMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.拾取子弹
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInventoryData_Struct&     InventoryData                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBackpack_UMG_C::拾取子弹(const struct FInventoryData_Struct& InventoryData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "拾取子弹");

	Params::Backpack_UMG_C_拾取子弹 Parms{};

	Parms.InventoryData = std::move(InventoryData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Backpack_UMG.Backpack_UMG_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBackpack_UMG_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "OnMouseButtonUp");

	Params::Backpack_UMG_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Backpack_UMG.Backpack_UMG_C.OnMouseButtonDown_0
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBackpack_UMG_C::OnMouseButtonDown_0(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "OnMouseButtonDown_0");

	Params::Backpack_UMG_C_OnMouseButtonDown_0 Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Backpack_UMG.Backpack_UMG_C.创建UI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget**                         创建的UI(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBackpack_UMG_C::创建UI(class UWidget** 创建的UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Backpack_UMG_C", "创建UI");

	Params::Backpack_UMG_C_创建UI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (创建的UI != nullptr)
		*创建的UI = Parms.创建的UI;
}

}

