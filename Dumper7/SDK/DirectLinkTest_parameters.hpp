#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DirectLinkTest

#include "Basic.hpp"


namespace SDK::Params
{

// Function DirectLinkTest.DirectLinkTestLibrary.AddPublicDestination
// 0x0020 (0x0020 - 0x0000)
struct DirectLinkTestLibrary_AddPublicDestination final
{
public:
	int32                                         EndpointId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DestName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectLinkTestLibrary_AddPublicDestination) == 0x000008, "Wrong alignment on DirectLinkTestLibrary_AddPublicDestination");
static_assert(sizeof(DirectLinkTestLibrary_AddPublicDestination) == 0x000020, "Wrong size on DirectLinkTestLibrary_AddPublicDestination");
static_assert(offsetof(DirectLinkTestLibrary_AddPublicDestination, EndpointId) == 0x000000, "Member 'DirectLinkTestLibrary_AddPublicDestination::EndpointId' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_AddPublicDestination, DestName) == 0x000008, "Member 'DirectLinkTestLibrary_AddPublicDestination::DestName' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_AddPublicDestination, ReturnValue) == 0x000018, "Member 'DirectLinkTestLibrary_AddPublicDestination::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.AddPublicSource
// 0x0020 (0x0020 - 0x0000)
struct DirectLinkTestLibrary_AddPublicSource final
{
public:
	int32                                         EndpointId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectLinkTestLibrary_AddPublicSource) == 0x000008, "Wrong alignment on DirectLinkTestLibrary_AddPublicSource");
static_assert(sizeof(DirectLinkTestLibrary_AddPublicSource) == 0x000020, "Wrong size on DirectLinkTestLibrary_AddPublicSource");
static_assert(offsetof(DirectLinkTestLibrary_AddPublicSource, EndpointId) == 0x000000, "Member 'DirectLinkTestLibrary_AddPublicSource::EndpointId' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_AddPublicSource, SourceName) == 0x000008, "Member 'DirectLinkTestLibrary_AddPublicSource::SourceName' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_AddPublicSource, ReturnValue) == 0x000018, "Member 'DirectLinkTestLibrary_AddPublicSource::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.DeleteAllEndpoint
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_DeleteAllEndpoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_DeleteAllEndpoint) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_DeleteAllEndpoint");
static_assert(sizeof(DirectLinkTestLibrary_DeleteAllEndpoint) == 0x000001, "Wrong size on DirectLinkTestLibrary_DeleteAllEndpoint");
static_assert(offsetof(DirectLinkTestLibrary_DeleteAllEndpoint, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_DeleteAllEndpoint::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.DeleteEndpoint
// 0x0008 (0x0008 - 0x0000)
struct DirectLinkTestLibrary_DeleteEndpoint final
{
public:
	int32                                         EndpointId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectLinkTestLibrary_DeleteEndpoint) == 0x000004, "Wrong alignment on DirectLinkTestLibrary_DeleteEndpoint");
static_assert(sizeof(DirectLinkTestLibrary_DeleteEndpoint) == 0x000008, "Wrong size on DirectLinkTestLibrary_DeleteEndpoint");
static_assert(offsetof(DirectLinkTestLibrary_DeleteEndpoint, EndpointId) == 0x000000, "Member 'DirectLinkTestLibrary_DeleteEndpoint::EndpointId' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_DeleteEndpoint, ReturnValue) == 0x000004, "Member 'DirectLinkTestLibrary_DeleteEndpoint::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.DumpReceivedScene
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_DumpReceivedScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_DumpReceivedScene) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_DumpReceivedScene");
static_assert(sizeof(DirectLinkTestLibrary_DumpReceivedScene) == 0x000001, "Wrong size on DirectLinkTestLibrary_DumpReceivedScene");
static_assert(offsetof(DirectLinkTestLibrary_DumpReceivedScene, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_DumpReceivedScene::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.MakeEndpoint
// 0x0018 (0x0018 - 0x0000)
struct DirectLinkTestLibrary_MakeEndpoint final
{
public:
	class FString                                 NiceName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerbose;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_MakeEndpoint) == 0x000008, "Wrong alignment on DirectLinkTestLibrary_MakeEndpoint");
static_assert(sizeof(DirectLinkTestLibrary_MakeEndpoint) == 0x000018, "Wrong size on DirectLinkTestLibrary_MakeEndpoint");
static_assert(offsetof(DirectLinkTestLibrary_MakeEndpoint, NiceName) == 0x000000, "Member 'DirectLinkTestLibrary_MakeEndpoint::NiceName' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_MakeEndpoint, bVerbose) == 0x000010, "Member 'DirectLinkTestLibrary_MakeEndpoint::bVerbose' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_MakeEndpoint, ReturnValue) == 0x000014, "Member 'DirectLinkTestLibrary_MakeEndpoint::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.SendScene
// 0x0018 (0x0018 - 0x0000)
struct DirectLinkTestLibrary_SendScene final
{
public:
	class FString                                 InFilePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectLinkTestLibrary_SendScene) == 0x000008, "Wrong alignment on DirectLinkTestLibrary_SendScene");
static_assert(sizeof(DirectLinkTestLibrary_SendScene) == 0x000018, "Wrong size on DirectLinkTestLibrary_SendScene");
static_assert(offsetof(DirectLinkTestLibrary_SendScene, InFilePath) == 0x000000, "Member 'DirectLinkTestLibrary_SendScene::InFilePath' has a wrong offset!");
static_assert(offsetof(DirectLinkTestLibrary_SendScene, ReturnValue) == 0x000010, "Member 'DirectLinkTestLibrary_SendScene::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.SetupReceiver
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_SetupReceiver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_SetupReceiver) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_SetupReceiver");
static_assert(sizeof(DirectLinkTestLibrary_SetupReceiver) == 0x000001, "Wrong size on DirectLinkTestLibrary_SetupReceiver");
static_assert(offsetof(DirectLinkTestLibrary_SetupReceiver, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_SetupReceiver::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.SetupSender
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_SetupSender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_SetupSender) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_SetupSender");
static_assert(sizeof(DirectLinkTestLibrary_SetupSender) == 0x000001, "Wrong size on DirectLinkTestLibrary_SetupSender");
static_assert(offsetof(DirectLinkTestLibrary_SetupSender, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_SetupSender::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.StartReceiver
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_StartReceiver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_StartReceiver) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_StartReceiver");
static_assert(sizeof(DirectLinkTestLibrary_StartReceiver) == 0x000001, "Wrong size on DirectLinkTestLibrary_StartReceiver");
static_assert(offsetof(DirectLinkTestLibrary_StartReceiver, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_StartReceiver::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.StartSender
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_StartSender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_StartSender) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_StartSender");
static_assert(sizeof(DirectLinkTestLibrary_StartSender) == 0x000001, "Wrong size on DirectLinkTestLibrary_StartSender");
static_assert(offsetof(DirectLinkTestLibrary_StartSender, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_StartSender::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.StopReceiver
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_StopReceiver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_StopReceiver) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_StopReceiver");
static_assert(sizeof(DirectLinkTestLibrary_StopReceiver) == 0x000001, "Wrong size on DirectLinkTestLibrary_StopReceiver");
static_assert(offsetof(DirectLinkTestLibrary_StopReceiver, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_StopReceiver::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.StopSender
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_StopSender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_StopSender) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_StopSender");
static_assert(sizeof(DirectLinkTestLibrary_StopSender) == 0x000001, "Wrong size on DirectLinkTestLibrary_StopSender");
static_assert(offsetof(DirectLinkTestLibrary_StopSender, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_StopSender::ReturnValue' has a wrong offset!");

// Function DirectLinkTest.DirectLinkTestLibrary.TestParameters
// 0x0001 (0x0001 - 0x0000)
struct DirectLinkTestLibrary_TestParameters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectLinkTestLibrary_TestParameters) == 0x000001, "Wrong alignment on DirectLinkTestLibrary_TestParameters");
static_assert(sizeof(DirectLinkTestLibrary_TestParameters) == 0x000001, "Wrong size on DirectLinkTestLibrary_TestParameters");
static_assert(offsetof(DirectLinkTestLibrary_TestParameters, ReturnValue) == 0x000000, "Member 'DirectLinkTestLibrary_TestParameters::ReturnValue' has a wrong offset!");

}

