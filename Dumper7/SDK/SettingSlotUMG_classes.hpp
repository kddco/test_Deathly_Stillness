#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SettingSlotUMG

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SettingEnum_structs.hpp"
#include "CheatCode_Enum_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SettingSlotUMG.SettingSlotUMG_C
// 0x0150 (0x03B0 - 0x0260)
class USettingSlotUMG_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_51;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Left;                                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                LeftButton;                                        // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Right;                                             // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                RightButton;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_90;                                      // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_340;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsClick;                                           // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FPSIndex;                                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESettingEnum                                  SettingEnum;                                       // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FOVIndex;                                          // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SettingText;                                       // 0x02B0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   SettingMode;                                       // 0x02C8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class FString>                         屏幕分辨率; // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         屏幕分辨率Index; // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         可视距离Index; // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         抗锯齿Index; // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         后期处理质量Index; // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         阴影质量Index; // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         纹理质量Index; // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         植物质量Index; // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         特效index; // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         着色index; // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         全屏模式Index; // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerStateSetting_C*                  PlayerSetting;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowFPSIndex;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         invertYaxis;                                       // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Language;                                          // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         长按瞄准; // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开启机瞄; // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Setting描述; // 0x0338(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         第一人称; // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         镜头晃动; // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         击杀提示; // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         游戏难度; // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheatCode_;                                        // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	ECheatCode_Enum                               CheatCodeEnum;                                     // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayer_BP_C*                           As_Player_BP;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无敌; // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         __;                                                // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无限子弹; // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         超级跳; // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         闪电侠; // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         聆听; // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         子弹时间; // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         丧尸巨大化; // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无后坐力; // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         兔女郎丧尸; // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无重力; // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         自动瞄准; // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         丧尸下班;                                      // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         抗锯齿模式Index; // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         垂直同步Index; // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SettingSlotUMG(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Reset();
	void BndEvt__Button_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Button_188_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Construct();
	void CustomMappingCheck(const struct FInputActionKeyMapping& InputAction, const struct FInputAxisKeyMapping& InputAxis);
	void initializeSetting();
	void SettingDetails(const class FText& 标题, const class FText& 详情);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void 进入选中模式();
	void 更改分辨率();
	void 保存Fov设置();
	int32 选项更改(int32& Index_0, int32 ___0, int32 Min, int32 Max);
	void 画质文字设置(int32 Selection);
	void FOV文字设置(int32 Selection);
	void 保存ShowFps设置();
	void 保存反转鼠标Y轴设置();
	void 全屏模式文字更改(int32 Selection);
	void 保存语言设置();
	void 保存长按瞄准设置();
	void 保存开启机瞄设置();
	void 保存第一人称设置();
	void 保存镜头晃动设置();
	void 保存击杀提示设置();
	void 保存游戏难度设置();
	class FText GetScreenResolution();
	void 保存无敌设置();
	void 读档(class UPlayerStateSetting_C** Output_Get);
	void 保存无限子弹设置();
	void 保存超级跳设置();
	void 保存闪电侠设置();
	void 保存聆听设置();
	void 保存子弹时间设置();
	void 保存巨大化设置();
	void 保存无后坐力设置();
	void 保存兔女郎丧尸设置();
	void 保存无重力设置();
	void 保存自动瞄准设置();
	void 保存丧尸下班设置();
	void 保存抗锯齿方法设置();
	void 设置无边框全屏(uint8 全屏模式, class UWidget* 分辨率设置);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SettingSlotUMG_C">();
	}
	static class USettingSlotUMG_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingSlotUMG_C>();
	}
};
static_assert(alignof(USettingSlotUMG_C) == 0x000008, "Wrong alignment on USettingSlotUMG_C");
static_assert(sizeof(USettingSlotUMG_C) == 0x0003B0, "Wrong size on USettingSlotUMG_C");
static_assert(offsetof(USettingSlotUMG_C, UberGraphFrame) == 0x000260, "Member 'USettingSlotUMG_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, Border_51) == 0x000268, "Member 'USettingSlotUMG_C::Border_51' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, Left) == 0x000270, "Member 'USettingSlotUMG_C::Left' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, LeftButton) == 0x000278, "Member 'USettingSlotUMG_C::LeftButton' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, Right) == 0x000280, "Member 'USettingSlotUMG_C::Right' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, RightButton) == 0x000288, "Member 'USettingSlotUMG_C::RightButton' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, TextBlock_90) == 0x000290, "Member 'USettingSlotUMG_C::TextBlock_90' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, TextBlock_340) == 0x000298, "Member 'USettingSlotUMG_C::TextBlock_340' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, IsClick) == 0x0002A0, "Member 'USettingSlotUMG_C::IsClick' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, FPSIndex) == 0x0002A4, "Member 'USettingSlotUMG_C::FPSIndex' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, SettingEnum) == 0x0002A8, "Member 'USettingSlotUMG_C::SettingEnum' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, FOVIndex) == 0x0002AC, "Member 'USettingSlotUMG_C::FOVIndex' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, SettingText) == 0x0002B0, "Member 'USettingSlotUMG_C::SettingText' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, SettingMode) == 0x0002C8, "Member 'USettingSlotUMG_C::SettingMode' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 屏幕分辨率) == 0x0002E0, "Member 'USettingSlotUMG_C::屏幕分辨率' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 屏幕分辨率Index) == 0x0002F0, "Member 'USettingSlotUMG_C::屏幕分辨率Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 可视距离Index) == 0x0002F4, "Member 'USettingSlotUMG_C::可视距离Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 抗锯齿Index) == 0x0002F8, "Member 'USettingSlotUMG_C::抗锯齿Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 后期处理质量Index) == 0x0002FC, "Member 'USettingSlotUMG_C::后期处理质量Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 阴影质量Index) == 0x000300, "Member 'USettingSlotUMG_C::阴影质量Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 纹理质量Index) == 0x000304, "Member 'USettingSlotUMG_C::纹理质量Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 植物质量Index) == 0x000308, "Member 'USettingSlotUMG_C::植物质量Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 特效index) == 0x00030C, "Member 'USettingSlotUMG_C::特效index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 着色index) == 0x000310, "Member 'USettingSlotUMG_C::着色index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 全屏模式Index) == 0x000314, "Member 'USettingSlotUMG_C::全屏模式Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, PlayerSetting) == 0x000318, "Member 'USettingSlotUMG_C::PlayerSetting' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, ShowFPSIndex) == 0x000320, "Member 'USettingSlotUMG_C::ShowFPSIndex' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, invertYaxis) == 0x000324, "Member 'USettingSlotUMG_C::invertYaxis' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, Language) == 0x000328, "Member 'USettingSlotUMG_C::Language' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 长按瞄准) == 0x00032C, "Member 'USettingSlotUMG_C::长按瞄准' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 开启机瞄) == 0x000330, "Member 'USettingSlotUMG_C::开启机瞄' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, Setting描述) == 0x000338, "Member 'USettingSlotUMG_C::Setting描述' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 第一人称) == 0x000350, "Member 'USettingSlotUMG_C::第一人称' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 镜头晃动) == 0x000354, "Member 'USettingSlotUMG_C::镜头晃动' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 击杀提示) == 0x000358, "Member 'USettingSlotUMG_C::击杀提示' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 游戏难度) == 0x00035C, "Member 'USettingSlotUMG_C::游戏难度' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, CheatCode_) == 0x000360, "Member 'USettingSlotUMG_C::CheatCode_' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, CheatCodeEnum) == 0x000361, "Member 'USettingSlotUMG_C::CheatCodeEnum' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, As_Player_BP) == 0x000368, "Member 'USettingSlotUMG_C::As_Player_BP' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 无敌) == 0x000370, "Member 'USettingSlotUMG_C::无敌' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, __) == 0x000374, "Member 'USettingSlotUMG_C::__' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 无限子弹) == 0x000378, "Member 'USettingSlotUMG_C::无限子弹' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 超级跳) == 0x00037C, "Member 'USettingSlotUMG_C::超级跳' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 闪电侠) == 0x000380, "Member 'USettingSlotUMG_C::闪电侠' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 聆听) == 0x000384, "Member 'USettingSlotUMG_C::聆听' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 子弹时间) == 0x000388, "Member 'USettingSlotUMG_C::子弹时间' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 丧尸巨大化) == 0x00038C, "Member 'USettingSlotUMG_C::丧尸巨大化' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 无后坐力) == 0x000390, "Member 'USettingSlotUMG_C::无后坐力' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 兔女郎丧尸) == 0x000394, "Member 'USettingSlotUMG_C::兔女郎丧尸' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 无重力) == 0x000398, "Member 'USettingSlotUMG_C::无重力' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 自动瞄准) == 0x00039C, "Member 'USettingSlotUMG_C::自动瞄准' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 丧尸下班) == 0x0003A0, "Member 'USettingSlotUMG_C::丧尸下班' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 抗锯齿模式Index) == 0x0003A4, "Member 'USettingSlotUMG_C::抗锯齿模式Index' has a wrong offset!");
static_assert(offsetof(USettingSlotUMG_C, 垂直同步Index) == 0x0003A8, "Member 'USettingSlotUMG_C::垂直同步Index' has a wrong offset!");

}

