#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Chinese_Vampire_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameDifficultyEnum_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Chinese_Vampire_BP.Chinese_Vampire_BP_C
// 0x0100 (0x05C0 - 0x04C0)
class AChinese_Vampire_BP_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LeftFoot;                                          // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        RightFoot;                                         // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ____0______0_6F3DAB3A48EF3880C7F477AB7126C120;     // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_6F3DAB3A48EF3880C7F477AB7126C120; // 0x04E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_0; // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         当前血量; // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayer_BP_C*                           PlayerRef;                                         // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  ZombieClass;                                       // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   Idle;                                              // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           PlayIdle;                                          // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Aggressive;                                        // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   Hit;                                               // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MeleeByPlayer_;                                    // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackStart;                                       // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_542[0x6];                                      // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitPlayer;                                         // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   攻击检测起始骨骼; // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   攻击检测终点骨骼; // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         击退的速度; // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   AttackAnim;                                        // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          是否能够被伤害; // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_579[0x3];                                      // 0x0579(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         应用伤害;                                      // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         总血量; // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleTime;                                          // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Random_Location;                                   // 0x0588(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IdleLocation;                                      // 0x0594(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameDifficultyEnum                           游戏难度; // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         攻击速度; // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChinese_Vampire_Anim_C*                As_Chinese_Vampire_Anim;                           // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         攻击前摇; // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         攻击伤害; // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Chinese_Vampire_BP(int32 EntryPoint);
	void UISettingApply();
	void DamageHit(const struct FHitResult& Hit_0, float Damage, bool isMelee_);
	void ReceiveBeginPlay();
	void 关闭被击退状态();
	void 击退();
	void RightFootSound();
	void leftFootSound();
	void 僵尸攻击范围();
	void ResetAttack();
	void ReceiveTick(float DeltaSeconds);
	void ChangeLightColor();
	void 原地不动时间();
	void OnSuccess_2180E67C465A2F1B00043781C4893172(EPathFollowingResult MovementResult);
	void OnFail_2180E67C465A2F1B00043781C4893172(EPathFollowingResult MovementResult);
	void 时间轴_0__UpdateFunc();
	void 时间轴_0__FinishedFunc();
	void 脚步声检测(class USceneComponent* 目标);
	void 更改控制旋转模式(bool 将旋转朝向运动, bool 使用控制器所需的旋转, bool 使用控制器旋转Yaw);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Chinese_Vampire_BP_C">();
	}
	static class AChinese_Vampire_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChinese_Vampire_BP_C>();
	}
};
static_assert(alignof(AChinese_Vampire_BP_C) == 0x000010, "Wrong alignment on AChinese_Vampire_BP_C");
static_assert(sizeof(AChinese_Vampire_BP_C) == 0x0005C0, "Wrong size on AChinese_Vampire_BP_C");
static_assert(offsetof(AChinese_Vampire_BP_C, UberGraphFrame) == 0x0004C0, "Member 'AChinese_Vampire_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, PointLight) == 0x0004C8, "Member 'AChinese_Vampire_BP_C::PointLight' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, LeftFoot) == 0x0004D0, "Member 'AChinese_Vampire_BP_C::LeftFoot' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, RightFoot) == 0x0004D8, "Member 'AChinese_Vampire_BP_C::RightFoot' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, ____0______0_6F3DAB3A48EF3880C7F477AB7126C120) == 0x0004E0, "Member 'AChinese_Vampire_BP_C::____0______0_6F3DAB3A48EF3880C7F477AB7126C120' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, ____0__Direction_6F3DAB3A48EF3880C7F477AB7126C120) == 0x0004E4, "Member 'AChinese_Vampire_BP_C::____0__Direction_6F3DAB3A48EF3880C7F477AB7126C120' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 时间轴_0) == 0x0004E8, "Member 'AChinese_Vampire_BP_C::时间轴_0' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 当前血量) == 0x0004F0, "Member 'AChinese_Vampire_BP_C::当前血量' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, Dead) == 0x0004F4, "Member 'AChinese_Vampire_BP_C::Dead' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, PlayerRef) == 0x0004F8, "Member 'AChinese_Vampire_BP_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, ZombieClass) == 0x000500, "Member 'AChinese_Vampire_BP_C::ZombieClass' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, Idle) == 0x000510, "Member 'AChinese_Vampire_BP_C::Idle' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, PlayIdle) == 0x000520, "Member 'AChinese_Vampire_BP_C::PlayIdle' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, Aggressive) == 0x000528, "Member 'AChinese_Vampire_BP_C::Aggressive' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, Hit) == 0x000530, "Member 'AChinese_Vampire_BP_C::Hit' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, MeleeByPlayer_) == 0x000540, "Member 'AChinese_Vampire_BP_C::MeleeByPlayer_' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, AttackStart) == 0x000541, "Member 'AChinese_Vampire_BP_C::AttackStart' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, HitPlayer) == 0x000548, "Member 'AChinese_Vampire_BP_C::HitPlayer' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 攻击检测起始骨骼) == 0x000550, "Member 'AChinese_Vampire_BP_C::攻击检测起始骨骼' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 攻击检测终点骨骼) == 0x000558, "Member 'AChinese_Vampire_BP_C::攻击检测终点骨骼' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 击退的速度) == 0x000560, "Member 'AChinese_Vampire_BP_C::击退的速度' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, AttackAnim) == 0x000568, "Member 'AChinese_Vampire_BP_C::AttackAnim' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 是否能够被伤害) == 0x000578, "Member 'AChinese_Vampire_BP_C::是否能够被伤害' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 应用伤害) == 0x00057C, "Member 'AChinese_Vampire_BP_C::应用伤害' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 总血量) == 0x000580, "Member 'AChinese_Vampire_BP_C::总血量' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, IdleTime) == 0x000584, "Member 'AChinese_Vampire_BP_C::IdleTime' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, Random_Location) == 0x000588, "Member 'AChinese_Vampire_BP_C::Random_Location' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, IdleLocation) == 0x000594, "Member 'AChinese_Vampire_BP_C::IdleLocation' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 游戏难度) == 0x0005A0, "Member 'AChinese_Vampire_BP_C::游戏难度' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 攻击速度) == 0x0005A4, "Member 'AChinese_Vampire_BP_C::攻击速度' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, As_Chinese_Vampire_Anim) == 0x0005A8, "Member 'AChinese_Vampire_BP_C::As_Chinese_Vampire_Anim' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 攻击前摇) == 0x0005B0, "Member 'AChinese_Vampire_BP_C::攻击前摇' has a wrong offset!");
static_assert(offsetof(AChinese_Vampire_BP_C, 攻击伤害) == 0x0005B4, "Member 'AChinese_Vampire_BP_C::攻击伤害' has a wrong offset!");

}

