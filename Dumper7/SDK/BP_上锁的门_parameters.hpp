#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_上锁的门

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_上锁的门.BP_上锁的门_C.ExecuteUbergraph_BP_上锁的门
// 0x02D8 (0x02D8 - 0x0000)
struct BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_________ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable_2;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Player;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ___bool_IsClosed_Variable_1;                       // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x00E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_1;        // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPickUpKeyboardTips_C*                  K2Node_DynamicCast_AsPick_Up_Keyboard_Tips;        // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPickUpKeyboardTips_C*                  K2Node_DynamicCast_AsPick_Up_Keyboard_Tips_1;      // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP;                    // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0224(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_IsClosed_Variable_2;                       // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_________ReturnValue_1;                    // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门) == 0x000008, "Wrong alignment on BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门");
static_assert(sizeof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门) == 0x0002D8, "Wrong size on BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, EntryPoint) == 0x000000, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_________ReturnValue) == 0x000004, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_________ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, ___bool_Has_Been_Initd_Variable) == 0x000005, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, ___bool_Has_Been_Initd_Variable_1) == 0x000006, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::___bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, ___bool_IsClosed_Variable) == 0x000007, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, ___bool_Has_Been_Initd_Variable_2) == 0x000008, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::___bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_Event_Player) == 0x000010, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000024, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_MakeRotator_ReturnValue) == 0x000034, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_RLerp_ReturnValue) == 0x000040, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00004C, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, ___bool_IsClosed_Variable_1) == 0x0000D4, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::___bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_RLerp_ReturnValue_1) == 0x0000D8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x0000E4, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0000E8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000170, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetUserWidgetObject_ReturnValue_1) == 0x000178, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetUserWidgetObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_DynamicCast_AsPick_Up_Keyboard_Tips) == 0x000180, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_DynamicCast_AsPick_Up_Keyboard_Tips' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_DynamicCast_AsPick_Up_Keyboard_Tips_1) == 0x000190, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_DynamicCast_AsPick_Up_Keyboard_Tips_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_DynamicCast_bSuccess_1) == 0x000198, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetPlayerPawn_ReturnValue) == 0x0001A0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_DynamicCast_AsPlayer_BP) == 0x0001A8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_DynamicCast_AsPlayer_BP' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, K2Node_DynamicCast_bSuccess_2) == 0x0001B0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetPlayerController_ReturnValue) == 0x0001B8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0001C0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001CC, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x0001D8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_BreakVector_X) == 0x0001E4, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_BreakVector_Y) == 0x0001E8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_BreakVector_Z) == 0x0001EC, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001F0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetPlayerController_ReturnValue_1) == 0x0001F8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000200, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00020C, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_BreakRotator_Roll) == 0x000218, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_BreakRotator_Pitch) == 0x00021C, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_BreakRotator_Yaw) == 0x000220, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000224, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0002AC, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_MakeRotator_ReturnValue_1) == 0x0002B0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetPlayerController_ReturnValue_2) == 0x0002C0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_GetPlayerController_ReturnValue_3) == 0x0002C8, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, ___bool_IsClosed_Variable_2) == 0x0002D0, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::___bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门, CallFunc_________ReturnValue_1) == 0x0002D1, "Member 'BP_上锁的门_C_ExecuteUbergraph_BP_上锁的门::CallFunc_________ReturnValue_1' has a wrong offset!");

// Function BP_上锁的门.BP_上锁的门_C.PlayerInteration
// 0x0008 (0x0008 - 0x0000)
struct BP_上锁的门_C_PlayerInteration final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_上锁的门_C_PlayerInteration) == 0x000008, "Wrong alignment on BP_上锁的门_C_PlayerInteration");
static_assert(sizeof(BP_上锁的门_C_PlayerInteration) == 0x000008, "Wrong size on BP_上锁的门_C_PlayerInteration");
static_assert(offsetof(BP_上锁的门_C_PlayerInteration, Player) == 0x000000, "Member 'BP_上锁的门_C_PlayerInteration::Player' has a wrong offset!");

// Function BP_上锁的门.BP_上锁的门_C.角色在门的哪面
// 0x0050 (0x0050 - 0x0000)
struct BP_上锁的门_C_角色在门的哪面 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_上锁的门_C_角色在门的哪面) == 0x000004, "Wrong alignment on BP_上锁的门_C_角色在门的哪面");
static_assert(sizeof(BP_上锁的门_C_角色在门的哪面) == 0x000050, "Wrong size on BP_上锁的门_C_角色在门的哪面");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, ReturnValue) == 0x000000, "Member 'BP_上锁的门_C_角色在门的哪面::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00001C, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000034, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_BreakVector_X) == 0x000040, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_BreakVector_Y) == 0x000044, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_BreakVector_Z) == 0x000048, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_上锁的门_C_角色在门的哪面, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_上锁的门_C_角色在门的哪面::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

}

