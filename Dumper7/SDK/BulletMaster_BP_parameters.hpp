#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BulletMaster_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function BulletMaster_BP.BulletMaster_BP_C.ExecuteUbergraph_BulletMaster_BP
// 0x0108 (0x0108 - 0x0000)
struct BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0050(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TScriptInterface<class ICustomDamage_C>       K2Node_DynamicCast_AsCustom_Damage;                // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombie_BP_C*                           K2Node_DynamicCast_AsZombie_BP;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP) == 0x000008, "Wrong alignment on BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP");
static_assert(sizeof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP) == 0x000108, "Wrong size on BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, EntryPoint) == 0x000000, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_MyComp) == 0x000010, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_Other) == 0x000018, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_OtherComp) == 0x000020, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_bSelfMoved) == 0x000028, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_HitLocation) == 0x00002C, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_HitNormal) == 0x000038, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_NormalImpulse) == 0x000044, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_Event_Hit) == 0x000050, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_DynamicCast_AsCustom_Damage) == 0x0000D8, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_DynamicCast_AsCustom_Damage' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_DynamicCast_AsZombie_BP) == 0x0000F0, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_DynamicCast_AsZombie_BP' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, K2Node_DynamicCast_bSuccess_1) == 0x0000F8, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, CallFunc_DoesImplementInterface_ReturnValue) == 0x0000F9, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000FA, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP, CallFunc_GetPlayerPawn_ReturnValue) == 0x000100, "Member 'BulletMaster_BP_C_ExecuteUbergraph_BulletMaster_BP::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");

// Function BulletMaster_BP.BulletMaster_BP_C.ReceiveHit
// 0x00C8 (0x00C8 - 0x0000)
struct BulletMaster_BP_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BulletMaster_BP_C_ReceiveHit) == 0x000008, "Wrong alignment on BulletMaster_BP_C_ReceiveHit");
static_assert(sizeof(BulletMaster_BP_C_ReceiveHit) == 0x0000C8, "Wrong size on BulletMaster_BP_C_ReceiveHit");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, MyComp) == 0x000000, "Member 'BulletMaster_BP_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, Other) == 0x000008, "Member 'BulletMaster_BP_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, OtherComp) == 0x000010, "Member 'BulletMaster_BP_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'BulletMaster_BP_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, HitLocation) == 0x00001C, "Member 'BulletMaster_BP_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, HitNormal) == 0x000028, "Member 'BulletMaster_BP_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'BulletMaster_BP_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_ReceiveHit, Hit) == 0x000040, "Member 'BulletMaster_BP_C_ReceiveHit::Hit' has a wrong offset!");

// Function BulletMaster_BP.BulletMaster_BP_C.HitSurface
// 0x02A8 (0x02A8 - 0x0000)
struct BulletMaster_BP_C_HitSurface final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EPhysicalSurface                              ___byte_Variable;                                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ___object_Variable;                                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_1;                              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_2;                              // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_3;                              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_4;                              // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_5;                              // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_6;                              // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_7;                              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_8;                              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_9;                              // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_10;                             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ___object_Variable_11;                             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              ___byte_Variable_1;                                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ___object_Variable_12;                             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_13;                             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_14;                             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_15;                             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_16;                             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_17;                             // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_18;                             // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_19;                             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_20;                             // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_21;                             // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_22;                             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ___object_Variable_23;                             // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ___object_Variable_24;                             // 0x01F0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0200(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_Select_Default_1;                           // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletMaster_BP_C_HitSurface) == 0x000008, "Wrong alignment on BulletMaster_BP_C_HitSurface");
static_assert(sizeof(BulletMaster_BP_C_HitSurface) == 0x0002A8, "Wrong size on BulletMaster_BP_C_HitSurface");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, Hit) == 0x000000, "Member 'BulletMaster_BP_C_HitSurface::Hit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___byte_Variable) == 0x000088, "Member 'BulletMaster_BP_C_HitSurface::___byte_Variable' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x000089, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x00008A, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_Time) == 0x00008C, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_Distance) == 0x000090, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_Location) == 0x000094, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A0, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_Normal) == 0x0000AC, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x0000B8, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_HitBoneName) == 0x0000E0, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_HitItem) == 0x0000E8, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_ElementIndex) == 0x0000EC, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_FaceIndex) == 0x0000F0, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_TraceStart) == 0x0000F4, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_BreakHitResult_TraceEnd) == 0x000100, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable) == 0x000110, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_MakeRotFromX_ReturnValue) == 0x000118, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000124, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_1) == 0x000130, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_1' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_2) == 0x000138, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_2' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_3) == 0x000140, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_3' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_4) == 0x000148, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_4' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_5) == 0x000150, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_5' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_6) == 0x000158, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_6' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_7) == 0x000160, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_7' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_8) == 0x000168, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_8' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_9) == 0x000170, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_9' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_10) == 0x000178, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_10' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_11) == 0x000180, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_11' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___byte_Variable_1) == 0x000188, "Member 'BulletMaster_BP_C_HitSurface::___byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_12) == 0x000190, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_12' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_13) == 0x000198, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_13' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_14) == 0x0001A0, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_14' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_15) == 0x0001A8, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_15' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_16) == 0x0001B0, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_16' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_17) == 0x0001B8, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_17' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_18) == 0x0001C0, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_18' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_19) == 0x0001C8, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_19' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_20) == 0x0001D0, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_20' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_21) == 0x0001D8, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_21' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_22) == 0x0001E0, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_22' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_23) == 0x0001E8, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_23' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, ___object_Variable_24) == 0x0001F0, "Member 'BulletMaster_BP_C_HitSurface::___object_Variable_24' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_SphereTraceSingle_OutHit) == 0x000200, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_SphereTraceSingle_ReturnValue) == 0x000288, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_GetSurfaceType_ReturnValue) == 0x000289, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, K2Node_Select_Default) == 0x000290, "Member 'BulletMaster_BP_C_HitSurface::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, K2Node_Select_Default_1) == 0x000298, "Member 'BulletMaster_BP_C_HitSurface::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_HitSurface, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0002A0, "Member 'BulletMaster_BP_C_HitSurface::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

// Function BulletMaster_BP.BulletMaster_BP_C.击中静态物体
// 0x0128 (0x0128 - 0x0000)
struct BulletMaster_BP_C_击中静态物体 final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDecalComponent*                        CallFunc_SpawnDecalAttached_ReturnValue;           // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BulletMaster_BP_C_击中静态物体) == 0x000008, "Wrong alignment on BulletMaster_BP_C_击中静态物体");
static_assert(sizeof(BulletMaster_BP_C_击中静态物体) == 0x000128, "Wrong size on BulletMaster_BP_C_击中静态物体");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, Hit) == 0x000000, "Member 'BulletMaster_BP_C_击中静态物体::Hit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_bBlockingHit) == 0x000088, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_bInitialOverlap) == 0x000089, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_Time) == 0x00008C, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_Distance) == 0x000090, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_Location) == 0x000094, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A0, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_Normal) == 0x0000AC, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_ImpactNormal) == 0x0000B8, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_HitBoneName) == 0x0000E0, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_HitItem) == 0x0000E8, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_ElementIndex) == 0x0000EC, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_FaceIndex) == 0x0000F0, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_TraceStart) == 0x0000F4, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_BreakHitResult_TraceEnd) == 0x000100, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00010C, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_SpawnDecalAttached_ReturnValue) == 0x000118, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_SpawnDecalAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_击中静态物体, CallFunc_IsValid_ReturnValue) == 0x000120, "Member 'BulletMaster_BP_C_击中静态物体::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BulletMaster_BP.BulletMaster_BP_C.施加冲量
// 0x0138 (0x0138 - 0x0000)
struct BulletMaster_BP_C_施加冲量 final
{
public:
	class UPrimitiveComponent*                    InputObject;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         力量; // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BulletMaster_BP_C_施加冲量) == 0x000008, "Wrong alignment on BulletMaster_BP_C_施加冲量");
static_assert(sizeof(BulletMaster_BP_C_施加冲量) == 0x000138, "Wrong size on BulletMaster_BP_C_施加冲量");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, InputObject) == 0x000000, "Member 'BulletMaster_BP_C_施加冲量::InputObject' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, 力量) == 0x000008, "Member 'BulletMaster_BP_C_施加冲量::力量' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, Hit) == 0x00000C, "Member 'BulletMaster_BP_C_施加冲量::Hit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_GetVelocity_ReturnValue) == 0x000094, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A0, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000A1, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_Time) == 0x0000A4, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_Distance) == 0x0000A8, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_Location) == 0x0000AC, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B8, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_Normal) == 0x0000C4, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D0, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_PhysMat) == 0x0000E0, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_HitActor) == 0x0000E8, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_HitComponent) == 0x0000F0, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_HitBoneName) == 0x0000F8, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_HitItem) == 0x000100, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_ElementIndex) == 0x000104, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_FaceIndex) == 0x000108, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_TraceStart) == 0x00010C, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_BreakHitResult_TraceEnd) == 0x000118, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000124, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletMaster_BP_C_施加冲量, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000131, "Member 'BulletMaster_BP_C_施加冲量::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");

}

