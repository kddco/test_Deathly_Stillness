#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PickUpMaster_BP

#include "Basic.hpp"

#include "PickUpMaster_BP_classes.hpp"
#include "PickUpMaster_BP_parameters.hpp"


namespace SDK
{

// Function PickUpMaster_BP.PickUpMaster_BP_C.ExecuteUbergraph_PickUpMaster_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickUpMaster_BP_C::ExecuteUbergraph_PickUpMaster_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "ExecuteUbergraph_PickUpMaster_BP");

	Params::PickUpMaster_BP_C_ExecuteUbergraph_PickUpMaster_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APickUpMaster_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.RenderDeepOpen
// (Public, BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::RenderDeepOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "RenderDeepOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.RenderDeepClose
// (Public, BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::RenderDeepClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "RenderDeepClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickUpMaster_BP_C::BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::PickUpMaster_BP_C_BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void APickUpMaster_BP_C::BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::PickUpMaster_BP_C_BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.互动结束不销毁
// (BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::互动结束不销毁()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "互动结束不销毁");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.关闭位置提示
// (BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::关闭位置提示()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "关闭位置提示");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.PickUpFinish
// (BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::PickUpFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "PickUpFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.PlayerInteration
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickUpMaster_BP_C::PlayerInteration(class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "PlayerInteration");

	Params::PickUpMaster_BP_C_PlayerInteration Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.BreakInteration
// (Public, BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::BreakInteration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "BreakInteration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.loading__UpdateFunc
// (BlueprintEvent)

void APickUpMaster_BP_C::loading__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "loading__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.loading__FinishedFunc
// (BlueprintEvent)

void APickUpMaster_BP_C::loading__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "loading__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.初始化物品
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APickUpMaster_BP_C::初始化物品()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "初始化物品");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickUpMaster_BP.PickUpMaster_BP_C.高亮开启和关闭
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    模型是否高亮(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ESlateVisibility                        Circle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESlateVisibility                        keyboard                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickUpMaster_BP_C::高亮开启和关闭(bool 模型是否高亮, ESlateVisibility Circle, ESlateVisibility keyboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickUpMaster_BP_C", "高亮开启和关闭");

	Params::PickUpMaster_BP_C_高亮开启和关闭 Parms{};

	Parms.模型是否高亮 = 模型是否高亮;
	Parms.Circle = Circle;
	Parms.keyboard = keyboard;

	UObject::ProcessEvent(Func, &Parms);
}

}

