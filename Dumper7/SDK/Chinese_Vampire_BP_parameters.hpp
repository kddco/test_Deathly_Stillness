#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Chinese_Vampire_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.ExecuteUbergraph_Chinese_Vampire_BP
// 0x0680 (0x0680 - 0x0000)
struct Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;       // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          ___byte_Variable;                                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ___object_Variable;                                // 0x0020(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ___object_Variable_1;                              // 0x0080(0x0010)(ConstParm, ReferenceParm)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0094(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP;                    // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;     // 0x01AC(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_Array_Get_Item;                           // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation; // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue; // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0240(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue_1;            // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Has_Been_Initd_Variable_1;                 // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable;                         // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x02FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_1;               // 0x0308(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_1;          // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0392(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393[0x1];                                      // 0x0393(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x03B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x03E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0408(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP_1;                  // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0438(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChinese_Vampire_Anim_C*                K2Node_DynamicCast_AsChinese_Vampire_Anim;         // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable_1;                       // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_453[0x5];                                      // 0x0453(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_2;            // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_Array_Get_Item_1;                         // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Has_Been_Initd_Variable_2;                 // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable_2;                       // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_472[0x2];                                      // 0x0472(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_2;       // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Play_ReturnValue_1;               // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0498(0x0008)(NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x04A0(0x0010)(ReferenceParm)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x04B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AChineseAlleyQuest_BP_C*                CallFunc_GetActorOfClass_ReturnValue;              // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x04C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_Damage;                               // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isMelee_;                             // 0x0554(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0555(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0556(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_557[0x1];                                      // 0x0557(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x0560(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x056C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0578(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0584(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x05A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x05BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x05C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x05D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x05E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x05F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP_2;                  // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0619(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61A[0x6];                                      // 0x061A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_3;            // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChinese_Vampire_Anim_C*                K2Node_DynamicCast_AsChinese_Vampire_Anim_1;       // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_631[0x3];                                      // 0x0631(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0634(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x063C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_5;         // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMyGameInstance_C*                      K2Node_DynamicCast_AsMy_Game_Instance;             // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSaveGameExist_ReturnValue;            // 0x0668(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStateSetting_C*                  K2Node_DynamicCast_AsPlayer_State_Setting;         // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP) == 0x000008, "Wrong alignment on Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP");
static_assert(sizeof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP) == 0x000680, "Wrong size on Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, EntryPoint) == 0x000000, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_CustomEvent_MovementResult_1) == 0x000004, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_CustomEvent_MovementResult) == 0x000005, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___byte_Variable) == 0x000018, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___byte_Variable' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___object_Variable) == 0x000020, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___object_Variable' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_Event_DeltaSeconds) == 0x000040, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000044, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetActorForwardVector_ReturnValue) == 0x000050, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00005C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetAnimInstance_ReturnValue) == 0x000068, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Add_VectorVector_ReturnValue) == 0x000070, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___object_Variable_1) == 0x000080, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___object_Variable_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___bool_Has_Been_Initd_Variable) == 0x000090, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SphereTraceSingle_OutHit) == 0x000094, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SphereTraceSingle_ReturnValue) == 0x00011C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_bBlockingHit) == 0x00011D, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_bInitialOverlap) == 0x00011E, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Time) == 0x000120, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Distance) == 0x000124, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Location) == 0x000128, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ImpactPoint) == 0x000134, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Normal) == 0x000140, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ImpactNormal) == 0x00014C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_PhysMat) == 0x000158, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitActor) == 0x000160, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitComponent) == 0x000168, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitBoneName) == 0x000170, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitItem) == 0x000178, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ElementIndex) == 0x00017C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_FaceIndex) == 0x000180, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_TraceStart) == 0x000184, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_TraceEnd) == 0x000190, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsPlayer_BP) == 0x0001A0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsPlayer_BP' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess) == 0x0001A8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001A9, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001AC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0001BC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Array_Get_Item) == 0x0001C0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetAIController_ReturnValue) == 0x0001C8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0001D0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x0001D8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_IsValid_ReturnValue) == 0x0001E0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001E4, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetPlayerPawn_ReturnValue) == 0x0001E8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0001F0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation) == 0x0001FC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue) == 0x000208, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00020C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakVector_X) == 0x000218, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakVector_Y) == 0x00021C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakVector_Z) == 0x000220, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000224, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_MakeVector_ReturnValue) == 0x000228, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_VLerp_ReturnValue) == 0x000234, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000240, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0002C8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0002CC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x0002D8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x0002E0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetAIController_ReturnValue_1) == 0x0002E8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetAIController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomFloatInRange_ReturnValue) == 0x0002F0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Montage_Play_ReturnValue) == 0x0002F4, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___bool_Has_Been_Initd_Variable_1) == 0x0002F8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___bool_IsClosed_Variable) == 0x0002F9, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x0002FC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SphereTraceSingle_OutHit_1) == 0x000308, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SphereTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SphereTraceSingle_ReturnValue_1) == 0x000390, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SphereTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000391, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000392, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Time_1) == 0x000394, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Distance_1) == 0x000398, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Location_1) == 0x00039C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0003A8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Normal_1) == 0x0003B4, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0003C0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_PhysMat_1) == 0x0003D0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitActor_1) == 0x0003D8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitComponent_1) == 0x0003E0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitBoneName_1) == 0x0003E8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitItem_1) == 0x0003F0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ElementIndex_1) == 0x0003F4, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_FaceIndex_1) == 0x0003F8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_TraceStart_1) == 0x0003FC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_TraceEnd_1) == 0x000408, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsPlayer_BP_1) == 0x000418, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsPlayer_BP_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess_1) == 0x000420, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_ApplyDamage_ReturnValue) == 0x000424, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000428, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00042C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000438, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000440, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsChinese_Vampire_Anim) == 0x000448, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsChinese_Vampire_Anim' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess_2) == 0x000450, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_IsValid_ReturnValue_1) == 0x000451, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___bool_IsClosed_Variable_1) == 0x000452, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetAnimInstance_ReturnValue_2) == 0x000458, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetAnimInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000460, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Array_Get_Item_1) == 0x000468, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___bool_Has_Been_Initd_Variable_2) == 0x000470, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, ___bool_IsClosed_Variable_2) == 0x000471, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::___bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000474, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomIntegerInRange_ReturnValue_2) == 0x000480, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomIntegerInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000484, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000488, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00048C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Montage_Play_ReturnValue_1) == 0x000490, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Montage_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_SetTimer_ReturnValue) == 0x000498, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_MakeArray_Array) == 0x0004A0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0004B0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SpawnSoundAttached_ReturnValue) == 0x0004B8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetActorOfClass_ReturnValue) == 0x0004C0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_Event_Hit) == 0x0004C8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_Event_Damage) == 0x000550, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_Event_isMelee_) == 0x000554, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_Event_isMelee_' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000555, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000556, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Time_2) == 0x000558, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Distance_2) == 0x00055C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Location_2) == 0x000560, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ImpactPoint_2) == 0x00056C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_Normal_2) == 0x000578, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000584, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_PhysMat_2) == 0x000590, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitActor_2) == 0x000598, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitComponent_2) == 0x0005A0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitBoneName_2) == 0x0005A8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_HitItem_2) == 0x0005B0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_ElementIndex_2) == 0x0005B4, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_FaceIndex_2) == 0x0005B8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_TraceStart_2) == 0x0005BC, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_BreakHitResult_TraceEnd_2) == 0x0005C8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x0005D4, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x0005E0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0005E8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_SetTimer_ReturnValue_1) == 0x0005F0, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x0005F8, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000608, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsPlayer_BP_2) == 0x000610, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsPlayer_BP_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess_3) == 0x000618, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_SwitchEnum_CmpSuccess) == 0x000619, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetAnimInstance_ReturnValue_3) == 0x000620, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetAnimInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsChinese_Vampire_Anim_1) == 0x000628, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsChinese_Vampire_Anim_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess_4) == 0x000630, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000634, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x000638, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x00063C, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_RandomFloatInRange_ReturnValue_5) == 0x000640, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_RandomFloatInRange_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_GetGameInstance_ReturnValue) == 0x000648, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsMy_Game_Instance) == 0x000650, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsMy_Game_Instance' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess_5) == 0x000658, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000660, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, CallFunc_DoesSaveGameExist_ReturnValue) == 0x000668, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::CallFunc_DoesSaveGameExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_AsPlayer_State_Setting) == 0x000670, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_AsPlayer_State_Setting' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP, K2Node_DynamicCast_bSuccess_6) == 0x000678, "Member 'Chinese_Vampire_BP_C_ExecuteUbergraph_Chinese_Vampire_BP::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.DamageHit
// 0x0090 (0x0090 - 0x0000)
struct Chinese_Vampire_BP_C_DamageHit final
{
public:
	struct FHitResult                             Hit_0;                                             // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isMelee_;                                          // 0x008C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Chinese_Vampire_BP_C_DamageHit) == 0x000004, "Wrong alignment on Chinese_Vampire_BP_C_DamageHit");
static_assert(sizeof(Chinese_Vampire_BP_C_DamageHit) == 0x000090, "Wrong size on Chinese_Vampire_BP_C_DamageHit");
static_assert(offsetof(Chinese_Vampire_BP_C_DamageHit, Hit_0) == 0x000000, "Member 'Chinese_Vampire_BP_C_DamageHit::Hit_0' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_DamageHit, Damage) == 0x000088, "Member 'Chinese_Vampire_BP_C_DamageHit::Damage' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_DamageHit, isMelee_) == 0x00008C, "Member 'Chinese_Vampire_BP_C_DamageHit::isMelee_' has a wrong offset!");

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Chinese_Vampire_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Chinese_Vampire_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on Chinese_Vampire_BP_C_ReceiveTick");
static_assert(sizeof(Chinese_Vampire_BP_C_ReceiveTick) == 0x000004, "Wrong size on Chinese_Vampire_BP_C_ReceiveTick");
static_assert(offsetof(Chinese_Vampire_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Chinese_Vampire_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.OnSuccess_2180E67C465A2F1B00043781C4893172
// 0x0001 (0x0001 - 0x0000)
struct Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172) == 0x000001, "Wrong alignment on Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172");
static_assert(sizeof(Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172) == 0x000001, "Wrong size on Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172");
static_assert(offsetof(Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172, MovementResult) == 0x000000, "Member 'Chinese_Vampire_BP_C_OnSuccess_2180E67C465A2F1B00043781C4893172::MovementResult' has a wrong offset!");

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.OnFail_2180E67C465A2F1B00043781C4893172
// 0x0001 (0x0001 - 0x0000)
struct Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172) == 0x000001, "Wrong alignment on Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172");
static_assert(sizeof(Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172) == 0x000001, "Wrong size on Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172");
static_assert(offsetof(Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172, MovementResult) == 0x000000, "Member 'Chinese_Vampire_BP_C_OnFail_2180E67C465A2F1B00043781C4893172::MovementResult' has a wrong offset!");

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.脚步声检测
// 0x0148 (0x0148 - 0x0000)
struct Chinese_Vampire_BP_C_脚步声检测 final
{
public:
	class USceneComponent*                        目标; // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ___object_Variable;                                // 0x0008(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Chinese_Vampire_BP_C_脚步声检测) == 0x000008, "Wrong alignment on Chinese_Vampire_BP_C_脚步声检测");
static_assert(sizeof(Chinese_Vampire_BP_C_脚步声检测) == 0x000148, "Wrong size on Chinese_Vampire_BP_C_脚步声检测");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, 目标) == 0x000000, "Member 'Chinese_Vampire_BP_C_脚步声检测::目标' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, ___object_Variable) == 0x000008, "Member 'Chinese_Vampire_BP_C_脚步声检测::___object_Variable' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_RandomFloatInRange_ReturnValue) == 0x000024, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000034, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_LineTraceSingle_OutHit) == 0x000038, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_LineTraceSingle_ReturnValue) == 0x0000C0, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C1, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C2, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_Time) == 0x0000C4, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_Distance) == 0x0000C8, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_Location) == 0x0000CC, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D8, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_Normal) == 0x0000E4, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F0, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_TraceStart) == 0x00012C, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_BreakHitResult_TraceEnd) == 0x000138, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, CallFunc_GetSurfaceType_ReturnValue) == 0x000144, "Member 'Chinese_Vampire_BP_C_脚步声检测::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_脚步声检测, K2Node_SwitchEnum_CmpSuccess) == 0x000145, "Member 'Chinese_Vampire_BP_C_脚步声检测::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Chinese_Vampire_BP.Chinese_Vampire_BP_C.更改控制旋转模式
// 0x0003 (0x0003 - 0x0000)
struct Chinese_Vampire_BP_C_更改控制旋转模式 final
{
public:
	bool                                          将旋转朝向运动; // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          使用控制器所需的旋转; // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          使用控制器旋转Yaw; // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Chinese_Vampire_BP_C_更改控制旋转模式) == 0x000001, "Wrong alignment on Chinese_Vampire_BP_C_更改控制旋转模式");
static_assert(sizeof(Chinese_Vampire_BP_C_更改控制旋转模式) == 0x000003, "Wrong size on Chinese_Vampire_BP_C_更改控制旋转模式");
static_assert(offsetof(Chinese_Vampire_BP_C_更改控制旋转模式, 将旋转朝向运动) == 0x000000, "Member 'Chinese_Vampire_BP_C_更改控制旋转模式::将旋转朝向运动' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_更改控制旋转模式, 使用控制器所需的旋转) == 0x000001, "Member 'Chinese_Vampire_BP_C_更改控制旋转模式::使用控制器所需的旋转' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_BP_C_更改控制旋转模式, 使用控制器旋转Yaw) == 0x000002, "Member 'Chinese_Vampire_BP_C_更改控制旋转模式::使用控制器旋转Yaw' has a wrong offset!");

}

