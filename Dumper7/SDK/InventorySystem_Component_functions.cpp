#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventorySystem_Component

#include "Basic.hpp"

#include "InventorySystem_Component_classes.hpp"
#include "InventorySystem_Component_parameters.hpp"


namespace SDK
{

// Function InventorySystem_Component.InventorySystem_Component_C.ExecuteUbergraph_InventorySystem_Component
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventorySystem_Component_C::ExecuteUbergraph_InventorySystem_Component(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "ExecuteUbergraph_InventorySystem_Component");

	Params::InventorySystem_Component_C_ExecuteUbergraph_InventorySystem_Component Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventorySystem_Component.InventorySystem_Component_C.添加武器
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    是否是主武器(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AWeapon_Master_C*                 weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventorySystem_Component_C::添加武器(bool 是否是主武器, class AWeapon_Master_C* weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "添加武器");

	Params::InventorySystem_Component_C_添加武器 Parms{};

	Parms.是否是主武器 = 是否是主武器;
	Parms.weapon = weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventorySystem_Component.InventorySystem_Component_C.搜索第一个空格子
// (BlueprintCallable, BlueprintEvent)

void UInventorySystem_Component_C::搜索第一个空格子()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "搜索第一个空格子");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventorySystem_Component.InventorySystem_Component_C.丢弃物品
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   丢弃数量(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FInventoryData_Struct&     丢弃物品的数据(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UInventorySystem_Component_C::丢弃物品(int32 丢弃数量, const struct FInventoryData_Struct& 丢弃物品的数据)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "丢弃物品");

	Params::InventorySystem_Component_C_丢弃物品 Parms{};

	Parms.丢弃数量 = 丢弃数量;
	Parms.丢弃物品的数据 = std::move(丢弃物品的数据);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventorySystem_Component.InventorySystem_Component_C.物品对调
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventorySystem_Component_C::物品对调(int32 Current, int32 Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "物品对调");

	Params::InventorySystem_Component_C_物品对调 Parms{};

	Parms.Current = Current;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventorySystem_Component.InventorySystem_Component_C.刷新数据
// (BlueprintCallable, BlueprintEvent)

void UInventorySystem_Component_C::刷新数据()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "刷新数据");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventorySystem_Component.InventorySystem_Component_C.使用物品
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInventoryData_Struct&     ItemData                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UInventorySystem_Component_C::使用物品(const struct FInventoryData_Struct& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "使用物品");

	Params::InventorySystem_Component_C_使用物品 Parms{};

	Parms.ItemData = std::move(ItemData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventorySystem_Component.InventorySystem_Component_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UInventorySystem_Component_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventorySystem_Component.InventorySystem_Component_C.添加物品
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInventoryData_Struct&     ItemData                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UInventorySystem_Component_C::添加物品(const struct FInventoryData_Struct& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySystem_Component_C", "添加物品");

	Params::InventorySystem_Component_C_添加物品 Parms{};

	Parms.ItemData = std::move(ItemData);

	UObject::ProcessEvent(Func, &Parms);
}

}

