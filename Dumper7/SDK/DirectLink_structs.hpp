#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DirectLink

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct DirectLink.DirectLinkMsg_HaveListMessage
// 0x0040 (0x0040 - 0x0000)
struct FDirectLinkMsg_HaveListMessage final
{
public:
	int32                                         SourceStreamPort;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SyncCycle;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageCode;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Kind;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Payload;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NodeIds;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Hashes;                                            // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectLinkMsg_HaveListMessage) == 0x000008, "Wrong alignment on FDirectLinkMsg_HaveListMessage");
static_assert(sizeof(FDirectLinkMsg_HaveListMessage) == 0x000040, "Wrong size on FDirectLinkMsg_HaveListMessage");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, SourceStreamPort) == 0x000000, "Member 'FDirectLinkMsg_HaveListMessage::SourceStreamPort' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, SyncCycle) == 0x000004, "Member 'FDirectLinkMsg_HaveListMessage::SyncCycle' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, MessageCode) == 0x000008, "Member 'FDirectLinkMsg_HaveListMessage::MessageCode' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, Kind) == 0x00000C, "Member 'FDirectLinkMsg_HaveListMessage::Kind' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, Payload) == 0x000010, "Member 'FDirectLinkMsg_HaveListMessage::Payload' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, NodeIds) == 0x000020, "Member 'FDirectLinkMsg_HaveListMessage::NodeIds' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_HaveListMessage, Hashes) == 0x000030, "Member 'FDirectLinkMsg_HaveListMessage::Hashes' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_DeltaMessage
// 0x0020 (0x0020 - 0x0000)
struct FDirectLinkMsg_DeltaMessage final
{
public:
	int32                                         DestinationStreamPort;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          BatchCode;                                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MessageCode;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Kind;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressedPayload;                                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Payload;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectLinkMsg_DeltaMessage) == 0x000008, "Wrong alignment on FDirectLinkMsg_DeltaMessage");
static_assert(sizeof(FDirectLinkMsg_DeltaMessage) == 0x000020, "Wrong size on FDirectLinkMsg_DeltaMessage");
static_assert(offsetof(FDirectLinkMsg_DeltaMessage, DestinationStreamPort) == 0x000000, "Member 'FDirectLinkMsg_DeltaMessage::DestinationStreamPort' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_DeltaMessage, BatchCode) == 0x000004, "Member 'FDirectLinkMsg_DeltaMessage::BatchCode' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_DeltaMessage, MessageCode) == 0x000008, "Member 'FDirectLinkMsg_DeltaMessage::MessageCode' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_DeltaMessage, Kind) == 0x00000C, "Member 'FDirectLinkMsg_DeltaMessage::Kind' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_DeltaMessage, CompressedPayload) == 0x00000D, "Member 'FDirectLinkMsg_DeltaMessage::CompressedPayload' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_DeltaMessage, Payload) == 0x000010, "Member 'FDirectLinkMsg_DeltaMessage::Payload' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_CloseStreamRequest
// 0x0004 (0x0004 - 0x0000)
struct FDirectLinkMsg_CloseStreamRequest final
{
public:
	int32                                         RecipientStreamPort;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectLinkMsg_CloseStreamRequest) == 0x000004, "Wrong alignment on FDirectLinkMsg_CloseStreamRequest");
static_assert(sizeof(FDirectLinkMsg_CloseStreamRequest) == 0x000004, "Wrong size on FDirectLinkMsg_CloseStreamRequest");
static_assert(offsetof(FDirectLinkMsg_CloseStreamRequest, RecipientStreamPort) == 0x000000, "Member 'FDirectLinkMsg_CloseStreamRequest::RecipientStreamPort' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_OpenStreamAnswer
// 0x0020 (0x0020 - 0x0000)
struct FDirectLinkMsg_OpenStreamAnswer final
{
public:
	int32                                         RecipientStreamPort;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccepted;                                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenedStreamPort;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectLinkMsg_OpenStreamAnswer) == 0x000008, "Wrong alignment on FDirectLinkMsg_OpenStreamAnswer");
static_assert(sizeof(FDirectLinkMsg_OpenStreamAnswer) == 0x000020, "Wrong size on FDirectLinkMsg_OpenStreamAnswer");
static_assert(offsetof(FDirectLinkMsg_OpenStreamAnswer, RecipientStreamPort) == 0x000000, "Member 'FDirectLinkMsg_OpenStreamAnswer::RecipientStreamPort' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_OpenStreamAnswer, bAccepted) == 0x000004, "Member 'FDirectLinkMsg_OpenStreamAnswer::bAccepted' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_OpenStreamAnswer, Error) == 0x000008, "Member 'FDirectLinkMsg_OpenStreamAnswer::Error' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_OpenStreamAnswer, OpenedStreamPort) == 0x000018, "Member 'FDirectLinkMsg_OpenStreamAnswer::OpenedStreamPort' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_OpenStreamRequest
// 0x0028 (0x0028 - 0x0000)
struct FDirectLinkMsg_OpenStreamRequest final
{
public:
	bool                                          bRequestFromSource;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequestFromStreamPort;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SourceGuid;                                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DestinationGuid;                                   // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectLinkMsg_OpenStreamRequest) == 0x000004, "Wrong alignment on FDirectLinkMsg_OpenStreamRequest");
static_assert(sizeof(FDirectLinkMsg_OpenStreamRequest) == 0x000028, "Wrong size on FDirectLinkMsg_OpenStreamRequest");
static_assert(offsetof(FDirectLinkMsg_OpenStreamRequest, bRequestFromSource) == 0x000000, "Member 'FDirectLinkMsg_OpenStreamRequest::bRequestFromSource' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_OpenStreamRequest, RequestFromStreamPort) == 0x000004, "Member 'FDirectLinkMsg_OpenStreamRequest::RequestFromStreamPort' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_OpenStreamRequest, SourceGuid) == 0x000008, "Member 'FDirectLinkMsg_OpenStreamRequest::SourceGuid' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_OpenStreamRequest, DestinationGuid) == 0x000018, "Member 'FDirectLinkMsg_OpenStreamRequest::DestinationGuid' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_QueryEndpointState
// 0x0001 (0x0001 - 0x0000)
struct FDirectLinkMsg_QueryEndpointState final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectLinkMsg_QueryEndpointState) == 0x000001, "Wrong alignment on FDirectLinkMsg_QueryEndpointState");
static_assert(sizeof(FDirectLinkMsg_QueryEndpointState) == 0x000001, "Wrong size on FDirectLinkMsg_QueryEndpointState");

// ScriptStruct DirectLink.NamedId
// 0x0028 (0x0028 - 0x0000)
struct FNamedId final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPublic;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNamedId) == 0x000008, "Wrong alignment on FNamedId");
static_assert(sizeof(FNamedId) == 0x000028, "Wrong size on FNamedId");
static_assert(offsetof(FNamedId, Name) == 0x000000, "Member 'FNamedId::Name' has a wrong offset!");
static_assert(offsetof(FNamedId, ID) == 0x000010, "Member 'FNamedId::ID' has a wrong offset!");
static_assert(offsetof(FNamedId, bIsPublic) == 0x000020, "Member 'FNamedId::bIsPublic' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_EndpointState
// 0x0088 (0x0088 - 0x0000)
struct FDirectLinkMsg_EndpointState final
{
public:
	uint32                                        StateRevision;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MinProtocolVersion;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ProtocolVersion;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UEVersion;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComputerName;                                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ProcessId;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExecutableName;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NiceName;                                          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamedId>                       Destinations;                                      // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNamedId>                       Sources;                                           // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectLinkMsg_EndpointState) == 0x000008, "Wrong alignment on FDirectLinkMsg_EndpointState");
static_assert(sizeof(FDirectLinkMsg_EndpointState) == 0x000088, "Wrong size on FDirectLinkMsg_EndpointState");
static_assert(offsetof(FDirectLinkMsg_EndpointState, StateRevision) == 0x000000, "Member 'FDirectLinkMsg_EndpointState::StateRevision' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, MinProtocolVersion) == 0x000004, "Member 'FDirectLinkMsg_EndpointState::MinProtocolVersion' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, ProtocolVersion) == 0x000008, "Member 'FDirectLinkMsg_EndpointState::ProtocolVersion' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, UEVersion) == 0x000010, "Member 'FDirectLinkMsg_EndpointState::UEVersion' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, ComputerName) == 0x000020, "Member 'FDirectLinkMsg_EndpointState::ComputerName' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, UserName) == 0x000030, "Member 'FDirectLinkMsg_EndpointState::UserName' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, ProcessId) == 0x000040, "Member 'FDirectLinkMsg_EndpointState::ProcessId' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, ExecutableName) == 0x000048, "Member 'FDirectLinkMsg_EndpointState::ExecutableName' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, NiceName) == 0x000058, "Member 'FDirectLinkMsg_EndpointState::NiceName' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, Destinations) == 0x000068, "Member 'FDirectLinkMsg_EndpointState::Destinations' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointState, Sources) == 0x000078, "Member 'FDirectLinkMsg_EndpointState::Sources' has a wrong offset!");

// ScriptStruct DirectLink.DirectLinkMsg_EndpointLifecycle
// 0x0008 (0x0008 - 0x0000)
struct FDirectLinkMsg_EndpointLifecycle final
{
public:
	uint8                                         LifecycleState;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EndpointStateRevision;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectLinkMsg_EndpointLifecycle) == 0x000004, "Wrong alignment on FDirectLinkMsg_EndpointLifecycle");
static_assert(sizeof(FDirectLinkMsg_EndpointLifecycle) == 0x000008, "Wrong size on FDirectLinkMsg_EndpointLifecycle");
static_assert(offsetof(FDirectLinkMsg_EndpointLifecycle, LifecycleState) == 0x000000, "Member 'FDirectLinkMsg_EndpointLifecycle::LifecycleState' has a wrong offset!");
static_assert(offsetof(FDirectLinkMsg_EndpointLifecycle, EndpointStateRevision) == 0x000004, "Member 'FDirectLinkMsg_EndpointLifecycle::EndpointStateRevision' has a wrong offset!");

}

