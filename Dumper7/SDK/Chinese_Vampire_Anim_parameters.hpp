#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Chinese_Vampire_Anim

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Chinese_Vampire_Anim.Chinese_Vampire_Anim_C.ExecuteUbergraph_Chinese_Vampire_Anim
// 0x0048 (0x0048 - 0x0000)
struct Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AChinese_Vampire_BP_C*                  K2Node_DynamicCast_AsChinese_Vampire_BP;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim) == 0x000008, "Wrong alignment on Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim");
static_assert(sizeof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim) == 0x000048, "Wrong size on Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, EntryPoint) == 0x000000, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::EntryPoint' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000008, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000C, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, K2Node_Event_DeltaTimeX) == 0x000010, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000018, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, K2Node_DynamicCast_AsChinese_Vampire_BP) == 0x000028, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::K2Node_DynamicCast_AsChinese_Vampire_BP' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_GetVelocity_ReturnValue) == 0x000034, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'Chinese_Vampire_Anim_C_ExecuteUbergraph_Chinese_Vampire_Anim::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function Chinese_Vampire_Anim.Chinese_Vampire_Anim_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Chinese_Vampire_Anim_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Chinese_Vampire_Anim_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Chinese_Vampire_Anim_C_BlueprintUpdateAnimation");
static_assert(sizeof(Chinese_Vampire_Anim_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Chinese_Vampire_Anim_C_BlueprintUpdateAnimation");
static_assert(offsetof(Chinese_Vampire_Anim_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'Chinese_Vampire_Anim_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function Chinese_Vampire_Anim.Chinese_Vampire_Anim_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Chinese_Vampire_Anim_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Chinese_Vampire_Anim_C_AnimGraph) == 0x000008, "Wrong alignment on Chinese_Vampire_Anim_C_AnimGraph");
static_assert(sizeof(Chinese_Vampire_Anim_C_AnimGraph) == 0x000010, "Wrong size on Chinese_Vampire_Anim_C_AnimGraph");
static_assert(offsetof(Chinese_Vampire_Anim_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'Chinese_Vampire_Anim_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

