#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_上锁的门

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_上锁的门.BP_上锁的门_C
// 0x0088 (0x02A8 - 0x0220)
class ABP_上锁的门_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       拾取提示; // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LockComponent_C*                    BP_LockComponent;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_door;                                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ____0_DoorAngle_12F099BC4483D7AF5749659D437AE1E3;  // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_12F099BC4483D7AF5749659D437AE1E3; // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_0; // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Swing_Closed_NewTrack_1_A4FBABEF4C2EFC54AC23F2854822FEBC; // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Swing_Closed__Direction_A4FBABEF4C2EFC54AC23F2854822FEBC; // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Swing_Closed;                                      // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Swing_Open_NewTrack_0_C50E5E8047A2C09377D99FAD42AC3859; // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Swing_Open__Direction_C50E5E8047A2C09377D99FAD42AC3859; // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Swing_Open;                                        // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Open_direction;                                    // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOpen_;                                           // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29A[0x6];                                      // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayer_BP_C*                           As_Player_BP;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_上锁的门(int32 EntryPoint);
	void 有工具可以开锁();
	void 没有撬锁工具();
	void 门已解锁();
	void ReceiveBeginPlay();
	void RenderDeepClose();
	void RenderDeepOpen();
	void PlayerInteration(class AActor* Player);
	void BreakInteration();
	void 时间轴_0__UpdateFunc();
	void 时间轴_0__FinishedFunc();
	void Swing_Closed__UpdateFunc();
	void Swing_Closed__FinishedFunc();
	void Swing_Open__UpdateFunc();
	void Swing_Open__FinishedFunc();
	bool 角色在门的哪面();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_上锁的门_C">();
	}
	static class ABP_上锁的门_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_上锁的门_C>();
	}
};
static_assert(alignof(ABP_上锁的门_C) == 0x000008, "Wrong alignment on ABP_上锁的门_C");
static_assert(sizeof(ABP_上锁的门_C) == 0x0002A8, "Wrong size on ABP_上锁的门_C");
static_assert(offsetof(ABP_上锁的门_C, UberGraphFrame) == 0x000220, "Member 'ABP_上锁的门_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Arrow) == 0x000228, "Member 'ABP_上锁的门_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, CineCamera) == 0x000230, "Member 'ABP_上锁的门_C::CineCamera' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Sphere) == 0x000238, "Member 'ABP_上锁的门_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, 拾取提示) == 0x000240, "Member 'ABP_上锁的门_C::拾取提示' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Audio) == 0x000248, "Member 'ABP_上锁的门_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, BP_LockComponent) == 0x000250, "Member 'ABP_上锁的门_C::BP_LockComponent' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, SM_door) == 0x000258, "Member 'ABP_上锁的门_C::SM_door' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, DefaultSceneRoot) == 0x000260, "Member 'ABP_上锁的门_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, ____0_DoorAngle_12F099BC4483D7AF5749659D437AE1E3) == 0x000268, "Member 'ABP_上锁的门_C::____0_DoorAngle_12F099BC4483D7AF5749659D437AE1E3' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, ____0__Direction_12F099BC4483D7AF5749659D437AE1E3) == 0x00026C, "Member 'ABP_上锁的门_C::____0__Direction_12F099BC4483D7AF5749659D437AE1E3' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, 时间轴_0) == 0x000270, "Member 'ABP_上锁的门_C::时间轴_0' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Swing_Closed_NewTrack_1_A4FBABEF4C2EFC54AC23F2854822FEBC) == 0x000278, "Member 'ABP_上锁的门_C::Swing_Closed_NewTrack_1_A4FBABEF4C2EFC54AC23F2854822FEBC' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Swing_Closed__Direction_A4FBABEF4C2EFC54AC23F2854822FEBC) == 0x00027C, "Member 'ABP_上锁的门_C::Swing_Closed__Direction_A4FBABEF4C2EFC54AC23F2854822FEBC' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Swing_Closed) == 0x000280, "Member 'ABP_上锁的门_C::Swing_Closed' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Swing_Open_NewTrack_0_C50E5E8047A2C09377D99FAD42AC3859) == 0x000288, "Member 'ABP_上锁的门_C::Swing_Open_NewTrack_0_C50E5E8047A2C09377D99FAD42AC3859' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Swing_Open__Direction_C50E5E8047A2C09377D99FAD42AC3859) == 0x00028C, "Member 'ABP_上锁的门_C::Swing_Open__Direction_C50E5E8047A2C09377D99FAD42AC3859' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Swing_Open) == 0x000290, "Member 'ABP_上锁的门_C::Swing_Open' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, Open_direction) == 0x000298, "Member 'ABP_上锁的门_C::Open_direction' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, IsOpen_) == 0x000299, "Member 'ABP_上锁的门_C::IsOpen_' has a wrong offset!");
static_assert(offsetof(ABP_上锁的门_C, As_Player_BP) == 0x0002A0, "Member 'ABP_上锁的门_C::As_Player_BP' has a wrong offset!");

}

