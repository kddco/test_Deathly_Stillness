#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UseMeshes

#include "Basic.hpp"

#include "UseMeshes_classes.hpp"
#include "UseMeshes_parameters.hpp"


namespace SDK
{

// Function UseMeshes.UseMeshes_C.ExecuteUbergraph_UseMeshes
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUseMeshes_C::ExecuteUbergraph_UseMeshes(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseMeshes_C", "ExecuteUbergraph_UseMeshes");

	Params::UseMeshes_C_ExecuteUbergraph_UseMeshes Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UseMeshes.UseMeshes_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AUseMeshes_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseMeshes_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UseMeshes.UseMeshes_C.DestroyActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimationLenght                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SimulatePhysics                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AUseMeshes_C::DestroyActor(float AnimationLenght, bool SimulatePhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseMeshes_C", "DestroyActor");

	Params::UseMeshes_C_DestroyActor Parms{};

	Parms.AnimationLenght = AnimationLenght;
	Parms.SimulatePhysics = SimulatePhysics;

	UObject::ProcessEvent(Func, &Parms);
}

}

