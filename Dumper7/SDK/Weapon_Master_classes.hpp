#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weapon_Master

#include "Basic.hpp"

#include "InventoryData_Struct_structs.hpp"
#include "WeaponType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Weapon_StructURE_structs.hpp"
#include "Optics_Enum_structs.hpp"
#include "MuzzleType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "BulletType_Enum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Weapon_Master.Weapon_Master_C
// 0x0260 (0x0480 - 0x0220)
class AWeapon_Master_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere2;                                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 GunBase;                                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       拾取提示; // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        枪口变红贴花; // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Suppressor;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Accessories;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RedDot;                                            // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EOTech;                                            // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Bullet_Eject;                                      // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Muzzle;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Medium_Suppressor_01;                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ____1______0_00DFC90B4C07A83FD702DB88823BD3C0;     // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____1__Direction_00DFC90B4C07A83FD702DB88823BD3C0; // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_1; // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_EE845658408BCDCDBF0E4186081A19E9; // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_EE845658408BCDCDBF0E4186081A19E9; // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____0_NewTrack_0_B3A4D96E476682FFD5B06E88A0912CB1; // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_B3A4D96E476682FFD5B06E88A0912CB1; // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_0; // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_B8A0D7ED4E700FCE1A6C888C9DD6AE58; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_B8A0D7ED4E700FCE1A6C888C9DD6AE58; // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Clip_BP;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           PlayerRef;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         武器弹夹固定子弹数量; // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          换弹是否开始; // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EWeaponType                                   WeaponType;                                        // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          是否从枪口发射子弹; // 0x02F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F7[0x1];                                      // 0x02F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cone_Half_Angle_in_Degrees;                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         抬枪后坐力大小; // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOptics_Enum                                  Optics;                                            // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   FireKey;                                           // 0x0308(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EMuzzleType                                   MuzzleType;                                        // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MuzzleScale;                                       // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABulletCase_BP_C*                       BulletCase;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Emitter_Template;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeScale;                                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeapon_Structure                      Weapon_Struct;                                     // 0x0348(0x0078)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否全自动; // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          只能半自动; // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2[0x2];                                      // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CheatCode临时子弹保存; // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          无后坐力; // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         当前子弹数量; // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         子弹保存; // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         武器数据表行; // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mat_Decal;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否开启靠近提示; // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         拾取数据表行; // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInventoryData_Struct                  PickUp_Struct;                                     // 0x03E8(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Weapon_Master(int32 EntryPoint);
	void ReceiveBeginPlay();
	void 后坐力抖动();
	void Recoil();
	void 空挂释放();
	void FPP拔下弹夹(class FName SocketName);
	void 弹夹自然掉落();
	void 换弹被打断_Event();
	void 拔下弹夹(class FName SocketName);
	void 生成新弹夹(class FName SocketName);
	void 换弹结束();
	void 武器子弹空仓动画();
	void 播放射击();
	void SpawnCase();
	void StopFire();
	void Shooting();
	void Fire(const struct FKey& Key);
	void 后坐力状态(bool 无后坐力_0);
	void 关闭无限子弹();
	void 开启无限子弹();
	void 枪口结束变红();
	void 枪口开始变红();
	void PlayerInteration(class AActor* Player);
	void BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__PickUpMaster_BP_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void RenderDeepClose();
	void RenderDeepOpen();
	void 是否是空仓状态(bool 空仓换弹);
	void CheckMagazine();
	void CheckChamber();
	void 停止蒙太奇();
	void BreakInteration();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void 时间轴_0__UpdateFunc();
	void 时间轴_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void 时间轴_1__UpdateFunc();
	void 时间轴_1__FinishedFunc();
	struct FVector 射击位置计算(struct FRotator* ReturnValue1);
	void 当前子弹数量更改();
	void 背包子弹数量更改();
	void 剩余子弹数量计算(int32 背包中的子弹);
	void 设置玩家背包剩余子弹数量(int32 剩余背包子弹);
	void 高亮开启和关闭(bool 模型是否高亮, ESlateVisibility Circle, ESlateVisibility keyboard);
	void 初始化物品();
	void 设置背包中的剩余子弹(int32 计算的子弹规格);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Weapon_Master_C">();
	}
	static class AWeapon_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeapon_Master_C>();
	}
};
static_assert(alignof(AWeapon_Master_C) == 0x000008, "Wrong alignment on AWeapon_Master_C");
static_assert(sizeof(AWeapon_Master_C) == 0x000480, "Wrong size on AWeapon_Master_C");
static_assert(offsetof(AWeapon_Master_C, UberGraphFrame) == 0x000220, "Member 'AWeapon_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Sphere2) == 0x000228, "Member 'AWeapon_Master_C::Sphere2' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Scene) == 0x000230, "Member 'AWeapon_Master_C::Scene' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, GunBase) == 0x000238, "Member 'AWeapon_Master_C::GunBase' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 拾取提示) == 0x000240, "Member 'AWeapon_Master_C::拾取提示' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Sphere1) == 0x000248, "Member 'AWeapon_Master_C::Sphere1' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 枪口变红贴花) == 0x000250, "Member 'AWeapon_Master_C::枪口变红贴花' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Suppressor) == 0x000258, "Member 'AWeapon_Master_C::Suppressor' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Accessories) == 0x000260, "Member 'AWeapon_Master_C::Accessories' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, RedDot) == 0x000268, "Member 'AWeapon_Master_C::RedDot' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, EOTech) == 0x000270, "Member 'AWeapon_Master_C::EOTech' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, SpringArm) == 0x000278, "Member 'AWeapon_Master_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Camera) == 0x000280, "Member 'AWeapon_Master_C::Camera' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Bullet_Eject) == 0x000288, "Member 'AWeapon_Master_C::Bullet_Eject' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Muzzle) == 0x000290, "Member 'AWeapon_Master_C::Muzzle' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Medium_Suppressor_01) == 0x000298, "Member 'AWeapon_Master_C::Medium_Suppressor_01' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, ____1______0_00DFC90B4C07A83FD702DB88823BD3C0) == 0x0002A0, "Member 'AWeapon_Master_C::____1______0_00DFC90B4C07A83FD702DB88823BD3C0' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, ____1__Direction_00DFC90B4C07A83FD702DB88823BD3C0) == 0x0002A4, "Member 'AWeapon_Master_C::____1__Direction_00DFC90B4C07A83FD702DB88823BD3C0' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 时间轴_1) == 0x0002A8, "Member 'AWeapon_Master_C::时间轴_1' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Timeline_1_NewTrack_0_EE845658408BCDCDBF0E4186081A19E9) == 0x0002B0, "Member 'AWeapon_Master_C::Timeline_1_NewTrack_0_EE845658408BCDCDBF0E4186081A19E9' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Timeline_1__Direction_EE845658408BCDCDBF0E4186081A19E9) == 0x0002B4, "Member 'AWeapon_Master_C::Timeline_1__Direction_EE845658408BCDCDBF0E4186081A19E9' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Timeline_1) == 0x0002B8, "Member 'AWeapon_Master_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, ____0_NewTrack_0_B3A4D96E476682FFD5B06E88A0912CB1) == 0x0002C0, "Member 'AWeapon_Master_C::____0_NewTrack_0_B3A4D96E476682FFD5B06E88A0912CB1' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, ____0__Direction_B3A4D96E476682FFD5B06E88A0912CB1) == 0x0002C4, "Member 'AWeapon_Master_C::____0__Direction_B3A4D96E476682FFD5B06E88A0912CB1' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 时间轴_0) == 0x0002C8, "Member 'AWeapon_Master_C::时间轴_0' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Timeline_0_NewTrack_0_B8A0D7ED4E700FCE1A6C888C9DD6AE58) == 0x0002D0, "Member 'AWeapon_Master_C::Timeline_0_NewTrack_0_B8A0D7ED4E700FCE1A6C888C9DD6AE58' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Timeline_0__Direction_B8A0D7ED4E700FCE1A6C888C9DD6AE58) == 0x0002D4, "Member 'AWeapon_Master_C::Timeline_0__Direction_B8A0D7ED4E700FCE1A6C888C9DD6AE58' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Timeline_0) == 0x0002D8, "Member 'AWeapon_Master_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Clip_BP) == 0x0002E0, "Member 'AWeapon_Master_C::Clip_BP' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, PlayerRef) == 0x0002E8, "Member 'AWeapon_Master_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 武器弹夹固定子弹数量) == 0x0002F0, "Member 'AWeapon_Master_C::武器弹夹固定子弹数量' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 换弹是否开始) == 0x0002F4, "Member 'AWeapon_Master_C::换弹是否开始' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, WeaponType) == 0x0002F5, "Member 'AWeapon_Master_C::WeaponType' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 是否从枪口发射子弹) == 0x0002F6, "Member 'AWeapon_Master_C::是否从枪口发射子弹' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Cone_Half_Angle_in_Degrees) == 0x0002F8, "Member 'AWeapon_Master_C::Cone_Half_Angle_in_Degrees' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 抬枪后坐力大小) == 0x0002FC, "Member 'AWeapon_Master_C::抬枪后坐力大小' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Optics) == 0x000300, "Member 'AWeapon_Master_C::Optics' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, FireKey) == 0x000308, "Member 'AWeapon_Master_C::FireKey' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, MuzzleType) == 0x000320, "Member 'AWeapon_Master_C::MuzzleType' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, MuzzleScale) == 0x000324, "Member 'AWeapon_Master_C::MuzzleScale' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, BulletCase) == 0x000330, "Member 'AWeapon_Master_C::BulletCase' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Emitter_Template) == 0x000338, "Member 'AWeapon_Master_C::Emitter_Template' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, ShakeScale) == 0x000340, "Member 'AWeapon_Master_C::ShakeScale' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Weapon_Struct) == 0x000348, "Member 'AWeapon_Master_C::Weapon_Struct' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 是否全自动) == 0x0003C0, "Member 'AWeapon_Master_C::是否全自动' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 只能半自动) == 0x0003C1, "Member 'AWeapon_Master_C::只能半自动' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, CheatCode临时子弹保存) == 0x0003C4, "Member 'AWeapon_Master_C::CheatCode临时子弹保存' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 无后坐力) == 0x0003C8, "Member 'AWeapon_Master_C::无后坐力' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 当前子弹数量) == 0x0003CC, "Member 'AWeapon_Master_C::当前子弹数量' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 子弹保存) == 0x0003D0, "Member 'AWeapon_Master_C::子弹保存' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 武器数据表行) == 0x0003D4, "Member 'AWeapon_Master_C::武器数据表行' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, Mat_Decal) == 0x0003D8, "Member 'AWeapon_Master_C::Mat_Decal' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 是否开启靠近提示) == 0x0003E0, "Member 'AWeapon_Master_C::是否开启靠近提示' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, 拾取数据表行) == 0x0003E4, "Member 'AWeapon_Master_C::拾取数据表行' has a wrong offset!");
static_assert(offsetof(AWeapon_Master_C, PickUp_Struct) == 0x0003E8, "Member 'AWeapon_Master_C::PickUp_Struct' has a wrong offset!");

}

