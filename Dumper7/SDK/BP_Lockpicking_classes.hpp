#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lockpicking

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Lockpicking_Settings_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lockpicking.BP_Lockpicking_C
// 0x00F0 (0x0310 - 0x0220)
class ABP_Lockpicking_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   PickPosition;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pick;                                              // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Screwdriver;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                ForceFeedback;                                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InnerLock;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrameRing;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PickTarget;                                        // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynaimcTolerance;                                  // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickDamage;                                        // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ToleranceMultiplier;                               // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageMultiplier;                                  // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MovingLock;                                        // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LockType;                                          // 0x0280(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUI_LockpickingHUD_C*                   WidgetInstance;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_LockComponent_C*                    LockedObject;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OriginRotation;                                    // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ApplyDamage_;                                      // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnValue;                                         // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_LockPickingComponent_C*             LockPickingComponent;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLockpicking_Settings                  Settings;                                          // 0x02C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RotationSound;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaMultiplier;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 要开的门; // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class APlayer_BP_C*                           As_Player_BP;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Lockpicking(int32 EntryPoint);
	void ReceiveBeginPlay();
	void MovePickWithLock();
	void QuitPicking();
	void LockSetup(int32 Difficulty);
	void TurnLockBackToOrigin();
	void ReceiveTick(float DeltaSeconds);
	void InpAxisEvt_TurnPick_K2Node_InputAxisEvent_7(float AxisValue);
	void InpAxisEvt_TurnLock_K2Node_InputAxisEvent_4(float AxisValue);
	void AddPickDamage();
	void Wiggle();
	void OpenLock();
	void InpActEvt_Escape_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lockpicking_C">();
	}
	static class ABP_Lockpicking_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lockpicking_C>();
	}
};
static_assert(alignof(ABP_Lockpicking_C) == 0x000008, "Wrong alignment on ABP_Lockpicking_C");
static_assert(sizeof(ABP_Lockpicking_C) == 0x000310, "Wrong size on ABP_Lockpicking_C");
static_assert(offsetof(ABP_Lockpicking_C, UberGraphFrame) == 0x000220, "Member 'ABP_Lockpicking_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, PickPosition) == 0x000228, "Member 'ABP_Lockpicking_C::PickPosition' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, Pick) == 0x000230, "Member 'ABP_Lockpicking_C::Pick' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, Screwdriver) == 0x000238, "Member 'ABP_Lockpicking_C::Screwdriver' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, ForceFeedback) == 0x000240, "Member 'ABP_Lockpicking_C::ForceFeedback' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, PointLight) == 0x000248, "Member 'ABP_Lockpicking_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, InnerLock) == 0x000250, "Member 'ABP_Lockpicking_C::InnerLock' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, FrameRing) == 0x000258, "Member 'ABP_Lockpicking_C::FrameRing' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, DefaultSceneRoot) == 0x000260, "Member 'ABP_Lockpicking_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, PickTarget) == 0x000268, "Member 'ABP_Lockpicking_C::PickTarget' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, DynaimcTolerance) == 0x00026C, "Member 'ABP_Lockpicking_C::DynaimcTolerance' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, PickDamage) == 0x000270, "Member 'ABP_Lockpicking_C::PickDamage' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, ToleranceMultiplier) == 0x000274, "Member 'ABP_Lockpicking_C::ToleranceMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, DamageMultiplier) == 0x000278, "Member 'ABP_Lockpicking_C::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, MovingLock) == 0x00027C, "Member 'ABP_Lockpicking_C::MovingLock' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, LockType) == 0x000280, "Member 'ABP_Lockpicking_C::LockType' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, WidgetInstance) == 0x000298, "Member 'ABP_Lockpicking_C::WidgetInstance' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, LockedObject) == 0x0002A0, "Member 'ABP_Lockpicking_C::LockedObject' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, OriginRotation) == 0x0002A8, "Member 'ABP_Lockpicking_C::OriginRotation' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, ApplyDamage_) == 0x0002B4, "Member 'ABP_Lockpicking_C::ApplyDamage_' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, TurnValue) == 0x0002B8, "Member 'ABP_Lockpicking_C::TurnValue' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, LockPickingComponent) == 0x0002C0, "Member 'ABP_Lockpicking_C::LockPickingComponent' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, Settings) == 0x0002C8, "Member 'ABP_Lockpicking_C::Settings' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, RotationSound) == 0x0002F0, "Member 'ABP_Lockpicking_C::RotationSound' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, DeltaMultiplier) == 0x0002F8, "Member 'ABP_Lockpicking_C::DeltaMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, 要开的门) == 0x000300, "Member 'ABP_Lockpicking_C::要开的门' has a wrong offset!");
static_assert(offsetof(ABP_Lockpicking_C, As_Player_BP) == 0x000308, "Member 'ABP_Lockpicking_C::As_Player_BP' has a wrong offset!");

}

