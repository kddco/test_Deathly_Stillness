#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Loading_UMG

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "GameMap_Struct_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Loading_UMG.Loading_UMG_C
// 0x00C8 (0x0328 - 0x0260)
class ULoading_UMG_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Flask;                                             // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Appear;                                            // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_45;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_222;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_168;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_136;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             任务;                                            // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             任务细节; // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             提示; // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             章节; // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Time;                                              // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMap;                                           // 0x02C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsReStart_;                                        // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LoadingTexture;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FGameMap_Struct>     游戏地图; // 0x02D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Loading_UMG(int32 EntryPoint);
	void Construct();
	void loading();
	void OnLoaded_332044D74990B7743D056AB93242FBAD(class UObject* Loaded);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Loading_UMG_C">();
	}
	static class ULoading_UMG_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoading_UMG_C>();
	}
};
static_assert(alignof(ULoading_UMG_C) == 0x000008, "Wrong alignment on ULoading_UMG_C");
static_assert(sizeof(ULoading_UMG_C) == 0x000328, "Wrong size on ULoading_UMG_C");
static_assert(offsetof(ULoading_UMG_C, UberGraphFrame) == 0x000260, "Member 'ULoading_UMG_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, Flask) == 0x000268, "Member 'ULoading_UMG_C::Flask' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, Appear) == 0x000270, "Member 'ULoading_UMG_C::Appear' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, Image) == 0x000278, "Member 'ULoading_UMG_C::Image' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, Image_45) == 0x000280, "Member 'ULoading_UMG_C::Image_45' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, Image_222) == 0x000288, "Member 'ULoading_UMG_C::Image_222' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, ProgressBar_168) == 0x000290, "Member 'ULoading_UMG_C::ProgressBar_168' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, TextBlock_136) == 0x000298, "Member 'ULoading_UMG_C::TextBlock_136' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, 任务) == 0x0002A0, "Member 'ULoading_UMG_C::任务' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, 任务细节) == 0x0002A8, "Member 'ULoading_UMG_C::任务细节' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, 提示) == 0x0002B0, "Member 'ULoading_UMG_C::提示' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, 章节) == 0x0002B8, "Member 'ULoading_UMG_C::章节' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, Time) == 0x0002C0, "Member 'ULoading_UMG_C::Time' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, GameMap) == 0x0002C4, "Member 'ULoading_UMG_C::GameMap' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, IsReStart_) == 0x0002CC, "Member 'ULoading_UMG_C::IsReStart_' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, LoadingTexture) == 0x0002D0, "Member 'ULoading_UMG_C::LoadingTexture' has a wrong offset!");
static_assert(offsetof(ULoading_UMG_C, 游戏地图) == 0x0002D8, "Member 'ULoading_UMG_C::游戏地图' has a wrong offset!");

}

