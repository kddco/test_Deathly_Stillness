#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_丢弃的范围

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "InventoryData_Struct_structs.hpp"


namespace SDK::Params
{

// Function WB_丢弃的范围.WB_丢弃的范围_C.ExecuteUbergraph_WB_丢弃的范围
// 0x0228 (0x0228 - 0x0000)
struct WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_丢弃的数量_C* CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable;                         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent_1;                       // 0x0050(0x0070)()
	class UDragDropOperation*                     K2Node_Event_Operation_1;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x00C8(0x0070)()
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Backpack_Weapon_C*                  K2Node_DynamicCast_AsWB_Backpack_Weapon;           // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBackpack_DragObject_UMG_C*             K2Node_DynamicCast_AsBackpack_Drag_Object_UMG;     // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInventoryData_Struct                  K2Node_MakeStruct_InventoryData_Struct;            // 0x0160(0x0098)(HasGetValueTypeHash)
	TArray<class UBackpack_UMG_C*>                CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x01F8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBackpack_UMG_C*                        CallFunc_Array_Get_Item;                           // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP;                    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围) == 0x000008, "Wrong alignment on WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围");
static_assert(sizeof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围) == 0x000228, "Wrong size on WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, EntryPoint) == 0x000000, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, CallFunc_Create_ReturnValue) == 0x000008, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, ___bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000010, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::___bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, ___bool_Has_Been_Initd_Variable) == 0x000011, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, ___bool_IsClosed_Variable) == 0x000012, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_Event_MyGeometry) == 0x000014, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_Event_PointerEvent_1) == 0x000050, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_Event_PointerEvent_1' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_Event_Operation_1) == 0x0000C0, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_Event_Operation_1' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_Event_PointerEvent) == 0x0000C8, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_Event_Operation) == 0x000138, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_DynamicCast_AsWB_Backpack_Weapon) == 0x000140, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_DynamicCast_AsWB_Backpack_Weapon' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_DynamicCast_AsBackpack_Drag_Object_UMG) == 0x000150, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_DynamicCast_AsBackpack_Drag_Object_UMG' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_MakeStruct_InventoryData_Struct) == 0x000160, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_MakeStruct_InventoryData_Struct' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x0001F8, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, CallFunc_Array_Get_Item) == 0x000208, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, CallFunc_GetPlayerPawn_ReturnValue) == 0x000210, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_DynamicCast_AsPlayer_BP) == 0x000218, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_DynamicCast_AsPlayer_BP' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_DynamicCast_bSuccess_2) == 0x000220, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围, K2Node_SwitchEnum_CmpSuccess) == 0x000221, "Member 'WB_丢弃的范围_C_ExecuteUbergraph_WB_丢弃的范围::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_丢弃的范围.WB_丢弃的范围_C.OnDragLeave
// 0x0078 (0x0078 - 0x0000)
struct WB_丢弃的范围_C_OnDragLeave final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_丢弃的范围_C_OnDragLeave) == 0x000008, "Wrong alignment on WB_丢弃的范围_C_OnDragLeave");
static_assert(sizeof(WB_丢弃的范围_C_OnDragLeave) == 0x000078, "Wrong size on WB_丢弃的范围_C_OnDragLeave");
static_assert(offsetof(WB_丢弃的范围_C_OnDragLeave, PointerEvent) == 0x000000, "Member 'WB_丢弃的范围_C_OnDragLeave::PointerEvent' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_OnDragLeave, Operation) == 0x000070, "Member 'WB_丢弃的范围_C_OnDragLeave::Operation' has a wrong offset!");

// Function WB_丢弃的范围.WB_丢弃的范围_C.OnDragEnter
// 0x00B0 (0x00B0 - 0x0000)
struct WB_丢弃的范围_C_OnDragEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_丢弃的范围_C_OnDragEnter) == 0x000008, "Wrong alignment on WB_丢弃的范围_C_OnDragEnter");
static_assert(sizeof(WB_丢弃的范围_C_OnDragEnter) == 0x0000B0, "Wrong size on WB_丢弃的范围_C_OnDragEnter");
static_assert(offsetof(WB_丢弃的范围_C_OnDragEnter, MyGeometry) == 0x000000, "Member 'WB_丢弃的范围_C_OnDragEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_OnDragEnter, PointerEvent) == 0x000038, "Member 'WB_丢弃的范围_C_OnDragEnter::PointerEvent' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_OnDragEnter, Operation) == 0x0000A8, "Member 'WB_丢弃的范围_C_OnDragEnter::Operation' has a wrong offset!");

// Function WB_丢弃的范围.WB_丢弃的范围_C.OnDrop
// 0x00B8 (0x00B8 - 0x0000)
struct WB_丢弃的范围_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_丢弃的范围_C_OnDrop) == 0x000008, "Wrong alignment on WB_丢弃的范围_C_OnDrop");
static_assert(sizeof(WB_丢弃的范围_C_OnDrop) == 0x0000B8, "Wrong size on WB_丢弃的范围_C_OnDrop");
static_assert(offsetof(WB_丢弃的范围_C_OnDrop, MyGeometry) == 0x000000, "Member 'WB_丢弃的范围_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_OnDrop, PointerEvent) == 0x000038, "Member 'WB_丢弃的范围_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_OnDrop, Operation) == 0x0000A8, "Member 'WB_丢弃的范围_C_OnDrop::Operation' has a wrong offset!");
static_assert(offsetof(WB_丢弃的范围_C_OnDrop, ReturnValue) == 0x0000B0, "Member 'WB_丢弃的范围_C_OnDrop::ReturnValue' has a wrong offset!");

}

