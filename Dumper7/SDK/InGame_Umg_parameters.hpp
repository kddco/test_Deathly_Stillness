#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InGame_Umg

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "BulletType_Enum_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function InGame_Umg.InGame_Umg_C.ExecuteUbergraph_InGame_Umg
// 0x0258 (0x0258 - 0x0000)
struct InGame_Umg_C_ExecuteUbergraph_InGame_Umg final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0028(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBulletType_Enum                              ___byte_Variable;                                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AZombie_BP_C*>                   CallFunc_GetAllActorsOfClass_OutActors;            // 0x0088(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x00A8(0x0018)()
	EUMGSequencePlayMode                          K2Node_CustomEvent_PlayMode_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_4;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_5;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_CustomEvent_PlayMode_2;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_CustomEvent___;                             // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_CustomEvent_dot;                            // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_6;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_7;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_CustomEvent_PlayMode_1;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_8;              // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Variable;                                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_9;              // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP;                    // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          K2Node_CustomEvent_PlayMode;                       // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_10;             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0160(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x01B8(0x0058)(HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0218(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_CustomEvent_Texture;                        // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon_Master_C*                       K2Node_Select_Default;                             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x0240(0x0018)()
};
static_assert(alignof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg) == 0x000008, "Wrong alignment on InGame_Umg_C_ExecuteUbergraph_InGame_Umg");
static_assert(sizeof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg) == 0x000258, "Wrong size on InGame_Umg_C_ExecuteUbergraph_InGame_Umg");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, EntryPoint) == 0x000000, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::EntryPoint' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, ___int_Variable) == 0x000004, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::___int_Variable' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, ___int_Variable_1) == 0x000008, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_Event_MyGeometry) == 0x000028, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_Event_InDeltaTime) == 0x000060, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue) == 0x000068, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_1) == 0x000070, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, ___byte_Variable) == 0x000078, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::___byte_Variable' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_2) == 0x000080, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_GetAllActorsOfClass_OutActors) == 0x000088, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_3) == 0x0000A0, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Conv_IntToText_ReturnValue_1) == 0x0000A8, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent_PlayMode_3) == 0x0000C0, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent_PlayMode_3' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_4) == 0x0000C8, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_5) == 0x0000D0, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000DC, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_MapRangeClamped_ReturnValue) == 0x0000E0, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_MakeVector2D_ReturnValue) == 0x0000E4, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000EC, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Abs_ReturnValue) == 0x0000F4, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_MakeVector2D_ReturnValue_2) == 0x0000F8, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_MakeVector2D_ReturnValue_3) == 0x000100, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent_PlayMode_2) == 0x000108, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent_PlayMode_2' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent___) == 0x000109, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent___' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent_dot) == 0x00010A, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent_dot' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_6) == 0x000110, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_7) == 0x000118, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent_PlayMode_1) == 0x000120, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent_PlayMode_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_8) == 0x000128, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, ___bool_Variable) == 0x000130, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::___bool_Variable' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_9) == 0x000138, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_GetPlayerPawn_ReturnValue) == 0x000140, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_DynamicCast_AsPlayer_BP) == 0x000148, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_DynamicCast_AsPlayer_BP' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_DynamicCast_bSuccess) == 0x000150, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent_PlayMode) == 0x000151, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent_PlayMode' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_PlayAnimation_ReturnValue_10) == 0x000158, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_PlayAnimation_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_MakeStruct_SlateFontInfo) == 0x000160, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_MakeStruct_SlateFontInfo_1) == 0x0001B8, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000210, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_K2_SetTimer_ReturnValue) == 0x000218, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Subtract_IntInt_ReturnValue) == 0x000220, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_CustomEvent_Texture) == 0x000228, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_CustomEvent_Texture' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_Select_Default) == 0x000230, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_IsValid_ReturnValue_1) == 0x000238, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, K2Node_Select_Default_1) == 0x00023C, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_ExecuteUbergraph_InGame_Umg, CallFunc_Conv_IntToText_ReturnValue_2) == 0x000240, "Member 'InGame_Umg_C_ExecuteUbergraph_InGame_Umg::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.枪口是否被阻挡
// 0x0008 (0x0008 - 0x0000)
struct InGame_Umg_C_枪口是否被阻挡 final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_枪口是否被阻挡) == 0x000008, "Wrong alignment on InGame_Umg_C_枪口是否被阻挡");
static_assert(sizeof(InGame_Umg_C_枪口是否被阻挡) == 0x000008, "Wrong size on InGame_Umg_C_枪口是否被阻挡");
static_assert(offsetof(InGame_Umg_C_枪口是否被阻挡, Texture) == 0x000000, "Member 'InGame_Umg_C_枪口是否被阻挡::Texture' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.CrosshairFade_Event
// 0x0001 (0x0001 - 0x0000)
struct InGame_Umg_C_CrosshairFade_Event final
{
public:
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_CrosshairFade_Event) == 0x000001, "Wrong alignment on InGame_Umg_C_CrosshairFade_Event");
static_assert(sizeof(InGame_Umg_C_CrosshairFade_Event) == 0x000001, "Wrong size on InGame_Umg_C_CrosshairFade_Event");
static_assert(offsetof(InGame_Umg_C_CrosshairFade_Event, PlayMode) == 0x000000, "Member 'InGame_Umg_C_CrosshairFade_Event::PlayMode' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.游戏中界面Fade_Event
// 0x0001 (0x0001 - 0x0000)
struct InGame_Umg_C_游戏中界面Fade_Event final
{
public:
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_游戏中界面Fade_Event) == 0x000001, "Wrong alignment on InGame_Umg_C_游戏中界面Fade_Event");
static_assert(sizeof(InGame_Umg_C_游戏中界面Fade_Event) == 0x000001, "Wrong size on InGame_Umg_C_游戏中界面Fade_Event");
static_assert(offsetof(InGame_Umg_C_游戏中界面Fade_Event, PlayMode) == 0x000000, "Member 'InGame_Umg_C_游戏中界面Fade_Event::PlayMode' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.开启瞄准
// 0x0002 (0x0002 - 0x0000)
struct InGame_Umg_C_开启瞄准 final
{
public:
	ESlateVisibility                              十字; // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              DOT;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_开启瞄准) == 0x000001, "Wrong alignment on InGame_Umg_C_开启瞄准");
static_assert(sizeof(InGame_Umg_C_开启瞄准) == 0x000002, "Wrong size on InGame_Umg_C_开启瞄准");
static_assert(offsetof(InGame_Umg_C_开启瞄准, 十字) == 0x000000, "Member 'InGame_Umg_C_开启瞄准::十字' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_开启瞄准, DOT) == 0x000001, "Member 'InGame_Umg_C_开启瞄准::DOT' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.DeadScreen
// 0x0001 (0x0001 - 0x0000)
struct InGame_Umg_C_DeadScreen final
{
public:
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_DeadScreen) == 0x000001, "Wrong alignment on InGame_Umg_C_DeadScreen");
static_assert(sizeof(InGame_Umg_C_DeadScreen) == 0x000001, "Wrong size on InGame_Umg_C_DeadScreen");
static_assert(offsetof(InGame_Umg_C_DeadScreen, PlayMode) == 0x000000, "Member 'InGame_Umg_C_DeadScreen::PlayMode' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.大招
// 0x0001 (0x0001 - 0x0000)
struct InGame_Umg_C_大招 final
{
public:
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_大招) == 0x000001, "Wrong alignment on InGame_Umg_C_大招");
static_assert(sizeof(InGame_Umg_C_大招) == 0x000001, "Wrong size on InGame_Umg_C_大招");
static_assert(offsetof(InGame_Umg_C_大招, PlayMode) == 0x000000, "Member 'InGame_Umg_C_大招::PlayMode' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.Tick
// 0x003C (0x003C - 0x0000)
struct InGame_Umg_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_Tick) == 0x000004, "Wrong alignment on InGame_Umg_C_Tick");
static_assert(sizeof(InGame_Umg_C_Tick) == 0x00003C, "Wrong size on InGame_Umg_C_Tick");
static_assert(offsetof(InGame_Umg_C_Tick, MyGeometry) == 0x000000, "Member 'InGame_Umg_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_Tick, InDeltaTime) == 0x000038, "Member 'InGame_Umg_C_Tick::InDeltaTime' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.GetPercent_0
// 0x0028 (0x0028 - 0x0000)
struct InGame_Umg_C_GetPercent_0 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SCL_Pure_GetSafeFloat_ReturnValue;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_GetPercent_0) == 0x000008, "Wrong alignment on InGame_Umg_C_GetPercent_0");
static_assert(sizeof(InGame_Umg_C_GetPercent_0) == 0x000028, "Wrong size on InGame_Umg_C_GetPercent_0");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, ReturnValue) == 0x000000, "Member 'InGame_Umg_C_GetPercent_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'InGame_Umg_C_GetPercent_0::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, K2Node_DynamicCast_AsPlayer_BP) == 0x000010, "Member 'InGame_Umg_C_GetPercent_0::K2Node_DynamicCast_AsPlayer_BP' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'InGame_Umg_C_GetPercent_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'InGame_Umg_C_GetPercent_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, CallFunc_SCL_Pure_GetSafeFloat_ReturnValue) == 0x00001C, "Member 'InGame_Umg_C_GetPercent_0::CallFunc_SCL_Pure_GetSafeFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_0, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'InGame_Umg_C_GetPercent_0::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.GetFillColorAndOpacity_0
// 0x0040 (0x0040 - 0x0000)
struct InGame_Umg_C_GetFillColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           K2Node_DynamicCast_AsPlayer_BP;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SCL_Pure_GetSafeFloat_ReturnValue;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_GetFillColorAndOpacity_0) == 0x000008, "Wrong alignment on InGame_Umg_C_GetFillColorAndOpacity_0");
static_assert(sizeof(InGame_Umg_C_GetFillColorAndOpacity_0) == 0x000040, "Wrong size on InGame_Umg_C_GetFillColorAndOpacity_0");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000010, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, K2Node_DynamicCast_AsPlayer_BP) == 0x000018, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::K2Node_DynamicCast_AsPlayer_BP' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, CallFunc_SCL_Pure_GetSafeFloat_ReturnValue) == 0x000024, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::CallFunc_SCL_Pure_GetSafeFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetFillColorAndOpacity_0, K2Node_MakeStruct_LinearColor) == 0x00002C, "Member 'InGame_Umg_C_GetFillColorAndOpacity_0::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function InGame_Umg.InGame_Umg_C.GetPercent_1
// 0x000C (0x000C - 0x0000)
struct InGame_Umg_C_GetPercent_1 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InGame_Umg_C_GetPercent_1) == 0x000004, "Wrong alignment on InGame_Umg_C_GetPercent_1");
static_assert(sizeof(InGame_Umg_C_GetPercent_1) == 0x00000C, "Wrong size on InGame_Umg_C_GetPercent_1");
static_assert(offsetof(InGame_Umg_C_GetPercent_1, ReturnValue) == 0x000000, "Member 'InGame_Umg_C_GetPercent_1::ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_1, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'InGame_Umg_C_GetPercent_1::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InGame_Umg_C_GetPercent_1, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'InGame_Umg_C_GetPercent_1::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

}

