#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zombie_BP

#include "Basic.hpp"

#include "ZombieMovement_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ZombieType_structs.hpp"
#include "GameDifficultyEnum_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Zombie_BP.Zombie_BP_C
// 0x0350 (0x0810 - 0x04C0)
class AZombie_BP_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Sound;                                             // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Tip;                                               // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LeftFoot;                                          // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        RightFoot;                                         // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanScream_;                                        // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Scream_;                                           // 0x04F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          不开启剩余丧尸提示; // 0x04F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          爆头提醒; // 0x04F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MeleeByPlayer_;                                    // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dead;                                              // 0x04F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FA[0x6];                                      // 0x04FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayer_BP_C*                           PlayerRef;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  ZombieClass;                                       // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAudioComponent*                        Aggressive;                                        // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   Hit;                                               // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 HitPlayer;                                         // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   攻击检测起始骨骼; // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   攻击检测终点骨骼; // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         被击退的速度; // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          直接追逐玩家; // 0x054C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         应用伤害;                                      // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_Result;                                        // 0x0554(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZombie_NewAnim_C*                      As_Zombie_New_Anim;                                // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<class UAnimSequence*>                  IdleAnim;                                          // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequence*>                  WalkAnim;                                          // 0x05F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequence*>                  ChaseAnim;                                         // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   Scream;                                            // 0x0618(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequence*>                  AttackAnim;                                        // 0x0628(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequence*>                  HearChaseAnim;                                     // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           Montage;                                           // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否可以攻击; // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否可以QTE; // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否开启QTE; // 0x0652(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653[0x1];                                      // 0x0653(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         移动速度; // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         攻击速度; // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   AttackMontage;                                     // 0x0660(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EGameDifficultyEnum                           游戏难度; // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_671[0x3];                                      // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         攻击伤害; // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          开启只有爆头伤害; // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_679[0x3];                                      // 0x0679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         击退的概率; // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ZombieSound;                                       // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZombieType                                   ZombieType;                                        // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMesh*>                  FatZombieClass;                                    // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  咆哮zombieClass; // 0x06A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Save_Scale_3D;                                     // 0x06B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         攻击半径范围; // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Save骨骼网格体; // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          兔女郎化; // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   DeadMontage;                                       // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequence*>                  OffDutyAnim;                                       // 0x06E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          OffDuty_;                                          // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x3];                                      // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_run_Speed;                                     // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Walk_Speed;                                    // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_hear_Speed;                                    // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UAnimSequence*, float>             WalkAnim_0;                                        // 0x0700(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UAnimSequence*, float>             HearChaseAnim_0;                                   // 0x0750(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UAnimSequence*, float>             ChaseAnim_0;                                       // 0x07A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AMistyZombieBuilder_BP_C*               丧尸生成器Ref; // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          停止优化; // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInGame_Umg_C*                          InGameUmg;                                         // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class A丧尸波数生成器_BP_C* 丧尸波数生成器; // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Zombie_BP(int32 EntryPoint);
	void QTEEnd();
	void 击退();
	void MeleeByPlayer();
	void RightFootSound();
	void leftFootSound();
	void UISettingApply();
	void Backroom丧尸模型设置();
	void 重新开始音效播放();
	void ReceiveBeginPlay();
	void 切换丧尸状态();
	void BndEvt__Zombie_BP_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void 攻击范围();
	void 是否攻击玩家();
	void 玩家死亡();
	void 看到玩家();
	void DamageHit(const struct FHitResult& Hit_0, float Damage, bool isMelee_);
	void 受伤方向的计算(const struct FVector& Location);
	void 结束听觉事件();
	void 听到玩家的动静_Event();
	void 随机移动();
	void RandomAnim();
	void DisableQTE();
	void QTEStart(class FName StartingSection);
	void 播放音效();
	void 下班(bool Condition);
	void 兔女郎丧尸(bool Condition);
	void 巨大化(bool Condition);
	void 聆听状态(bool bValue);
	void OnCompleted_E4D355244787AB28E9A4129E5796629F(class FName NotifyName);
	void OnBlendOut_E4D355244787AB28E9A4129E5796629F(class FName NotifyName);
	void OnInterrupted_E4D355244787AB28E9A4129E5796629F(class FName NotifyName);
	void OnNotifyBegin_E4D355244787AB28E9A4129E5796629F(class FName NotifyName);
	void OnNotifyEnd_E4D355244787AB28E9A4129E5796629F(class FName NotifyName);
	void OnCompleted_9AC5CE52469A7DCDEDE4E5ADAAFF4B9E(class FName NotifyName);
	void OnBlendOut_9AC5CE52469A7DCDEDE4E5ADAAFF4B9E(class FName NotifyName);
	void OnInterrupted_9AC5CE52469A7DCDEDE4E5ADAAFF4B9E(class FName NotifyName);
	void OnNotifyBegin_9AC5CE52469A7DCDEDE4E5ADAAFF4B9E(class FName NotifyName);
	void OnNotifyEnd_9AC5CE52469A7DCDEDE4E5ADAAFF4B9E(class FName NotifyName);
	void OnCompleted_A62212464982E2BC046B269B5FD5B7EB(class FName NotifyName);
	void OnBlendOut_A62212464982E2BC046B269B5FD5B7EB(class FName NotifyName);
	void OnInterrupted_A62212464982E2BC046B269B5FD5B7EB(class FName NotifyName);
	void OnNotifyBegin_A62212464982E2BC046B269B5FD5B7EB(class FName NotifyName);
	void OnNotifyEnd_A62212464982E2BC046B269B5FD5B7EB(class FName NotifyName);
	void OnCompleted_4F86A9B1458252998DA8D9B8AC7C45BE(class FName NotifyName);
	void OnBlendOut_4F86A9B1458252998DA8D9B8AC7C45BE(class FName NotifyName);
	void OnInterrupted_4F86A9B1458252998DA8D9B8AC7C45BE(class FName NotifyName);
	void OnNotifyBegin_4F86A9B1458252998DA8D9B8AC7C45BE(class FName NotifyName);
	void OnNotifyEnd_4F86A9B1458252998DA8D9B8AC7C45BE(class FName NotifyName);
	void 更改控制旋转模式(bool Orient_Rotation_to_Movement, bool Use_Controller_Rotation_Yaw, bool 使用控制器所需的旋转);
	void 脚步声检测(class USceneComponent* 目标);
	void 设置丧尸行动状态(EZombieMovement ZombieMovement);
	void 血液飞溅特效(const struct FVector& Location, const struct FVector& InVec);
	class USkeletalMesh* 兔女郎模型选择();
	class USkeletalMesh* 普通僵尸模型选择();
	class USkeletalMesh* 咆哮僵尸模型选择();
	class USkeletalMesh* 肥胖僵尸模型选择();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Zombie_BP_C">();
	}
	static class AZombie_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZombie_BP_C>();
	}
};
static_assert(alignof(AZombie_BP_C) == 0x000010, "Wrong alignment on AZombie_BP_C");
static_assert(sizeof(AZombie_BP_C) == 0x000810, "Wrong size on AZombie_BP_C");
static_assert(offsetof(AZombie_BP_C, UberGraphFrame) == 0x0004C0, "Member 'AZombie_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Sound) == 0x0004C8, "Member 'AZombie_BP_C::Sound' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Tip) == 0x0004D0, "Member 'AZombie_BP_C::Tip' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, AIOSubject) == 0x0004D8, "Member 'AZombie_BP_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, LeftFoot) == 0x0004E0, "Member 'AZombie_BP_C::LeftFoot' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, RightFoot) == 0x0004E8, "Member 'AZombie_BP_C::RightFoot' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Health) == 0x0004F0, "Member 'AZombie_BP_C::Health' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, CanScream_) == 0x0004F4, "Member 'AZombie_BP_C::CanScream_' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Scream_) == 0x0004F5, "Member 'AZombie_BP_C::Scream_' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 不开启剩余丧尸提示) == 0x0004F6, "Member 'AZombie_BP_C::不开启剩余丧尸提示' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 爆头提醒) == 0x0004F7, "Member 'AZombie_BP_C::爆头提醒' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, MeleeByPlayer_) == 0x0004F8, "Member 'AZombie_BP_C::MeleeByPlayer_' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Dead) == 0x0004F9, "Member 'AZombie_BP_C::Dead' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, PlayerRef) == 0x000500, "Member 'AZombie_BP_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, ZombieClass) == 0x000508, "Member 'AZombie_BP_C::ZombieClass' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Aggressive) == 0x000518, "Member 'AZombie_BP_C::Aggressive' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Hit) == 0x000520, "Member 'AZombie_BP_C::Hit' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, HitPlayer) == 0x000530, "Member 'AZombie_BP_C::HitPlayer' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 攻击检测起始骨骼) == 0x000538, "Member 'AZombie_BP_C::攻击检测起始骨骼' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 攻击检测终点骨骼) == 0x000540, "Member 'AZombie_BP_C::攻击检测终点骨骼' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 被击退的速度) == 0x000548, "Member 'AZombie_BP_C::被击退的速度' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 直接追逐玩家) == 0x00054C, "Member 'AZombie_BP_C::直接追逐玩家' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 应用伤害) == 0x000550, "Member 'AZombie_BP_C::应用伤害' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Hit_Result) == 0x000554, "Member 'AZombie_BP_C::Hit_Result' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, As_Zombie_New_Anim) == 0x0005E0, "Member 'AZombie_BP_C::As_Zombie_New_Anim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, IdleAnim) == 0x0005E8, "Member 'AZombie_BP_C::IdleAnim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, WalkAnim) == 0x0005F8, "Member 'AZombie_BP_C::WalkAnim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, ChaseAnim) == 0x000608, "Member 'AZombie_BP_C::ChaseAnim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Scream) == 0x000618, "Member 'AZombie_BP_C::Scream' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, AttackAnim) == 0x000628, "Member 'AZombie_BP_C::AttackAnim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, HearChaseAnim) == 0x000638, "Member 'AZombie_BP_C::HearChaseAnim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Montage) == 0x000648, "Member 'AZombie_BP_C::Montage' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 是否可以攻击) == 0x000650, "Member 'AZombie_BP_C::是否可以攻击' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 是否可以QTE) == 0x000651, "Member 'AZombie_BP_C::是否可以QTE' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 是否开启QTE) == 0x000652, "Member 'AZombie_BP_C::是否开启QTE' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 移动速度) == 0x000654, "Member 'AZombie_BP_C::移动速度' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 攻击速度) == 0x000658, "Member 'AZombie_BP_C::攻击速度' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, AttackMontage) == 0x000660, "Member 'AZombie_BP_C::AttackMontage' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 游戏难度) == 0x000670, "Member 'AZombie_BP_C::游戏难度' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 攻击伤害) == 0x000674, "Member 'AZombie_BP_C::攻击伤害' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 开启只有爆头伤害) == 0x000678, "Member 'AZombie_BP_C::开启只有爆头伤害' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 击退的概率) == 0x00067C, "Member 'AZombie_BP_C::击退的概率' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, ZombieSound) == 0x000680, "Member 'AZombie_BP_C::ZombieSound' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, ZombieType) == 0x000688, "Member 'AZombie_BP_C::ZombieType' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, FatZombieClass) == 0x000690, "Member 'AZombie_BP_C::FatZombieClass' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 咆哮zombieClass) == 0x0006A0, "Member 'AZombie_BP_C::咆哮zombieClass' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Save_Scale_3D) == 0x0006B0, "Member 'AZombie_BP_C::Save_Scale_3D' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 攻击半径范围) == 0x0006BC, "Member 'AZombie_BP_C::攻击半径范围' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Save骨骼网格体) == 0x0006C0, "Member 'AZombie_BP_C::Save骨骼网格体' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 兔女郎化) == 0x0006C8, "Member 'AZombie_BP_C::兔女郎化' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, DeadMontage) == 0x0006D0, "Member 'AZombie_BP_C::DeadMontage' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, OffDutyAnim) == 0x0006E0, "Member 'AZombie_BP_C::OffDutyAnim' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, OffDuty_) == 0x0006F0, "Member 'AZombie_BP_C::OffDuty_' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Max_run_Speed) == 0x0006F4, "Member 'AZombie_BP_C::Max_run_Speed' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Max_Walk_Speed) == 0x0006F8, "Member 'AZombie_BP_C::Max_Walk_Speed' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, Max_hear_Speed) == 0x0006FC, "Member 'AZombie_BP_C::Max_hear_Speed' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, WalkAnim_0) == 0x000700, "Member 'AZombie_BP_C::WalkAnim_0' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, HearChaseAnim_0) == 0x000750, "Member 'AZombie_BP_C::HearChaseAnim_0' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, ChaseAnim_0) == 0x0007A0, "Member 'AZombie_BP_C::ChaseAnim_0' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 丧尸生成器Ref) == 0x0007F0, "Member 'AZombie_BP_C::丧尸生成器Ref' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 停止优化) == 0x0007F8, "Member 'AZombie_BP_C::停止优化' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, InGameUmg) == 0x000800, "Member 'AZombie_BP_C::InGameUmg' has a wrong offset!");
static_assert(offsetof(AZombie_BP_C, 丧尸波数生成器) == 0x000808, "Member 'AZombie_BP_C::丧尸波数生成器' has a wrong offset!");

}

