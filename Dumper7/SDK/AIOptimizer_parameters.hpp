#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIOptimizer

#include "Basic.hpp"

#include "AIOptimizer_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AIOptimizer.AIOptimizerSubsystem.DebugAIOptimizer
// 0x0001 (0x0001 - 0x0000)
struct AIOptimizerSubsystem_DebugAIOptimizer final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOptimizerSubsystem_DebugAIOptimizer) == 0x000001, "Wrong alignment on AIOptimizerSubsystem_DebugAIOptimizer");
static_assert(sizeof(AIOptimizerSubsystem_DebugAIOptimizer) == 0x000001, "Wrong size on AIOptimizerSubsystem_DebugAIOptimizer");
static_assert(offsetof(AIOptimizerSubsystem_DebugAIOptimizer, bDebug) == 0x000000, "Member 'AIOptimizerSubsystem_DebugAIOptimizer::bDebug' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.GetCategorizedDebugSubjects
// 0x0060 (0x0060 - 0x0000)
struct AIOptimizerSubsystem_GetCategorizedDebugSubjects final
{
public:
	TArray<struct FAIODebugSubjectData>           DebugSubjects;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<EAIODebugGroup, int32>                   ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOptimizerSubsystem_GetCategorizedDebugSubjects) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_GetCategorizedDebugSubjects");
static_assert(sizeof(AIOptimizerSubsystem_GetCategorizedDebugSubjects) == 0x000060, "Wrong size on AIOptimizerSubsystem_GetCategorizedDebugSubjects");
static_assert(offsetof(AIOptimizerSubsystem_GetCategorizedDebugSubjects, DebugSubjects) == 0x000000, "Member 'AIOptimizerSubsystem_GetCategorizedDebugSubjects::DebugSubjects' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_GetCategorizedDebugSubjects, ReturnValue) == 0x000010, "Member 'AIOptimizerSubsystem_GetCategorizedDebugSubjects::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.GetClosestInvokerLocation
// 0x0018 (0x0018 - 0x0000)
struct AIOptimizerSubsystem_GetClosestInvokerLocation final
{
public:
	struct FVector                                QuerierLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOptimizerSubsystem_GetClosestInvokerLocation) == 0x000004, "Wrong alignment on AIOptimizerSubsystem_GetClosestInvokerLocation");
static_assert(sizeof(AIOptimizerSubsystem_GetClosestInvokerLocation) == 0x000018, "Wrong size on AIOptimizerSubsystem_GetClosestInvokerLocation");
static_assert(offsetof(AIOptimizerSubsystem_GetClosestInvokerLocation, QuerierLocation) == 0x000000, "Member 'AIOptimizerSubsystem_GetClosestInvokerLocation::QuerierLocation' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_GetClosestInvokerLocation, ReturnValue) == 0x00000C, "Member 'AIOptimizerSubsystem_GetClosestInvokerLocation::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.GetDebugSubjects
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_GetDebugSubjects final
{
public:
	TArray<struct FAIODebugSubjectData>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOptimizerSubsystem_GetDebugSubjects) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_GetDebugSubjects");
static_assert(sizeof(AIOptimizerSubsystem_GetDebugSubjects) == 0x000010, "Wrong size on AIOptimizerSubsystem_GetDebugSubjects");
static_assert(offsetof(AIOptimizerSubsystem_GetDebugSubjects, ReturnValue) == 0x000000, "Member 'AIOptimizerSubsystem_GetDebugSubjects::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.GetDistanceToClosestInvokerSquared
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared final
{
public:
	struct FVector                                QuerierLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared) == 0x000004, "Wrong alignment on AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared");
static_assert(sizeof(AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared) == 0x000010, "Wrong size on AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared");
static_assert(offsetof(AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared, QuerierLocation) == 0x000000, "Member 'AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared::QuerierLocation' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared, ReturnValue) == 0x00000C, "Member 'AIOptimizerSubsystem_GetDistanceToClosestInvokerSquared::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.GetInvokerIndex
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_GetInvokerIndex final
{
public:
	class UAIOInvokerComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_GetInvokerIndex) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_GetInvokerIndex");
static_assert(sizeof(AIOptimizerSubsystem_GetInvokerIndex) == 0x000010, "Wrong size on AIOptimizerSubsystem_GetInvokerIndex");
static_assert(offsetof(AIOptimizerSubsystem_GetInvokerIndex, Component) == 0x000000, "Member 'AIOptimizerSubsystem_GetInvokerIndex::Component' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_GetInvokerIndex, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_GetInvokerIndex::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.GetSubjectIndex
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_GetSubjectIndex final
{
public:
	class UAIOSubjectComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_GetSubjectIndex) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_GetSubjectIndex");
static_assert(sizeof(AIOptimizerSubsystem_GetSubjectIndex) == 0x000010, "Wrong size on AIOptimizerSubsystem_GetSubjectIndex");
static_assert(offsetof(AIOptimizerSubsystem_GetSubjectIndex, Component) == 0x000000, "Member 'AIOptimizerSubsystem_GetSubjectIndex::Component' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_GetSubjectIndex, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_GetSubjectIndex::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.K2_DespawnSubject
// 0x0018 (0x0018 - 0x0000)
struct AIOptimizerSubsystem_K2_DespawnSubject final
{
public:
	struct FAIOSubjectHandle                      SubjectHandle;                                     // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EDespawnMethod                                Method;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIOSubjectComponent*                   Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideSpawnRadius;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRespawnOnlyByHandle;                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_K2_DespawnSubject) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_K2_DespawnSubject");
static_assert(sizeof(AIOptimizerSubsystem_K2_DespawnSubject) == 0x000018, "Wrong size on AIOptimizerSubsystem_K2_DespawnSubject");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubject, SubjectHandle) == 0x000000, "Member 'AIOptimizerSubsystem_K2_DespawnSubject::SubjectHandle' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubject, Method) == 0x000004, "Member 'AIOptimizerSubsystem_K2_DespawnSubject::Method' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubject, Component) == 0x000008, "Member 'AIOptimizerSubsystem_K2_DespawnSubject::Component' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubject, OverrideSpawnRadius) == 0x000010, "Member 'AIOptimizerSubsystem_K2_DespawnSubject::OverrideSpawnRadius' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubject, bAllowRespawnOnlyByHandle) == 0x000014, "Member 'AIOptimizerSubsystem_K2_DespawnSubject::bAllowRespawnOnlyByHandle' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubject, ReturnValue) == 0x000015, "Member 'AIOptimizerSubsystem_K2_DespawnSubject::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.K2_DespawnSubjectByHandle
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_K2_DespawnSubjectByHandle final
{
public:
	struct FAIOSubjectHandle                      SubjectHandle;                                     // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDespawnMethod                                Method;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideSpawnRadius;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRespawnOnlyByHandle;                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle) == 0x000004, "Wrong alignment on AIOptimizerSubsystem_K2_DespawnSubjectByHandle");
static_assert(sizeof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle) == 0x000010, "Wrong size on AIOptimizerSubsystem_K2_DespawnSubjectByHandle");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle, SubjectHandle) == 0x000000, "Member 'AIOptimizerSubsystem_K2_DespawnSubjectByHandle::SubjectHandle' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle, Method) == 0x000004, "Member 'AIOptimizerSubsystem_K2_DespawnSubjectByHandle::Method' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle, OverrideSpawnRadius) == 0x000008, "Member 'AIOptimizerSubsystem_K2_DespawnSubjectByHandle::OverrideSpawnRadius' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle, bAllowRespawnOnlyByHandle) == 0x00000C, "Member 'AIOptimizerSubsystem_K2_DespawnSubjectByHandle::bAllowRespawnOnlyByHandle' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_DespawnSubjectByHandle, ReturnValue) == 0x00000D, "Member 'AIOptimizerSubsystem_K2_DespawnSubjectByHandle::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.K2_SpawnSubjectByHandle
// 0x000C (0x000C - 0x0000)
struct AIOptimizerSubsystem_K2_SpawnSubjectByHandle final
{
public:
	EDespawnMethod                                Method;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIOSubjectHandle                      SubjectHandle;                                     // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_K2_SpawnSubjectByHandle) == 0x000004, "Wrong alignment on AIOptimizerSubsystem_K2_SpawnSubjectByHandle");
static_assert(sizeof(AIOptimizerSubsystem_K2_SpawnSubjectByHandle) == 0x00000C, "Wrong size on AIOptimizerSubsystem_K2_SpawnSubjectByHandle");
static_assert(offsetof(AIOptimizerSubsystem_K2_SpawnSubjectByHandle, Method) == 0x000000, "Member 'AIOptimizerSubsystem_K2_SpawnSubjectByHandle::Method' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_SpawnSubjectByHandle, SubjectHandle) == 0x000004, "Member 'AIOptimizerSubsystem_K2_SpawnSubjectByHandle::SubjectHandle' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_K2_SpawnSubjectByHandle, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_K2_SpawnSubjectByHandle::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.RegisterInvoker
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_RegisterInvoker final
{
public:
	class UAIOInvokerComponent*                   InvokerComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_RegisterInvoker) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_RegisterInvoker");
static_assert(sizeof(AIOptimizerSubsystem_RegisterInvoker) == 0x000010, "Wrong size on AIOptimizerSubsystem_RegisterInvoker");
static_assert(offsetof(AIOptimizerSubsystem_RegisterInvoker, InvokerComponent) == 0x000000, "Member 'AIOptimizerSubsystem_RegisterInvoker::InvokerComponent' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_RegisterInvoker, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_RegisterInvoker::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.RegisterSubject
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_RegisterSubject final
{
public:
	class UAIOSubjectComponent*                   SubjectComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_RegisterSubject) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_RegisterSubject");
static_assert(sizeof(AIOptimizerSubsystem_RegisterSubject) == 0x000010, "Wrong size on AIOptimizerSubsystem_RegisterSubject");
static_assert(offsetof(AIOptimizerSubsystem_RegisterSubject, SubjectComponent) == 0x000000, "Member 'AIOptimizerSubsystem_RegisterSubject::SubjectComponent' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_RegisterSubject, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_RegisterSubject::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.RemoveDespawnedSubjectByHandle
// 0x0008 (0x0008 - 0x0000)
struct AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle final
{
public:
	struct FAIOSubjectHandle                      Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle) == 0x000004, "Wrong alignment on AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle");
static_assert(sizeof(AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle) == 0x000008, "Wrong size on AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle");
static_assert(offsetof(AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle, Handle) == 0x000000, "Member 'AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle::Handle' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle, ReturnValue) == 0x000004, "Member 'AIOptimizerSubsystem_RemoveDespawnedSubjectByHandle::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.SetIsSystemEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIOptimizerSubsystem_SetIsSystemEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOptimizerSubsystem_SetIsSystemEnabled) == 0x000001, "Wrong alignment on AIOptimizerSubsystem_SetIsSystemEnabled");
static_assert(sizeof(AIOptimizerSubsystem_SetIsSystemEnabled) == 0x000001, "Wrong size on AIOptimizerSubsystem_SetIsSystemEnabled");
static_assert(offsetof(AIOptimizerSubsystem_SetIsSystemEnabled, bIsEnabled) == 0x000000, "Member 'AIOptimizerSubsystem_SetIsSystemEnabled::bIsEnabled' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.UnregisterInvoker
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_UnregisterInvoker final
{
public:
	class UAIOInvokerComponent*                   InvokerComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_UnregisterInvoker) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_UnregisterInvoker");
static_assert(sizeof(AIOptimizerSubsystem_UnregisterInvoker) == 0x000010, "Wrong size on AIOptimizerSubsystem_UnregisterInvoker");
static_assert(offsetof(AIOptimizerSubsystem_UnregisterInvoker, InvokerComponent) == 0x000000, "Member 'AIOptimizerSubsystem_UnregisterInvoker::InvokerComponent' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_UnregisterInvoker, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_UnregisterInvoker::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOptimizerSubsystem.UnregisterSubject
// 0x0010 (0x0010 - 0x0000)
struct AIOptimizerSubsystem_UnregisterSubject final
{
public:
	class UAIOSubjectComponent*                   SubjectComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOptimizerSubsystem_UnregisterSubject) == 0x000008, "Wrong alignment on AIOptimizerSubsystem_UnregisterSubject");
static_assert(sizeof(AIOptimizerSubsystem_UnregisterSubject) == 0x000010, "Wrong size on AIOptimizerSubsystem_UnregisterSubject");
static_assert(offsetof(AIOptimizerSubsystem_UnregisterSubject, SubjectComponent) == 0x000000, "Member 'AIOptimizerSubsystem_UnregisterSubject::SubjectComponent' has a wrong offset!");
static_assert(offsetof(AIOptimizerSubsystem_UnregisterSubject, ReturnValue) == 0x000008, "Member 'AIOptimizerSubsystem_UnregisterSubject::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.AddUniqueHandle
// 0x0018 (0x0018 - 0x0000)
struct AIOBPLibrary_AddUniqueHandle final
{
public:
	TArray<struct FAIOSubjectHandle>              Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAIOSubjectHandle                      Handle;                                            // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOBPLibrary_AddUniqueHandle) == 0x000008, "Wrong alignment on AIOBPLibrary_AddUniqueHandle");
static_assert(sizeof(AIOBPLibrary_AddUniqueHandle) == 0x000018, "Wrong size on AIOBPLibrary_AddUniqueHandle");
static_assert(offsetof(AIOBPLibrary_AddUniqueHandle, Array) == 0x000000, "Member 'AIOBPLibrary_AddUniqueHandle::Array' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_AddUniqueHandle, Handle) == 0x000010, "Member 'AIOBPLibrary_AddUniqueHandle::Handle' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_AddUniqueHandle, ReturnValue) == 0x000014, "Member 'AIOBPLibrary_AddUniqueHandle::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.FindHandle
// 0x0018 (0x0018 - 0x0000)
struct AIOBPLibrary_FindHandle final
{
public:
	TArray<struct FAIOSubjectHandle>              Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAIOSubjectHandle                      HandleToFind;                                      // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOBPLibrary_FindHandle) == 0x000008, "Wrong alignment on AIOBPLibrary_FindHandle");
static_assert(sizeof(AIOBPLibrary_FindHandle) == 0x000018, "Wrong size on AIOBPLibrary_FindHandle");
static_assert(offsetof(AIOBPLibrary_FindHandle, Array) == 0x000000, "Member 'AIOBPLibrary_FindHandle::Array' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_FindHandle, HandleToFind) == 0x000010, "Member 'AIOBPLibrary_FindHandle::HandleToFind' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_FindHandle, ReturnValue) == 0x000014, "Member 'AIOBPLibrary_FindHandle::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.GetInvokerTag
// 0x0008 (0x0008 - 0x0000)
struct AIOBPLibrary_GetInvokerTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOBPLibrary_GetInvokerTag) == 0x000004, "Wrong alignment on AIOBPLibrary_GetInvokerTag");
static_assert(sizeof(AIOBPLibrary_GetInvokerTag) == 0x000008, "Wrong size on AIOBPLibrary_GetInvokerTag");
static_assert(offsetof(AIOBPLibrary_GetInvokerTag, ReturnValue) == 0x000000, "Member 'AIOBPLibrary_GetInvokerTag::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.GetString
// 0x0018 (0x0018 - 0x0000)
struct AIOBPLibrary_GetString final
{
public:
	struct FAIOSubjectHandle                      Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOBPLibrary_GetString) == 0x000008, "Wrong alignment on AIOBPLibrary_GetString");
static_assert(sizeof(AIOBPLibrary_GetString) == 0x000018, "Wrong size on AIOBPLibrary_GetString");
static_assert(offsetof(AIOBPLibrary_GetString, Handle) == 0x000000, "Member 'AIOBPLibrary_GetString::Handle' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_GetString, ReturnValue) == 0x000008, "Member 'AIOBPLibrary_GetString::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.GetSubjectTag
// 0x0008 (0x0008 - 0x0000)
struct AIOBPLibrary_GetSubjectTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOBPLibrary_GetSubjectTag) == 0x000004, "Wrong alignment on AIOBPLibrary_GetSubjectTag");
static_assert(sizeof(AIOBPLibrary_GetSubjectTag) == 0x000008, "Wrong size on AIOBPLibrary_GetSubjectTag");
static_assert(offsetof(AIOBPLibrary_GetSubjectTag, ReturnValue) == 0x000000, "Member 'AIOBPLibrary_GetSubjectTag::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.IsHandleValid
// 0x0008 (0x0008 - 0x0000)
struct AIOBPLibrary_IsHandleValid final
{
public:
	struct FAIOSubjectHandle                      Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOBPLibrary_IsHandleValid) == 0x000004, "Wrong alignment on AIOBPLibrary_IsHandleValid");
static_assert(sizeof(AIOBPLibrary_IsHandleValid) == 0x000008, "Wrong size on AIOBPLibrary_IsHandleValid");
static_assert(offsetof(AIOBPLibrary_IsHandleValid, Handle) == 0x000000, "Member 'AIOBPLibrary_IsHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_IsHandleValid, ReturnValue) == 0x000004, "Member 'AIOBPLibrary_IsHandleValid::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.RemoveHandle
// 0x0018 (0x0018 - 0x0000)
struct AIOBPLibrary_RemoveHandle final
{
public:
	TArray<struct FAIOSubjectHandle>              Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAIOSubjectHandle                      Handle;                                            // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOBPLibrary_RemoveHandle) == 0x000008, "Wrong alignment on AIOBPLibrary_RemoveHandle");
static_assert(sizeof(AIOBPLibrary_RemoveHandle) == 0x000018, "Wrong size on AIOBPLibrary_RemoveHandle");
static_assert(offsetof(AIOBPLibrary_RemoveHandle, Array) == 0x000000, "Member 'AIOBPLibrary_RemoveHandle::Array' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_RemoveHandle, Handle) == 0x000010, "Member 'AIOBPLibrary_RemoveHandle::Handle' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_RemoveHandle, ReturnValue) == 0x000014, "Member 'AIOBPLibrary_RemoveHandle::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.SetAILogicEnabled
// 0x0010 (0x0010 - 0x0000)
struct AIOBPLibrary_SetAILogicEnabled final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOBPLibrary_SetAILogicEnabled) == 0x000008, "Wrong alignment on AIOBPLibrary_SetAILogicEnabled");
static_assert(sizeof(AIOBPLibrary_SetAILogicEnabled) == 0x000010, "Wrong size on AIOBPLibrary_SetAILogicEnabled");
static_assert(offsetof(AIOBPLibrary_SetAILogicEnabled, Actor) == 0x000000, "Member 'AIOBPLibrary_SetAILogicEnabled::Actor' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_SetAILogicEnabled, bEnable) == 0x000008, "Member 'AIOBPLibrary_SetAILogicEnabled::bEnable' has a wrong offset!");

// Function AIOptimizer.AIOBPLibrary.SetCharacterMovementEnabled
// 0x0010 (0x0010 - 0x0000)
struct AIOBPLibrary_SetCharacterMovementEnabled final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOBPLibrary_SetCharacterMovementEnabled) == 0x000008, "Wrong alignment on AIOBPLibrary_SetCharacterMovementEnabled");
static_assert(sizeof(AIOBPLibrary_SetCharacterMovementEnabled) == 0x000010, "Wrong size on AIOBPLibrary_SetCharacterMovementEnabled");
static_assert(offsetof(AIOBPLibrary_SetCharacterMovementEnabled, Character) == 0x000000, "Member 'AIOBPLibrary_SetCharacterMovementEnabled::Character' has a wrong offset!");
static_assert(offsetof(AIOBPLibrary_SetCharacterMovementEnabled, bEnable) == 0x000008, "Member 'AIOBPLibrary_SetCharacterMovementEnabled::bEnable' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.CanBeUpdatedBySubsystem
// 0x0001 (0x0001 - 0x0000)
struct AIOSubjectComponent_CanBeUpdatedBySubsystem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_CanBeUpdatedBySubsystem) == 0x000001, "Wrong alignment on AIOSubjectComponent_CanBeUpdatedBySubsystem");
static_assert(sizeof(AIOSubjectComponent_CanBeUpdatedBySubsystem) == 0x000001, "Wrong size on AIOSubjectComponent_CanBeUpdatedBySubsystem");
static_assert(offsetof(AIOSubjectComponent_CanBeUpdatedBySubsystem, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_CanBeUpdatedBySubsystem::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.GetClosestInvokerLocation
// 0x000C (0x000C - 0x0000)
struct AIOSubjectComponent_GetClosestInvokerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_GetClosestInvokerLocation) == 0x000004, "Wrong alignment on AIOSubjectComponent_GetClosestInvokerLocation");
static_assert(sizeof(AIOSubjectComponent_GetClosestInvokerLocation) == 0x00000C, "Wrong size on AIOSubjectComponent_GetClosestInvokerLocation");
static_assert(offsetof(AIOSubjectComponent_GetClosestInvokerLocation, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_GetClosestInvokerLocation::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.GetDespawnRadiusSquared
// 0x0010 (0x0010 - 0x0000)
struct AIOSubjectComponent_GetDespawnRadiusSquared final
{
public:
	class UAIOptimizerSubsystem*                  Subsystem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOSubjectComponent_GetDespawnRadiusSquared) == 0x000008, "Wrong alignment on AIOSubjectComponent_GetDespawnRadiusSquared");
static_assert(sizeof(AIOSubjectComponent_GetDespawnRadiusSquared) == 0x000010, "Wrong size on AIOSubjectComponent_GetDespawnRadiusSquared");
static_assert(offsetof(AIOSubjectComponent_GetDespawnRadiusSquared, Subsystem) == 0x000000, "Member 'AIOSubjectComponent_GetDespawnRadiusSquared::Subsystem' has a wrong offset!");
static_assert(offsetof(AIOSubjectComponent_GetDespawnRadiusSquared, ReturnValue) == 0x000008, "Member 'AIOSubjectComponent_GetDespawnRadiusSquared::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.GetOptimizationLayerForCurrentDistance
// 0x0004 (0x0004 - 0x0000)
struct AIOSubjectComponent_GetOptimizationLayerForCurrentDistance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_GetOptimizationLayerForCurrentDistance) == 0x000004, "Wrong alignment on AIOSubjectComponent_GetOptimizationLayerForCurrentDistance");
static_assert(sizeof(AIOSubjectComponent_GetOptimizationLayerForCurrentDistance) == 0x000004, "Wrong size on AIOSubjectComponent_GetOptimizationLayerForCurrentDistance");
static_assert(offsetof(AIOSubjectComponent_GetOptimizationLayerForCurrentDistance, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_GetOptimizationLayerForCurrentDistance::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.GetSpawnRadiusSquared
// 0x0010 (0x0010 - 0x0000)
struct AIOSubjectComponent_GetSpawnRadiusSquared final
{
public:
	class UAIOptimizerSubsystem*                  Subsystem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOSubjectComponent_GetSpawnRadiusSquared) == 0x000008, "Wrong alignment on AIOSubjectComponent_GetSpawnRadiusSquared");
static_assert(sizeof(AIOSubjectComponent_GetSpawnRadiusSquared) == 0x000010, "Wrong size on AIOSubjectComponent_GetSpawnRadiusSquared");
static_assert(offsetof(AIOSubjectComponent_GetSpawnRadiusSquared, Subsystem) == 0x000000, "Member 'AIOSubjectComponent_GetSpawnRadiusSquared::Subsystem' has a wrong offset!");
static_assert(offsetof(AIOSubjectComponent_GetSpawnRadiusSquared, ReturnValue) == 0x000008, "Member 'AIOSubjectComponent_GetSpawnRadiusSquared::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.ReinitializeOptimizationLayers
// 0x0010 (0x0010 - 0x0000)
struct AIOSubjectComponent_ReinitializeOptimizationLayers final
{
public:
	TArray<struct FAIOptimizationLayer>           NewOptimizationLayers;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_ReinitializeOptimizationLayers) == 0x000008, "Wrong alignment on AIOSubjectComponent_ReinitializeOptimizationLayers");
static_assert(sizeof(AIOSubjectComponent_ReinitializeOptimizationLayers) == 0x000010, "Wrong size on AIOSubjectComponent_ReinitializeOptimizationLayers");
static_assert(offsetof(AIOSubjectComponent_ReinitializeOptimizationLayers, NewOptimizationLayers) == 0x000000, "Member 'AIOSubjectComponent_ReinitializeOptimizationLayers::NewOptimizationLayers' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.SetCanBeUpdatedBySubsystem
// 0x0001 (0x0001 - 0x0000)
struct AIOSubjectComponent_SetCanBeUpdatedBySubsystem final
{
public:
	bool                                          bCanBeUpdated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_SetCanBeUpdatedBySubsystem) == 0x000001, "Wrong alignment on AIOSubjectComponent_SetCanBeUpdatedBySubsystem");
static_assert(sizeof(AIOSubjectComponent_SetCanBeUpdatedBySubsystem) == 0x000001, "Wrong size on AIOSubjectComponent_SetCanBeUpdatedBySubsystem");
static_assert(offsetof(AIOSubjectComponent_SetCanBeUpdatedBySubsystem, bCanBeUpdated) == 0x000000, "Member 'AIOSubjectComponent_SetCanBeUpdatedBySubsystem::bCanBeUpdated' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.SetCharacterFeatures
// 0x0010 (0x0010 - 0x0000)
struct AIOSubjectComponent_SetCharacterFeatures final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FeaturesToEnable;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOSubjectComponent_SetCharacterFeatures) == 0x000008, "Wrong alignment on AIOSubjectComponent_SetCharacterFeatures");
static_assert(sizeof(AIOSubjectComponent_SetCharacterFeatures) == 0x000010, "Wrong size on AIOSubjectComponent_SetCharacterFeatures");
static_assert(offsetof(AIOSubjectComponent_SetCharacterFeatures, Character) == 0x000000, "Member 'AIOSubjectComponent_SetCharacterFeatures::Character' has a wrong offset!");
static_assert(offsetof(AIOSubjectComponent_SetCharacterFeatures, FeaturesToEnable) == 0x000008, "Member 'AIOSubjectComponent_SetCharacterFeatures::FeaturesToEnable' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.SetSpawner
// 0x0010 (0x0010 - 0x0000)
struct AIOSubjectComponent_SetSpawner final
{
public:
	TScriptInterface<class ISpawnerInterface>     NewSpawner;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_SetSpawner) == 0x000008, "Wrong alignment on AIOSubjectComponent_SetSpawner");
static_assert(sizeof(AIOSubjectComponent_SetSpawner) == 0x000010, "Wrong size on AIOSubjectComponent_SetSpawner");
static_assert(offsetof(AIOSubjectComponent_SetSpawner, NewSpawner) == 0x000000, "Member 'AIOSubjectComponent_SetSpawner::NewSpawner' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.ShouldBeDespawned
// 0x0010 (0x0010 - 0x0000)
struct AIOSubjectComponent_ShouldBeDespawned final
{
public:
	class UAIOptimizerSubsystem*                  Subsystem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdateDataToInvokers;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIOSubjectComponent_ShouldBeDespawned) == 0x000008, "Wrong alignment on AIOSubjectComponent_ShouldBeDespawned");
static_assert(sizeof(AIOSubjectComponent_ShouldBeDespawned) == 0x000010, "Wrong size on AIOSubjectComponent_ShouldBeDespawned");
static_assert(offsetof(AIOSubjectComponent_ShouldBeDespawned, Subsystem) == 0x000000, "Member 'AIOSubjectComponent_ShouldBeDespawned::Subsystem' has a wrong offset!");
static_assert(offsetof(AIOSubjectComponent_ShouldBeDespawned, bForceUpdateDataToInvokers) == 0x000008, "Member 'AIOSubjectComponent_ShouldBeDespawned::bForceUpdateDataToInvokers' has a wrong offset!");
static_assert(offsetof(AIOSubjectComponent_ShouldBeDespawned, ReturnValue) == 0x000009, "Member 'AIOSubjectComponent_ShouldBeDespawned::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.GetCurrentOptimizationLayer
// 0x0004 (0x0004 - 0x0000)
struct AIOSubjectComponent_GetCurrentOptimizationLayer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_GetCurrentOptimizationLayer) == 0x000004, "Wrong alignment on AIOSubjectComponent_GetCurrentOptimizationLayer");
static_assert(sizeof(AIOSubjectComponent_GetCurrentOptimizationLayer) == 0x000004, "Wrong size on AIOSubjectComponent_GetCurrentOptimizationLayer");
static_assert(offsetof(AIOSubjectComponent_GetCurrentOptimizationLayer, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_GetCurrentOptimizationLayer::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.GetDistanceToClosestInvoker
// 0x0004 (0x0004 - 0x0000)
struct AIOSubjectComponent_GetDistanceToClosestInvoker final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_GetDistanceToClosestInvoker) == 0x000004, "Wrong alignment on AIOSubjectComponent_GetDistanceToClosestInvoker");
static_assert(sizeof(AIOSubjectComponent_GetDistanceToClosestInvoker) == 0x000004, "Wrong size on AIOSubjectComponent_GetDistanceToClosestInvoker");
static_assert(offsetof(AIOSubjectComponent_GetDistanceToClosestInvoker, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_GetDistanceToClosestInvoker::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.IsDespawning
// 0x0001 (0x0001 - 0x0000)
struct AIOSubjectComponent_IsDespawning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_IsDespawning) == 0x000001, "Wrong alignment on AIOSubjectComponent_IsDespawning");
static_assert(sizeof(AIOSubjectComponent_IsDespawning) == 0x000001, "Wrong size on AIOSubjectComponent_IsDespawning");
static_assert(offsetof(AIOSubjectComponent_IsDespawning, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_IsDespawning::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOSubjectComponent.IsSeenByAnyInvoker
// 0x0004 (0x0004 - 0x0000)
struct AIOSubjectComponent_IsSeenByAnyInvoker final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOSubjectComponent_IsSeenByAnyInvoker) == 0x000004, "Wrong alignment on AIOSubjectComponent_IsSeenByAnyInvoker");
static_assert(sizeof(AIOSubjectComponent_IsSeenByAnyInvoker) == 0x000004, "Wrong size on AIOSubjectComponent_IsSeenByAnyInvoker");
static_assert(offsetof(AIOSubjectComponent_IsSeenByAnyInvoker, ReturnValue) == 0x000000, "Member 'AIOSubjectComponent_IsSeenByAnyInvoker::ReturnValue' has a wrong offset!");

// Function AIOptimizer.AIOInvokerComponent.DebugAIOptimizer
// 0x0001 (0x0001 - 0x0000)
struct AIOInvokerComponent_DebugAIOptimizer final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIOInvokerComponent_DebugAIOptimizer) == 0x000001, "Wrong alignment on AIOInvokerComponent_DebugAIOptimizer");
static_assert(sizeof(AIOInvokerComponent_DebugAIOptimizer) == 0x000001, "Wrong size on AIOInvokerComponent_DebugAIOptimizer");
static_assert(offsetof(AIOInvokerComponent_DebugAIOptimizer, bDebug) == 0x000000, "Member 'AIOInvokerComponent_DebugAIOptimizer::bDebug' has a wrong offset!");

// Function AIOptimizer.SpawnerInterface.OnSubjectDespawnedByOptimizerSubsystem
// 0x0008 (0x0008 - 0x0000)
struct SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem final
{
public:
	class UAIOSubjectComponent*                   DespawnedSubjectComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem) == 0x000008, "Wrong alignment on SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem");
static_assert(sizeof(SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem) == 0x000008, "Wrong size on SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem");
static_assert(offsetof(SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem, DespawnedSubjectComponent) == 0x000000, "Member 'SpawnerInterface_OnSubjectDespawnedByOptimizerSubsystem::DespawnedSubjectComponent' has a wrong offset!");

// Function AIOptimizer.SpawnerInterface.OnSubjectSpawnedByOptimizerSubsystem
// 0x0008 (0x0008 - 0x0000)
struct SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem final
{
public:
	class UAIOSubjectComponent*                   SpawnedSubjectComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem) == 0x000008, "Wrong alignment on SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem");
static_assert(sizeof(SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem) == 0x000008, "Wrong size on SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem");
static_assert(offsetof(SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem, SpawnedSubjectComponent) == 0x000000, "Member 'SpawnerInterface_OnSubjectSpawnedByOptimizerSubsystem::SpawnedSubjectComponent' has a wrong offset!");

}

