#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LockPickingComponent

#include "Basic.hpp"

#include "InventoryData_Struct_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LockPickingComponent.BP_LockPickingComponent_C
// 0x00C8 (0x0178 - 0x00B0)
class UBP_LockPickingComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUI_LockpickingHUD_C*                   LockInfoHUD;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LockPicks;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLockpicks;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_上锁的门_C* 要开的门; // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayer_BP_C*                           As_Player_BP;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否有螺丝刀; // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否有开锁工具; // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInventoryData_Struct                  开锁工具的数据; // 0x00E0(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LockPickingComponent(int32 EntryPoint);
	void PickLock();
	void ReceiveBeginPlay();
	void CheckForLock(class ABP_上锁的门_C* 要开的门1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LockPickingComponent_C">();
	}
	static class UBP_LockPickingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LockPickingComponent_C>();
	}
};
static_assert(alignof(UBP_LockPickingComponent_C) == 0x000008, "Wrong alignment on UBP_LockPickingComponent_C");
static_assert(sizeof(UBP_LockPickingComponent_C) == 0x000178, "Wrong size on UBP_LockPickingComponent_C");
static_assert(offsetof(UBP_LockPickingComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_LockPickingComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, LockInfoHUD) == 0x0000B8, "Member 'UBP_LockPickingComponent_C::LockInfoHUD' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, LockPicks) == 0x0000C0, "Member 'UBP_LockPickingComponent_C::LockPicks' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, MaxLockpicks) == 0x0000C4, "Member 'UBP_LockPickingComponent_C::MaxLockpicks' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, 要开的门) == 0x0000C8, "Member 'UBP_LockPickingComponent_C::要开的门' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, As_Player_BP) == 0x0000D0, "Member 'UBP_LockPickingComponent_C::As_Player_BP' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, 是否有螺丝刀) == 0x0000D8, "Member 'UBP_LockPickingComponent_C::是否有螺丝刀' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, 是否有开锁工具) == 0x0000D9, "Member 'UBP_LockPickingComponent_C::是否有开锁工具' has a wrong offset!");
static_assert(offsetof(UBP_LockPickingComponent_C, 开锁工具的数据) == 0x0000E0, "Member 'UBP_LockPickingComponent_C::开锁工具的数据' has a wrong offset!");

}

