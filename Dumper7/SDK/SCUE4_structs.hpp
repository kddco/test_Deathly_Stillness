#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCUE4

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct SCUE4.SafeVector3D
// 0x0078 (0x0078 - 0x0000)
struct FSafeVector3D final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueX;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueY;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueZ;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftX;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftY;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftZ;                                            // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0070(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeVector3D) == 0x000008, "Wrong alignment on FSafeVector3D");
static_assert(sizeof(FSafeVector3D) == 0x000078, "Wrong size on FSafeVector3D");
static_assert(offsetof(FSafeVector3D, Internal) == 0x000000, "Member 'FSafeVector3D::Internal' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, TrueX) == 0x000010, "Member 'FSafeVector3D::TrueX' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, TrueY) == 0x000020, "Member 'FSafeVector3D::TrueY' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, TrueZ) == 0x000030, "Member 'FSafeVector3D::TrueZ' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, ShiftX) == 0x000040, "Member 'FSafeVector3D::ShiftX' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, ShiftY) == 0x000050, "Member 'FSafeVector3D::ShiftY' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, ShiftZ) == 0x000060, "Member 'FSafeVector3D::ShiftZ' has a wrong offset!");
static_assert(offsetof(FSafeVector3D, Flag) == 0x000070, "Member 'FSafeVector3D::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeRotator
// 0x0078 (0x0078 - 0x0000)
struct FSafeRotator final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueX;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueY;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueZ;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftX;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftY;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftZ;                                            // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0070(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeRotator) == 0x000008, "Wrong alignment on FSafeRotator");
static_assert(sizeof(FSafeRotator) == 0x000078, "Wrong size on FSafeRotator");
static_assert(offsetof(FSafeRotator, Internal) == 0x000000, "Member 'FSafeRotator::Internal' has a wrong offset!");
static_assert(offsetof(FSafeRotator, TrueX) == 0x000010, "Member 'FSafeRotator::TrueX' has a wrong offset!");
static_assert(offsetof(FSafeRotator, TrueY) == 0x000020, "Member 'FSafeRotator::TrueY' has a wrong offset!");
static_assert(offsetof(FSafeRotator, TrueZ) == 0x000030, "Member 'FSafeRotator::TrueZ' has a wrong offset!");
static_assert(offsetof(FSafeRotator, ShiftX) == 0x000040, "Member 'FSafeRotator::ShiftX' has a wrong offset!");
static_assert(offsetof(FSafeRotator, ShiftY) == 0x000050, "Member 'FSafeRotator::ShiftY' has a wrong offset!");
static_assert(offsetof(FSafeRotator, ShiftZ) == 0x000060, "Member 'FSafeRotator::ShiftZ' has a wrong offset!");
static_assert(offsetof(FSafeRotator, Flag) == 0x000070, "Member 'FSafeRotator::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeTransform
// 0x0168 (0x0168 - 0x0000)
struct FSafeTransform final
{
public:
	struct FSafeVector3D                          Scale;                                             // 0x0000(0x0078)(Edit, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSafeVector3D                          Position;                                          // 0x0078(0x0078)(Edit, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSafeRotator                           Rotation;                                          // 0x00F0(0x0078)(Edit, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSafeTransform) == 0x000008, "Wrong alignment on FSafeTransform");
static_assert(sizeof(FSafeTransform) == 0x000168, "Wrong size on FSafeTransform");
static_assert(offsetof(FSafeTransform, Scale) == 0x000000, "Member 'FSafeTransform::Scale' has a wrong offset!");
static_assert(offsetof(FSafeTransform, Position) == 0x000078, "Member 'FSafeTransform::Position' has a wrong offset!");
static_assert(offsetof(FSafeTransform, Rotation) == 0x0000F0, "Member 'FSafeTransform::Rotation' has a wrong offset!");

// ScriptStruct SCUE4.SafeColor
// 0x0098 (0x0098 - 0x0000)
struct FSafeColor final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueR;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueG;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueB;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueA;                                             // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftR;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftG;                                            // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftB;                                            // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftA;                                            // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0090(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeColor) == 0x000008, "Wrong alignment on FSafeColor");
static_assert(sizeof(FSafeColor) == 0x000098, "Wrong size on FSafeColor");
static_assert(offsetof(FSafeColor, Internal) == 0x000000, "Member 'FSafeColor::Internal' has a wrong offset!");
static_assert(offsetof(FSafeColor, TrueR) == 0x000010, "Member 'FSafeColor::TrueR' has a wrong offset!");
static_assert(offsetof(FSafeColor, TrueG) == 0x000020, "Member 'FSafeColor::TrueG' has a wrong offset!");
static_assert(offsetof(FSafeColor, TrueB) == 0x000030, "Member 'FSafeColor::TrueB' has a wrong offset!");
static_assert(offsetof(FSafeColor, TrueA) == 0x000040, "Member 'FSafeColor::TrueA' has a wrong offset!");
static_assert(offsetof(FSafeColor, ShiftR) == 0x000050, "Member 'FSafeColor::ShiftR' has a wrong offset!");
static_assert(offsetof(FSafeColor, ShiftG) == 0x000060, "Member 'FSafeColor::ShiftG' has a wrong offset!");
static_assert(offsetof(FSafeColor, ShiftB) == 0x000070, "Member 'FSafeColor::ShiftB' has a wrong offset!");
static_assert(offsetof(FSafeColor, ShiftA) == 0x000080, "Member 'FSafeColor::ShiftA' has a wrong offset!");
static_assert(offsetof(FSafeColor, Flag) == 0x000090, "Member 'FSafeColor::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeVector4D
// 0x0098 (0x0098 - 0x0000)
struct FSafeVector4D final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueX;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueY;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueZ;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueW;                                             // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftX;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftY;                                            // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftZ;                                            // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftW;                                            // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0090(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeVector4D) == 0x000008, "Wrong alignment on FSafeVector4D");
static_assert(sizeof(FSafeVector4D) == 0x000098, "Wrong size on FSafeVector4D");
static_assert(offsetof(FSafeVector4D, Internal) == 0x000000, "Member 'FSafeVector4D::Internal' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, TrueX) == 0x000010, "Member 'FSafeVector4D::TrueX' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, TrueY) == 0x000020, "Member 'FSafeVector4D::TrueY' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, TrueZ) == 0x000030, "Member 'FSafeVector4D::TrueZ' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, TrueW) == 0x000040, "Member 'FSafeVector4D::TrueW' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, ShiftX) == 0x000050, "Member 'FSafeVector4D::ShiftX' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, ShiftY) == 0x000060, "Member 'FSafeVector4D::ShiftY' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, ShiftZ) == 0x000070, "Member 'FSafeVector4D::ShiftZ' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, ShiftW) == 0x000080, "Member 'FSafeVector4D::ShiftW' has a wrong offset!");
static_assert(offsetof(FSafeVector4D, Flag) == 0x000090, "Member 'FSafeVector4D::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeVector2D
// 0x0058 (0x0058 - 0x0000)
struct FSafeVector2D final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueX;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TrueY;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftX;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShiftY;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0050(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeVector2D) == 0x000008, "Wrong alignment on FSafeVector2D");
static_assert(sizeof(FSafeVector2D) == 0x000058, "Wrong size on FSafeVector2D");
static_assert(offsetof(FSafeVector2D, Internal) == 0x000000, "Member 'FSafeVector2D::Internal' has a wrong offset!");
static_assert(offsetof(FSafeVector2D, TrueX) == 0x000010, "Member 'FSafeVector2D::TrueX' has a wrong offset!");
static_assert(offsetof(FSafeVector2D, TrueY) == 0x000020, "Member 'FSafeVector2D::TrueY' has a wrong offset!");
static_assert(offsetof(FSafeVector2D, ShiftX) == 0x000030, "Member 'FSafeVector2D::ShiftX' has a wrong offset!");
static_assert(offsetof(FSafeVector2D, ShiftY) == 0x000040, "Member 'FSafeVector2D::ShiftY' has a wrong offset!");
static_assert(offsetof(FSafeVector2D, Flag) == 0x000050, "Member 'FSafeVector2D::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeText
// 0x0038 (0x0038 - 0x0000)
struct FSafeText final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeText) == 0x000008, "Wrong alignment on FSafeText");
static_assert(sizeof(FSafeText) == 0x000038, "Wrong size on FSafeText");
static_assert(offsetof(FSafeText, Internal) == 0x000000, "Member 'FSafeText::Internal' has a wrong offset!");
static_assert(offsetof(FSafeText, Base) == 0x000010, "Member 'FSafeText::Base' has a wrong offset!");
static_assert(offsetof(FSafeText, Shift) == 0x000020, "Member 'FSafeText::Shift' has a wrong offset!");
static_assert(offsetof(FSafeText, Flag) == 0x000030, "Member 'FSafeText::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeString
// 0x0038 (0x0038 - 0x0000)
struct FSafeString final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeString) == 0x000008, "Wrong alignment on FSafeString");
static_assert(sizeof(FSafeString) == 0x000038, "Wrong size on FSafeString");
static_assert(offsetof(FSafeString, Internal) == 0x000000, "Member 'FSafeString::Internal' has a wrong offset!");
static_assert(offsetof(FSafeString, Base) == 0x000010, "Member 'FSafeString::Base' has a wrong offset!");
static_assert(offsetof(FSafeString, Shift) == 0x000020, "Member 'FSafeString::Shift' has a wrong offset!");
static_assert(offsetof(FSafeString, Flag) == 0x000030, "Member 'FSafeString::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeName
// 0x0038 (0x0038 - 0x0000)
struct FSafeName final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeName) == 0x000008, "Wrong alignment on FSafeName");
static_assert(sizeof(FSafeName) == 0x000038, "Wrong size on FSafeName");
static_assert(offsetof(FSafeName, Internal) == 0x000000, "Member 'FSafeName::Internal' has a wrong offset!");
static_assert(offsetof(FSafeName, Base) == 0x000010, "Member 'FSafeName::Base' has a wrong offset!");
static_assert(offsetof(FSafeName, Shift) == 0x000020, "Member 'FSafeName::Shift' has a wrong offset!");
static_assert(offsetof(FSafeName, Flag) == 0x000030, "Member 'FSafeName::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeFloat
// 0x0038 (0x0038 - 0x0000)
struct FSafeFloat final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeFloat) == 0x000008, "Wrong alignment on FSafeFloat");
static_assert(sizeof(FSafeFloat) == 0x000038, "Wrong size on FSafeFloat");
static_assert(offsetof(FSafeFloat, Internal) == 0x000000, "Member 'FSafeFloat::Internal' has a wrong offset!");
static_assert(offsetof(FSafeFloat, Base) == 0x000010, "Member 'FSafeFloat::Base' has a wrong offset!");
static_assert(offsetof(FSafeFloat, Shift) == 0x000020, "Member 'FSafeFloat::Shift' has a wrong offset!");
static_assert(offsetof(FSafeFloat, Flag) == 0x000030, "Member 'FSafeFloat::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeInt
// 0x0038 (0x0038 - 0x0000)
struct FSafeInt final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeInt) == 0x000008, "Wrong alignment on FSafeInt");
static_assert(sizeof(FSafeInt) == 0x000038, "Wrong size on FSafeInt");
static_assert(offsetof(FSafeInt, Internal) == 0x000000, "Member 'FSafeInt::Internal' has a wrong offset!");
static_assert(offsetof(FSafeInt, Base) == 0x000010, "Member 'FSafeInt::Base' has a wrong offset!");
static_assert(offsetof(FSafeInt, Shift) == 0x000020, "Member 'FSafeInt::Shift' has a wrong offset!");
static_assert(offsetof(FSafeInt, Flag) == 0x000030, "Member 'FSafeInt::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeByte
// 0x0038 (0x0038 - 0x0000)
struct FSafeByte final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeByte) == 0x000008, "Wrong alignment on FSafeByte");
static_assert(sizeof(FSafeByte) == 0x000038, "Wrong size on FSafeByte");
static_assert(offsetof(FSafeByte, Internal) == 0x000000, "Member 'FSafeByte::Internal' has a wrong offset!");
static_assert(offsetof(FSafeByte, Base) == 0x000010, "Member 'FSafeByte::Base' has a wrong offset!");
static_assert(offsetof(FSafeByte, Shift) == 0x000020, "Member 'FSafeByte::Shift' has a wrong offset!");
static_assert(offsetof(FSafeByte, Flag) == 0x000030, "Member 'FSafeByte::Flag' has a wrong offset!");

// ScriptStruct SCUE4.SafeBool
// 0x0038 (0x0038 - 0x0000)
struct FSafeBool final
{
public:
	class FString                                 Internal;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Base;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Shift;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag;                                              // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafeBool) == 0x000008, "Wrong alignment on FSafeBool");
static_assert(sizeof(FSafeBool) == 0x000038, "Wrong size on FSafeBool");
static_assert(offsetof(FSafeBool, Internal) == 0x000000, "Member 'FSafeBool::Internal' has a wrong offset!");
static_assert(offsetof(FSafeBool, Base) == 0x000010, "Member 'FSafeBool::Base' has a wrong offset!");
static_assert(offsetof(FSafeBool, Shift) == 0x000020, "Member 'FSafeBool::Shift' has a wrong offset!");
static_assert(offsetof(FSafeBool, Flag) == 0x000030, "Member 'FSafeBool::Flag' has a wrong offset!");

}

