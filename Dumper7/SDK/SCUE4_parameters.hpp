#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCUE4

#include "Basic.hpp"

#include "SCUE4_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeBool
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeBool final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeBool) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeBool");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeBool) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeBool");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeBool, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeBool::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeBool, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeByte
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeByte final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeByte) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeByte");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeByte) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeByte");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeByte, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeByte::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeByte, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeFloat
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeFloat final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeFloat) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeFloat");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeFloat) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeFloat");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeFloat, SF) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeFloat::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeFloat, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeInt
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeInt final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeInt) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeInt");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeInt) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeInt");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeInt, SI) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeInt::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeInt, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeName final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeName) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeName");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeName) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeName");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeName, SN) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeName::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeName, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeString
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeString final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeString) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeString");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeString) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeString");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeString, SS) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeString::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeString, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetRawSafeText
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetRawSafeText final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetRawSafeText) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetRawSafeText");
static_assert(sizeof(SCLibrary_SCL_Callable_GetRawSafeText) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetRawSafeText");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeText, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetRawSafeText::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetRawSafeText, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetRawSafeText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeBool
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeBool final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeBool) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeBool");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeBool) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_GetSafeBool");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeBool, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeBool::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeBool, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeBoolWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeBoolWithKey final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeBoolWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeBoolWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeBoolWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_GetSafeBoolWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeBoolWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeBoolWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeBoolWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeBoolWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeBoolWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeBoolWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeByte final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeByte) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeByte");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeByte) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_GetSafeByte");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeByte, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeByte::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeByte, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeByteWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeByteWithKey final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeByteWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeByteWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeByteWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_GetSafeByteWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeByteWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeByteWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeByteWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeByteWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeByteWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeByteWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeColor
// 0x00A8 (0x00A8 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeColor final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeColor) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeColor");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeColor) == 0x0000A8, "Wrong size on SCLibrary_SCL_Callable_GetSafeColor");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeColor, SC) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeColor::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeColor, ReturnValue) == 0x000098, "Member 'SCLibrary_SCL_Callable_GetSafeColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeColorWithKey
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeColorWithKey final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeColorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeColorWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeColorWithKey) == 0x0000B8, "Wrong size on SCLibrary_SCL_Callable_GetSafeColorWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeColorWithKey, SC) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeColorWithKey::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeColorWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Callable_GetSafeColorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeColorWithKey, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCL_Callable_GetSafeColorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeFloat final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeFloat) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeFloat");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeFloat) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_GetSafeFloat");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeFloat, SF) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeFloat::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeFloat, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeFloatWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeFloatWithKey final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeFloatWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeFloatWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeFloatWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_GetSafeFloatWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeFloatWithKey, SF) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeFloatWithKey::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeFloatWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeFloatWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeFloatWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeFloatWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeInt final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeInt) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeInt");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeInt) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_GetSafeInt");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeInt, SI) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeInt::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeInt, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeIntWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeIntWithKey final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeIntWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeIntWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeIntWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_GetSafeIntWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeIntWithKey, SI) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeIntWithKey::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeIntWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeIntWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeIntWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeIntWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeName
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeName final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeName) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeName");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeName) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_GetSafeName");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeName, SN) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeName::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeName, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeNameWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeNameWithKey final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeNameWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeNameWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeNameWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_GetSafeNameWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeNameWithKey, SN) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeNameWithKey::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeNameWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeNameWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeNameWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeNameWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeRotator final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeRotator) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeRotator");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeRotator) == 0x000088, "Wrong size on SCLibrary_SCL_Callable_GetSafeRotator");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeRotator, SR) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeRotator::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeRotator, ReturnValue) == 0x000078, "Member 'SCLibrary_SCL_Callable_GetSafeRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeRotatorWithKey
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeRotatorWithKey final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeRotatorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeRotatorWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeRotatorWithKey) == 0x000098, "Wrong size on SCLibrary_SCL_Callable_GetSafeRotatorWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeRotatorWithKey, SR) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeRotatorWithKey::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeRotatorWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Callable_GetSafeRotatorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeRotatorWithKey, ReturnValue) == 0x000088, "Member 'SCLibrary_SCL_Callable_GetSafeRotatorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeString
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeString final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeString) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeString");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeString) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_GetSafeString");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeString, SS) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeString::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeString, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeStringWithKey
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeStringWithKey final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeStringWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeStringWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeStringWithKey) == 0x000058, "Wrong size on SCLibrary_SCL_Callable_GetSafeStringWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeStringWithKey, SS) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeStringWithKey::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeStringWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeStringWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeStringWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeStringWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeText
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeText final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeText) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeText");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeText) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_GetSafeText");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeText, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeText::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeText, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeTextWithKey
// 0x0060 (0x0060 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeTextWithKey final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeTextWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeTextWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeTextWithKey) == 0x000060, "Wrong size on SCLibrary_SCL_Callable_GetSafeTextWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTextWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeTextWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTextWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_GetSafeTextWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTextWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_GetSafeTextWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeTransform
// 0x01A0 (0x01A0 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeTransform final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0170(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeTransform) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeTransform");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeTransform) == 0x0001A0, "Wrong size on SCLibrary_SCL_Callable_GetSafeTransform");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTransform, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeTransform::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTransform, ReturnValue) == 0x000170, "Member 'SCLibrary_SCL_Callable_GetSafeTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeTransformWithKey
// 0x01B0 (0x01B0 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeTransformWithKey final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0168(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0180(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeTransformWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeTransformWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeTransformWithKey) == 0x0001B0, "Wrong size on SCLibrary_SCL_Callable_GetSafeTransformWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTransformWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeTransformWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTransformWithKey, Key) == 0x000168, "Member 'SCLibrary_SCL_Callable_GetSafeTransformWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeTransformWithKey, ReturnValue) == 0x000180, "Member 'SCLibrary_SCL_Callable_GetSafeTransformWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeVector2D
// 0x0060 (0x0060 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeVector2D final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeVector2D");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeVector2D) == 0x000060, "Wrong size on SCLibrary_SCL_Callable_GetSafeVector2D");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector2D, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeVector2D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector2D, ReturnValue) == 0x000058, "Member 'SCLibrary_SCL_Callable_GetSafeVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeVector2DWithKey
// 0x0070 (0x0070 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeVector2DWithKey final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeVector2DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeVector2DWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeVector2DWithKey) == 0x000070, "Wrong size on SCLibrary_SCL_Callable_GetSafeVector2DWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector2DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeVector2DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector2DWithKey, Key) == 0x000058, "Member 'SCLibrary_SCL_Callable_GetSafeVector2DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector2DWithKey, ReturnValue) == 0x000068, "Member 'SCLibrary_SCL_Callable_GetSafeVector2DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeVector3D final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeVector3D");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeVector3D) == 0x000088, "Wrong size on SCLibrary_SCL_Callable_GetSafeVector3D");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector3D, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeVector3D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector3D, ReturnValue) == 0x000078, "Member 'SCLibrary_SCL_Callable_GetSafeVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeVector3DWithKey
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeVector3DWithKey final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeVector3DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeVector3DWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeVector3DWithKey) == 0x000098, "Wrong size on SCLibrary_SCL_Callable_GetSafeVector3DWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector3DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeVector3DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector3DWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Callable_GetSafeVector3DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector3DWithKey, ReturnValue) == 0x000088, "Member 'SCLibrary_SCL_Callable_GetSafeVector3DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeVector4D
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeVector4D final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeVector4D");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeVector4D) == 0x0000B0, "Wrong size on SCLibrary_SCL_Callable_GetSafeVector4D");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector4D, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeVector4D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector4D, ReturnValue) == 0x0000A0, "Member 'SCLibrary_SCL_Callable_GetSafeVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_GetSafeVector4DWithKey
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCL_Callable_GetSafeVector4DWithKey final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_GetSafeVector4DWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_GetSafeVector4DWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_GetSafeVector4DWithKey) == 0x0000C0, "Wrong size on SCLibrary_SCL_Callable_GetSafeVector4DWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector4DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_GetSafeVector4DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector4DWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Callable_GetSafeVector4DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_GetSafeVector4DWithKey, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCL_Callable_GetSafeVector4DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeBool
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeBool final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeBool) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeBool");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeBool) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeBool");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeBool, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeBool::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeBool, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeBool::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeBool, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeByte
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeByte final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeByte) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeByte");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeByte) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeByte");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeByte, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeByte::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeByte, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeByte::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeByte, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeFloat
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeFloat final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeFloat) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeFloat");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeFloat) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeFloat");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeFloat, SF) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeFloat::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeFloat, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeFloat::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeFloat, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeInt
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeInt final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeInt) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeInt");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeInt) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeInt");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeInt, SI) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeInt::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeInt, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeInt::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeInt, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeName
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeName final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeName) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeName");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeName) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeName");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeName, SN) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeName::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeName, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeName::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeName, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeString
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeString final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeString) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeString");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeString) == 0x000058, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeString");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeString, SS) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeString::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeString, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeString::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetRawSafeText
// 0x0060 (0x0060 - 0x0000)
struct SCLibrary_SCL_Callable_SetRawSafeText final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetRawSafeText) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetRawSafeText");
static_assert(sizeof(SCLibrary_SCL_Callable_SetRawSafeText) == 0x000060, "Wrong size on SCLibrary_SCL_Callable_SetRawSafeText");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeText, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetRawSafeText::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeText, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetRawSafeText::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetRawSafeText, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetRawSafeText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeBool
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeBool final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeBool) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeBool");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeBool) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_SetSafeBool");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBool, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeBool::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBool, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeBool::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBool, ReturnValue) == 0x000039, "Member 'SCLibrary_SCL_Callable_SetSafeBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeBoolWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeBoolWithKey final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeBoolWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeBoolWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeBoolWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetSafeBoolWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBoolWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeBoolWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBoolWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeBoolWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBoolWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeBoolWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeBoolWithKey, ReturnValue) == 0x000049, "Member 'SCLibrary_SCL_Callable_SetSafeBoolWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeByte final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeByte) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeByte");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeByte) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_SetSafeByte");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByte, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeByte::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByte, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeByte::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCL_Callable_SetSafeByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeByteWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeByteWithKey final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeByteWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeByteWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeByteWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetSafeByteWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByteWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeByteWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByteWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeByteWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByteWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeByteWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeByteWithKey, ReturnValue) == 0x000049, "Member 'SCLibrary_SCL_Callable_SetSafeByteWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeColor
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeColor final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeColor) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeColor");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeColor) == 0x0000B8, "Wrong size on SCLibrary_SCL_Callable_SetSafeColor");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColor, SC) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeColor::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColor, Value) == 0x000098, "Member 'SCLibrary_SCL_Callable_SetSafeColor::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColor, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCL_Callable_SetSafeColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeColorWithKey
// 0x00C8 (0x00C8 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeColorWithKey final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeColorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeColorWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeColorWithKey) == 0x0000C8, "Wrong size on SCLibrary_SCL_Callable_SetSafeColorWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColorWithKey, SC) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeColorWithKey::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColorWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Callable_SetSafeColorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColorWithKey, Value) == 0x0000A8, "Member 'SCLibrary_SCL_Callable_SetSafeColorWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeColorWithKey, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCL_Callable_SetSafeColorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeFloat final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeFloat) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeFloat");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeFloat) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_SetSafeFloat");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloat, SF) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeFloat::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloat, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeFloat::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCL_Callable_SetSafeFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeFloatWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeFloatWithKey final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeFloatWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeFloatWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeFloatWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetSafeFloatWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloatWithKey, SF) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeFloatWithKey::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloatWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeFloatWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloatWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeFloatWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeFloatWithKey, ReturnValue) == 0x00004C, "Member 'SCLibrary_SCL_Callable_SetSafeFloatWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeInt final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeInt) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeInt");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeInt) == 0x000040, "Wrong size on SCLibrary_SCL_Callable_SetSafeInt");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeInt, SI) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeInt::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeInt, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeInt::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCL_Callable_SetSafeInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeIntWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeIntWithKey final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeIntWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeIntWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeIntWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Callable_SetSafeIntWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeIntWithKey, SI) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeIntWithKey::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeIntWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeIntWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeIntWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeIntWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeIntWithKey, ReturnValue) == 0x00004C, "Member 'SCLibrary_SCL_Callable_SetSafeIntWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeName final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeName) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeName");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeName) == 0x000048, "Wrong size on SCLibrary_SCL_Callable_SetSafeName");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeName, SN) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeName::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeName, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeName::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeName, ReturnValue) == 0x000040, "Member 'SCLibrary_SCL_Callable_SetSafeName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeNameWithKey
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeNameWithKey final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeNameWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeNameWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeNameWithKey) == 0x000058, "Wrong size on SCLibrary_SCL_Callable_SetSafeNameWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeNameWithKey, SN) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeNameWithKey::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeNameWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeNameWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeNameWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeNameWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeNameWithKey, ReturnValue) == 0x000050, "Member 'SCLibrary_SCL_Callable_SetSafeNameWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeRotator
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeRotator final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0078(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeRotator) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeRotator");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeRotator) == 0x000090, "Wrong size on SCLibrary_SCL_Callable_SetSafeRotator");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotator, SR) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeRotator::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotator, Value) == 0x000078, "Member 'SCLibrary_SCL_Callable_SetSafeRotator::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCL_Callable_SetSafeRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeRotatorWithKey
// 0x00A0 (0x00A0 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeRotatorWithKey final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0094(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeRotatorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeRotatorWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeRotatorWithKey) == 0x0000A0, "Wrong size on SCLibrary_SCL_Callable_SetSafeRotatorWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotatorWithKey, SR) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeRotatorWithKey::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotatorWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Callable_SetSafeRotatorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotatorWithKey, Value) == 0x000088, "Member 'SCLibrary_SCL_Callable_SetSafeRotatorWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeRotatorWithKey, ReturnValue) == 0x000094, "Member 'SCLibrary_SCL_Callable_SetSafeRotatorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeString
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeString final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeString) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeString");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeString) == 0x000058, "Wrong size on SCLibrary_SCL_Callable_SetSafeString");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeString, SS) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeString::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeString, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeString::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeStringWithKey
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeStringWithKey final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeStringWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeStringWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeStringWithKey) == 0x000068, "Wrong size on SCLibrary_SCL_Callable_SetSafeStringWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeStringWithKey, SS) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeStringWithKey::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeStringWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeStringWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeStringWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeStringWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeStringWithKey, ReturnValue) == 0x000058, "Member 'SCLibrary_SCL_Callable_SetSafeStringWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeText
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeText final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0038(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeText) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeText");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeText) == 0x000068, "Wrong size on SCLibrary_SCL_Callable_SetSafeText");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeText, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeText::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeText, Value) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeText::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeText, ReturnValue) == 0x000050, "Member 'SCLibrary_SCL_Callable_SetSafeText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeTextWithKey
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeTextWithKey final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0048(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0060(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeTextWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeTextWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeTextWithKey) == 0x000078, "Wrong size on SCLibrary_SCL_Callable_SetSafeTextWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTextWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeTextWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTextWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Callable_SetSafeTextWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTextWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Callable_SetSafeTextWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTextWithKey, ReturnValue) == 0x000060, "Member 'SCLibrary_SCL_Callable_SetSafeTextWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeTransform
// 0x01D0 (0x01D0 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeTransform final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0170(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x01A0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeTransform) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeTransform");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeTransform) == 0x0001D0, "Wrong size on SCLibrary_SCL_Callable_SetSafeTransform");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransform, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeTransform::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransform, Value) == 0x000170, "Member 'SCLibrary_SCL_Callable_SetSafeTransform::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransform, ReturnValue) == 0x0001A0, "Member 'SCLibrary_SCL_Callable_SetSafeTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeTransformWithKey
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeTransformWithKey final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0168(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0180(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x01B0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeTransformWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeTransformWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeTransformWithKey) == 0x0001E0, "Wrong size on SCLibrary_SCL_Callable_SetSafeTransformWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransformWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeTransformWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransformWithKey, Key) == 0x000168, "Member 'SCLibrary_SCL_Callable_SetSafeTransformWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransformWithKey, Value) == 0x000180, "Member 'SCLibrary_SCL_Callable_SetSafeTransformWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeTransformWithKey, ReturnValue) == 0x0001B0, "Member 'SCLibrary_SCL_Callable_SetSafeTransformWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeVector2D final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeVector2D");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeVector2D) == 0x000068, "Wrong size on SCLibrary_SCL_Callable_SetSafeVector2D");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2D, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeVector2D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2D, Value) == 0x000058, "Member 'SCLibrary_SCL_Callable_SetSafeVector2D::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCL_Callable_SetSafeVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeVector2DWithKey
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeVector2DWithKey final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0068(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeVector2DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeVector2DWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeVector2DWithKey) == 0x000078, "Wrong size on SCLibrary_SCL_Callable_SetSafeVector2DWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeVector2DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2DWithKey, Key) == 0x000058, "Member 'SCLibrary_SCL_Callable_SetSafeVector2DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2DWithKey, Value) == 0x000068, "Member 'SCLibrary_SCL_Callable_SetSafeVector2DWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector2DWithKey, ReturnValue) == 0x000070, "Member 'SCLibrary_SCL_Callable_SetSafeVector2DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeVector3D
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeVector3D final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0078(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeVector3D");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeVector3D) == 0x000090, "Wrong size on SCLibrary_SCL_Callable_SetSafeVector3D");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3D, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeVector3D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3D, Value) == 0x000078, "Member 'SCLibrary_SCL_Callable_SetSafeVector3D::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCL_Callable_SetSafeVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeVector3DWithKey
// 0x00A0 (0x00A0 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeVector3DWithKey final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0094(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeVector3DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeVector3DWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeVector3DWithKey) == 0x0000A0, "Wrong size on SCLibrary_SCL_Callable_SetSafeVector3DWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeVector3DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3DWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Callable_SetSafeVector3DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3DWithKey, Value) == 0x000088, "Member 'SCLibrary_SCL_Callable_SetSafeVector3DWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector3DWithKey, ReturnValue) == 0x000094, "Member 'SCLibrary_SCL_Callable_SetSafeVector3DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeVector4D final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Value;                                             // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeVector4D");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCL_Callable_SetSafeVector4D");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4D, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeVector4D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4D, Value) == 0x0000A0, "Member 'SCLibrary_SCL_Callable_SetSafeVector4D::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCL_Callable_SetSafeVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Callable_SetSafeVector4DWithKey
// 0x00D0 (0x00D0 - 0x0000)
struct SCLibrary_SCL_Callable_SetSafeVector4DWithKey final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Value;                                             // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Callable_SetSafeVector4DWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Callable_SetSafeVector4DWithKey");
static_assert(sizeof(SCLibrary_SCL_Callable_SetSafeVector4DWithKey) == 0x0000D0, "Wrong size on SCLibrary_SCL_Callable_SetSafeVector4DWithKey");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Callable_SetSafeVector4DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4DWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Callable_SetSafeVector4DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4DWithKey, Value) == 0x0000B0, "Member 'SCLibrary_SCL_Callable_SetSafeVector4DWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Callable_SetSafeVector4DWithKey, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCL_Callable_SetSafeVector4DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeBool
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeBool final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeBool) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeBool");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeBool) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_GetSafeBool");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeBool, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeBool::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeBool, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeBoolWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeBoolWithKey final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeBoolWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeBoolWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeBoolWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_GetSafeBoolWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeBoolWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeBoolWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeBoolWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeBoolWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeBoolWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeBoolWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeByte final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeByte) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeByte");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeByte) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_GetSafeByte");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeByte, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeByte::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeByte, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeByteWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeByteWithKey final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeByteWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeByteWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeByteWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_GetSafeByteWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeByteWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeByteWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeByteWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeByteWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeByteWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeByteWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeColor
// 0x00A8 (0x00A8 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeColor final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeColor) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeColor");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeColor) == 0x0000A8, "Wrong size on SCLibrary_SCL_Pure_GetSafeColor");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeColor, SC) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeColor::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeColor, ReturnValue) == 0x000098, "Member 'SCLibrary_SCL_Pure_GetSafeColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeColorWithKey
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeColorWithKey final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeColorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeColorWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeColorWithKey) == 0x0000B8, "Wrong size on SCLibrary_SCL_Pure_GetSafeColorWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeColorWithKey, SC) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeColorWithKey::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeColorWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Pure_GetSafeColorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeColorWithKey, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCL_Pure_GetSafeColorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeFloat final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeFloat) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeFloat");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeFloat) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_GetSafeFloat");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeFloat, SF) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeFloat::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeFloat, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeFloatWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeFloatWithKey final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeFloatWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeFloatWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeFloatWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_GetSafeFloatWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeFloatWithKey, SF) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeFloatWithKey::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeFloatWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeFloatWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeFloatWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeFloatWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeInt final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeInt) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeInt");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeInt) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_GetSafeInt");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeInt, SI) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeInt::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeInt, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeIntWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeIntWithKey final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeIntWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeIntWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeIntWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_GetSafeIntWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeIntWithKey, SI) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeIntWithKey::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeIntWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeIntWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeIntWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeIntWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeName
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeName final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeName) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeName");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeName) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_GetSafeName");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeName, SN) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeName::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeName, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeNameWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeNameWithKey final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeNameWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeNameWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeNameWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_GetSafeNameWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeNameWithKey, SN) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeNameWithKey::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeNameWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeNameWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeNameWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeNameWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeRotator final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeRotator) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeRotator");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeRotator) == 0x000088, "Wrong size on SCLibrary_SCL_Pure_GetSafeRotator");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeRotator, SR) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeRotator::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeRotator, ReturnValue) == 0x000078, "Member 'SCLibrary_SCL_Pure_GetSafeRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeRotatorWithKey
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeRotatorWithKey final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeRotatorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeRotatorWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeRotatorWithKey) == 0x000098, "Wrong size on SCLibrary_SCL_Pure_GetSafeRotatorWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeRotatorWithKey, SR) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeRotatorWithKey::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeRotatorWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Pure_GetSafeRotatorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeRotatorWithKey, ReturnValue) == 0x000088, "Member 'SCLibrary_SCL_Pure_GetSafeRotatorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeString
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeString final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeString) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeString");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeString) == 0x000048, "Wrong size on SCLibrary_SCL_Pure_GetSafeString");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeString, SS) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeString::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeString, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeStringWithKey
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeStringWithKey final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeStringWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeStringWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeStringWithKey) == 0x000058, "Wrong size on SCLibrary_SCL_Pure_GetSafeStringWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeStringWithKey, SS) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeStringWithKey::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeStringWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeStringWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeStringWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeStringWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeText
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeText final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeText) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeText");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeText) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_GetSafeText");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeText, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeText::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeText, ReturnValue) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeTextWithKey
// 0x0060 (0x0060 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeTextWithKey final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeTextWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeTextWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeTextWithKey) == 0x000060, "Wrong size on SCLibrary_SCL_Pure_GetSafeTextWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTextWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeTextWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTextWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_GetSafeTextWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTextWithKey, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_GetSafeTextWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeTransform
// 0x01A0 (0x01A0 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeTransform final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0170(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeTransform) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeTransform");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeTransform) == 0x0001A0, "Wrong size on SCLibrary_SCL_Pure_GetSafeTransform");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTransform, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeTransform::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTransform, ReturnValue) == 0x000170, "Member 'SCLibrary_SCL_Pure_GetSafeTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeTransformWithKey
// 0x01B0 (0x01B0 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeTransformWithKey final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0168(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0180(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeTransformWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeTransformWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeTransformWithKey) == 0x0001B0, "Wrong size on SCLibrary_SCL_Pure_GetSafeTransformWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTransformWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeTransformWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTransformWithKey, Key) == 0x000168, "Member 'SCLibrary_SCL_Pure_GetSafeTransformWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeTransformWithKey, ReturnValue) == 0x000180, "Member 'SCLibrary_SCL_Pure_GetSafeTransformWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeVector2D
// 0x0060 (0x0060 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeVector2D final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeVector2D");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeVector2D) == 0x000060, "Wrong size on SCLibrary_SCL_Pure_GetSafeVector2D");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector2D, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeVector2D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector2D, ReturnValue) == 0x000058, "Member 'SCLibrary_SCL_Pure_GetSafeVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeVector2DWithKey
// 0x0070 (0x0070 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeVector2DWithKey final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeVector2DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeVector2DWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeVector2DWithKey) == 0x000070, "Wrong size on SCLibrary_SCL_Pure_GetSafeVector2DWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector2DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeVector2DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector2DWithKey, Key) == 0x000058, "Member 'SCLibrary_SCL_Pure_GetSafeVector2DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector2DWithKey, ReturnValue) == 0x000068, "Member 'SCLibrary_SCL_Pure_GetSafeVector2DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeVector3D final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeVector3D");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeVector3D) == 0x000088, "Wrong size on SCLibrary_SCL_Pure_GetSafeVector3D");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector3D, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeVector3D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector3D, ReturnValue) == 0x000078, "Member 'SCLibrary_SCL_Pure_GetSafeVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeVector3DWithKey
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeVector3DWithKey final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeVector3DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeVector3DWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeVector3DWithKey) == 0x000098, "Wrong size on SCLibrary_SCL_Pure_GetSafeVector3DWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector3DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeVector3DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector3DWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Pure_GetSafeVector3DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector3DWithKey, ReturnValue) == 0x000088, "Member 'SCLibrary_SCL_Pure_GetSafeVector3DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeVector4D
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeVector4D final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeVector4D");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeVector4D) == 0x0000B0, "Wrong size on SCLibrary_SCL_Pure_GetSafeVector4D");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector4D, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeVector4D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector4D, ReturnValue) == 0x0000A0, "Member 'SCLibrary_SCL_Pure_GetSafeVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_GetSafeVector4DWithKey
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCL_Pure_GetSafeVector4DWithKey final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_GetSafeVector4DWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_GetSafeVector4DWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_GetSafeVector4DWithKey) == 0x0000C0, "Wrong size on SCLibrary_SCL_Pure_GetSafeVector4DWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector4DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_GetSafeVector4DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector4DWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Pure_GetSafeVector4DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_GetSafeVector4DWithKey, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCL_Pure_GetSafeVector4DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeBool
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeBool final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeBool) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeBool");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeBool) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_SetSafeBool");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBool, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeBool::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBool, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeBool::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBool, ReturnValue) == 0x000039, "Member 'SCLibrary_SCL_Pure_SetSafeBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeBoolWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeBoolWithKey final
{
public:
	struct FSafeBool                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeBoolWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeBoolWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeBoolWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_SetSafeBoolWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBoolWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeBoolWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBoolWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeBoolWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBoolWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeBoolWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeBoolWithKey, ReturnValue) == 0x000049, "Member 'SCLibrary_SCL_Pure_SetSafeBoolWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeByte final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeByte) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeByte");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeByte) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_SetSafeByte");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByte, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeByte::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByte, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeByte::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCL_Pure_SetSafeByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeByteWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeByteWithKey final
{
public:
	struct FSafeByte                              SB;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeByteWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeByteWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeByteWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_SetSafeByteWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByteWithKey, SB) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeByteWithKey::SB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByteWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeByteWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByteWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeByteWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeByteWithKey, ReturnValue) == 0x000049, "Member 'SCLibrary_SCL_Pure_SetSafeByteWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeColor
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeColor final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeColor) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeColor");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeColor) == 0x0000B8, "Wrong size on SCLibrary_SCL_Pure_SetSafeColor");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColor, SC) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeColor::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColor, Value) == 0x000098, "Member 'SCLibrary_SCL_Pure_SetSafeColor::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColor, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCL_Pure_SetSafeColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeColorWithKey
// 0x00C8 (0x00C8 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeColorWithKey final
{
public:
	struct FSafeColor                             SC;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeColorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeColorWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeColorWithKey) == 0x0000C8, "Wrong size on SCLibrary_SCL_Pure_SetSafeColorWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColorWithKey, SC) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeColorWithKey::SC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColorWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Pure_SetSafeColorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColorWithKey, Value) == 0x0000A8, "Member 'SCLibrary_SCL_Pure_SetSafeColorWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeColorWithKey, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCL_Pure_SetSafeColorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeFloat final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeFloat) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeFloat");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeFloat) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_SetSafeFloat");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloat, SF) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeFloat::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloat, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeFloat::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCL_Pure_SetSafeFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeFloatWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeFloatWithKey final
{
public:
	struct FSafeFloat                             SF;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeFloatWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeFloatWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeFloatWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_SetSafeFloatWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloatWithKey, SF) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeFloatWithKey::SF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloatWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeFloatWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloatWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeFloatWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeFloatWithKey, ReturnValue) == 0x00004C, "Member 'SCLibrary_SCL_Pure_SetSafeFloatWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeInt final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeInt) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeInt");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeInt) == 0x000040, "Wrong size on SCLibrary_SCL_Pure_SetSafeInt");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeInt, SI) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeInt::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeInt, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeInt::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCL_Pure_SetSafeInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeIntWithKey
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeIntWithKey final
{
public:
	struct FSafeInt                               SI;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeIntWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeIntWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeIntWithKey) == 0x000050, "Wrong size on SCLibrary_SCL_Pure_SetSafeIntWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeIntWithKey, SI) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeIntWithKey::SI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeIntWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeIntWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeIntWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeIntWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeIntWithKey, ReturnValue) == 0x00004C, "Member 'SCLibrary_SCL_Pure_SetSafeIntWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeName final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeName) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeName");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeName) == 0x000048, "Wrong size on SCLibrary_SCL_Pure_SetSafeName");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeName, SN) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeName::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeName, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeName::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeName, ReturnValue) == 0x000040, "Member 'SCLibrary_SCL_Pure_SetSafeName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeNameWithKey
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeNameWithKey final
{
public:
	struct FSafeName                              SN;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeNameWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeNameWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeNameWithKey) == 0x000058, "Wrong size on SCLibrary_SCL_Pure_SetSafeNameWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeNameWithKey, SN) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeNameWithKey::SN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeNameWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeNameWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeNameWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeNameWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeNameWithKey, ReturnValue) == 0x000050, "Member 'SCLibrary_SCL_Pure_SetSafeNameWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeRotator
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeRotator final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0078(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeRotator) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeRotator");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeRotator) == 0x000090, "Wrong size on SCLibrary_SCL_Pure_SetSafeRotator");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotator, SR) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeRotator::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotator, Value) == 0x000078, "Member 'SCLibrary_SCL_Pure_SetSafeRotator::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCL_Pure_SetSafeRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeRotatorWithKey
// 0x00A0 (0x00A0 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeRotatorWithKey final
{
public:
	struct FSafeRotator                           SR;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0094(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeRotatorWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeRotatorWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeRotatorWithKey) == 0x0000A0, "Wrong size on SCLibrary_SCL_Pure_SetSafeRotatorWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotatorWithKey, SR) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeRotatorWithKey::SR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotatorWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Pure_SetSafeRotatorWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotatorWithKey, Value) == 0x000088, "Member 'SCLibrary_SCL_Pure_SetSafeRotatorWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeRotatorWithKey, ReturnValue) == 0x000094, "Member 'SCLibrary_SCL_Pure_SetSafeRotatorWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeString
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeString final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeString) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeString");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeString) == 0x000058, "Wrong size on SCLibrary_SCL_Pure_SetSafeString");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeString, SS) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeString::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeString, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeString::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeStringWithKey
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeStringWithKey final
{
public:
	struct FSafeString                            SS;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeStringWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeStringWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeStringWithKey) == 0x000068, "Wrong size on SCLibrary_SCL_Pure_SetSafeStringWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeStringWithKey, SS) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeStringWithKey::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeStringWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeStringWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeStringWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeStringWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeStringWithKey, ReturnValue) == 0x000058, "Member 'SCLibrary_SCL_Pure_SetSafeStringWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeText
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeText final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0038(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeText) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeText");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeText) == 0x000068, "Wrong size on SCLibrary_SCL_Pure_SetSafeText");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeText, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeText::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeText, Value) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeText::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeText, ReturnValue) == 0x000050, "Member 'SCLibrary_SCL_Pure_SetSafeText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeTextWithKey
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeTextWithKey final
{
public:
	struct FSafeText                              ST;                                                // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0048(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0060(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeTextWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeTextWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeTextWithKey) == 0x000078, "Wrong size on SCLibrary_SCL_Pure_SetSafeTextWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTextWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeTextWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTextWithKey, Key) == 0x000038, "Member 'SCLibrary_SCL_Pure_SetSafeTextWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTextWithKey, Value) == 0x000048, "Member 'SCLibrary_SCL_Pure_SetSafeTextWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTextWithKey, ReturnValue) == 0x000060, "Member 'SCLibrary_SCL_Pure_SetSafeTextWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeTransform
// 0x01D0 (0x01D0 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeTransform final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0170(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x01A0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeTransform) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeTransform");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeTransform) == 0x0001D0, "Wrong size on SCLibrary_SCL_Pure_SetSafeTransform");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransform, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeTransform::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransform, Value) == 0x000170, "Member 'SCLibrary_SCL_Pure_SetSafeTransform::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransform, ReturnValue) == 0x0001A0, "Member 'SCLibrary_SCL_Pure_SetSafeTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeTransformWithKey
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeTransformWithKey final
{
public:
	struct FSafeTransform                         ST;                                                // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0168(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0180(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x01B0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeTransformWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeTransformWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeTransformWithKey) == 0x0001E0, "Wrong size on SCLibrary_SCL_Pure_SetSafeTransformWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransformWithKey, ST) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeTransformWithKey::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransformWithKey, Key) == 0x000168, "Member 'SCLibrary_SCL_Pure_SetSafeTransformWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransformWithKey, Value) == 0x000180, "Member 'SCLibrary_SCL_Pure_SetSafeTransformWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeTransformWithKey, ReturnValue) == 0x0001B0, "Member 'SCLibrary_SCL_Pure_SetSafeTransformWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeVector2D final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeVector2D");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeVector2D) == 0x000068, "Wrong size on SCLibrary_SCL_Pure_SetSafeVector2D");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2D, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeVector2D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2D, Value) == 0x000058, "Member 'SCLibrary_SCL_Pure_SetSafeVector2D::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCL_Pure_SetSafeVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeVector2DWithKey
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeVector2DWithKey final
{
public:
	struct FSafeVector2D                          SV;                                                // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0068(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeVector2DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeVector2DWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeVector2DWithKey) == 0x000078, "Wrong size on SCLibrary_SCL_Pure_SetSafeVector2DWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeVector2DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2DWithKey, Key) == 0x000058, "Member 'SCLibrary_SCL_Pure_SetSafeVector2DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2DWithKey, Value) == 0x000068, "Member 'SCLibrary_SCL_Pure_SetSafeVector2DWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector2DWithKey, ReturnValue) == 0x000070, "Member 'SCLibrary_SCL_Pure_SetSafeVector2DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeVector3D
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeVector3D final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0078(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeVector3D");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeVector3D) == 0x000090, "Wrong size on SCLibrary_SCL_Pure_SetSafeVector3D");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3D, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeVector3D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3D, Value) == 0x000078, "Member 'SCLibrary_SCL_Pure_SetSafeVector3D::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCL_Pure_SetSafeVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeVector3DWithKey
// 0x00A0 (0x00A0 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeVector3DWithKey final
{
public:
	struct FSafeVector3D                          SV;                                                // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0094(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeVector3DWithKey) == 0x000008, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeVector3DWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeVector3DWithKey) == 0x0000A0, "Wrong size on SCLibrary_SCL_Pure_SetSafeVector3DWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeVector3DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3DWithKey, Key) == 0x000078, "Member 'SCLibrary_SCL_Pure_SetSafeVector3DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3DWithKey, Value) == 0x000088, "Member 'SCLibrary_SCL_Pure_SetSafeVector3DWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector3DWithKey, ReturnValue) == 0x000094, "Member 'SCLibrary_SCL_Pure_SetSafeVector3DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeVector4D final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Value;                                             // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeVector4D");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCL_Pure_SetSafeVector4D");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4D, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeVector4D::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4D, Value) == 0x0000A0, "Member 'SCLibrary_SCL_Pure_SetSafeVector4D::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCL_Pure_SetSafeVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCL_Pure_SetSafeVector4DWithKey
// 0x00D0 (0x00D0 - 0x0000)
struct SCLibrary_SCL_Pure_SetSafeVector4DWithKey final
{
public:
	struct FSafeVector4D                          SV;                                                // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Value;                                             // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCL_Pure_SetSafeVector4DWithKey) == 0x000010, "Wrong alignment on SCLibrary_SCL_Pure_SetSafeVector4DWithKey");
static_assert(sizeof(SCLibrary_SCL_Pure_SetSafeVector4DWithKey) == 0x0000D0, "Wrong size on SCLibrary_SCL_Pure_SetSafeVector4DWithKey");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4DWithKey, SV) == 0x000000, "Member 'SCLibrary_SCL_Pure_SetSafeVector4DWithKey::SV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4DWithKey, Key) == 0x000098, "Member 'SCLibrary_SCL_Pure_SetSafeVector4DWithKey::Key' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4DWithKey, Value) == 0x0000B0, "Member 'SCLibrary_SCL_Pure_SetSafeVector4DWithKey::Value' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCL_Pure_SetSafeVector4DWithKey, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCL_Pure_SetSafeVector4DWithKey::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetBoolAndFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetBoolAndFSB final
{
public:
	bool                                          NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetBoolAndFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetBoolAndFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetBoolAndFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetBoolAndFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolAndFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetBoolAndFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolAndFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetBoolAndFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolAndFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetBoolAndFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetBoolEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetBoolEqualFSB final
{
public:
	bool                                          NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetBoolEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetBoolEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetBoolEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetBoolEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetBoolEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetBoolEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetBoolEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetBoolNotEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetBoolNotEqualFSB final
{
public:
	bool                                          NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetBoolNotEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetBoolNotEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetBoolNotEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetBoolNotEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolNotEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetBoolNotEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolNotEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetBoolNotEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolNotEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetBoolNotEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetBoolOrFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetBoolOrFSB final
{
public:
	bool                                          NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetBoolOrFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetBoolOrFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetBoolOrFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetBoolOrFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolOrFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetBoolOrFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolOrFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetBoolOrFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBoolOrFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetBoolOrFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteAndFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteAndFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteAndFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteAndFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteAndFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteAndFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteAndFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteAndFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteAndFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteAndFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteAndFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteAndFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteDivideFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteDivideFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteDivideFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteDivideFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteDivideFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteDivideFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteDivideFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteDivideFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteDivideFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteDivideFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteDivideFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteDivideFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteEqualFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteGreaterEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteGreaterEqualFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteGreaterEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteGreaterEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteGreaterEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteGreaterEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteGreaterEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteGreaterEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteGreaterEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteGreaterEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteGreaterEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteGreaterEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteGreaterFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteGreaterFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteGreaterFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteGreaterFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteGreaterFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteGreaterFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteGreaterFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteGreaterFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteGreaterFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteGreaterFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteGreaterFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteGreaterFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteMinusFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteMinusFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteMinusFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteMinusFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteMinusFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteMinusFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteMinusFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteMinusFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteMinusFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteMinusFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteMinusFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteMinusFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteModFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteModFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteModFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteModFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteModFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteModFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteModFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteModFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteModFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteModFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteModFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteModFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteNotEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteNotEqualFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteNotEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteNotEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteNotEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteNotEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteNotEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteNotEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteNotEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteNotEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteNotEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteNotEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteOrFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteOrFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteOrFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteOrFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteOrFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteOrFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteOrFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteOrFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteOrFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteOrFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteOrFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteOrFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetBytePlusFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetBytePlusFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetBytePlusFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetBytePlusFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetBytePlusFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetBytePlusFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBytePlusFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetBytePlusFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBytePlusFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetBytePlusFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetBytePlusFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetBytePlusFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteShiftLFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteShiftLFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteShiftLFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteShiftLFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteShiftLFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteShiftLFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteShiftLFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteShiftLFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteShiftLFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteShiftLFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteShiftLFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteShiftLFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteShiftRFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteShiftRFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteShiftRFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteShiftRFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteShiftRFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteShiftRFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteShiftRFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteShiftRFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteShiftRFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteShiftRFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteShiftRFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteShiftRFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteSmallerEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteSmallerEqualFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteSmallerEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteSmallerEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteSmallerEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteSmallerEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteSmallerEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteSmallerEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteSmallerEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteSmallerEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteSmallerEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteSmallerEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteSmallerFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteSmallerFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteSmallerFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteSmallerFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteSmallerFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteSmallerFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteSmallerFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteSmallerFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteSmallerFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteSmallerFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteSmallerFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteSmallerFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteTimesFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteTimesFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteTimesFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteTimesFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteTimesFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteTimesFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteTimesFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteTimesFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteTimesFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteTimesFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteTimesFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteTimesFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetByteXorFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetByteXorFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetByteXorFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetByteXorFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetByteXorFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetByteXorFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteXorFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetByteXorFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteXorFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetByteXorFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetByteXorFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetByteXorFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetColorEqualFSC
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetColorEqualFSC final
{
public:
	struct FLinearColor                           NC;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             FSC;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetColorEqualFSC) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetColorEqualFSC");
static_assert(sizeof(SCLibrary_SCO_Pure_GetColorEqualFSC) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetColorEqualFSC");
static_assert(offsetof(SCLibrary_SCO_Pure_GetColorEqualFSC, NC) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetColorEqualFSC::NC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetColorEqualFSC, FSC) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetColorEqualFSC::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetColorEqualFSC, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetColorEqualFSC::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetColorNotEqualFSC
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetColorNotEqualFSC final
{
public:
	struct FLinearColor                           NC;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             FSC;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetColorNotEqualFSC) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetColorNotEqualFSC");
static_assert(sizeof(SCLibrary_SCO_Pure_GetColorNotEqualFSC) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetColorNotEqualFSC");
static_assert(offsetof(SCLibrary_SCO_Pure_GetColorNotEqualFSC, NC) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetColorNotEqualFSC::NC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetColorNotEqualFSC, FSC) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetColorNotEqualFSC::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetColorNotEqualFSC, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetColorNotEqualFSC::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatDivideFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatDivideFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatDivideFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatDivideFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatDivideFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatDivideFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatDivideFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatDivideFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatDivideFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatDivideFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatDivideFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatDivideFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatEqualFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatEqualFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatEqualFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatEqualFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatEqualFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatEqualFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatEqualFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatGreaterEqualFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatGreaterEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatGreaterFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatGreaterFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatGreaterFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatGreaterFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatGreaterFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatGreaterFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatGreaterFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatGreaterFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatGreaterFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatGreaterFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatGreaterFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatGreaterFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatMinusFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatMinusFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatMinusFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatMinusFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatMinusFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatMinusFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatMinusFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatMinusFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatMinusFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatMinusFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatMinusFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatMinusFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatModFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatModFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatModFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatModFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatModFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatModFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatModFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatModFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatModFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatModFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatModFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatModFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatNotEqualFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatNotEqualFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatNotEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatNotEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatNotEqualFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatNotEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatNotEqualFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatNotEqualFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatNotEqualFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatNotEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatNotEqualFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatNotEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatPlusFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatPlusFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatPlusFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatPlusFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatPlusFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatPlusFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatPlusFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatPlusFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatPlusFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatPlusFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatPlusFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatPlusFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatSmallerEqualFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatSmallerEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatSmallerFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatSmallerFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatSmallerFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatSmallerFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatSmallerFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatSmallerFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatSmallerFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatSmallerFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatSmallerFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatSmallerFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatSmallerFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatSmallerFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetFloatTimesFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetFloatTimesFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetFloatTimesFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetFloatTimesFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetFloatTimesFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetFloatTimesFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatTimesFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetFloatTimesFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatTimesFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetFloatTimesFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetFloatTimesFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetFloatTimesFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntAndFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntAndFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntAndFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntAndFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntAndFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntAndFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntAndFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntAndFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntAndFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntAndFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntAndFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntAndFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntDivideFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntDivideFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntDivideFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntDivideFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntDivideFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntDivideFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntDivideFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntDivideFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntDivideFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntDivideFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntDivideFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntDivideFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntEqualFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntEqualFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntEqualFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntEqualFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntEqualFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntEqualFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntEqualFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntGreaterEqualFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntGreaterEqualFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntGreaterEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntGreaterEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntGreaterEqualFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntGreaterEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntGreaterEqualFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntGreaterEqualFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntGreaterEqualFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntGreaterEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntGreaterEqualFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntGreaterEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntGreaterFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntGreaterFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntGreaterFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntGreaterFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntGreaterFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntGreaterFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntGreaterFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntGreaterFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntGreaterFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntGreaterFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntGreaterFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntGreaterFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntMinusFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntMinusFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntMinusFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntMinusFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntMinusFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntMinusFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntMinusFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntMinusFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntMinusFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntMinusFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntMinusFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntMinusFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntModFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntModFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntModFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntModFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntModFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntModFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntModFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntModFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntModFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntModFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntModFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntModFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntNotEqualFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntNotEqualFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntNotEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntNotEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntNotEqualFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntNotEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntNotEqualFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntNotEqualFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntNotEqualFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntNotEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntNotEqualFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntNotEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntOrFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntOrFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntOrFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntOrFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntOrFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntOrFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntOrFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntOrFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntOrFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntOrFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntOrFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntOrFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntPlusFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntPlusFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntPlusFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntPlusFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntPlusFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntPlusFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntPlusFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntPlusFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntPlusFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntPlusFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntPlusFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntPlusFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntShiftLFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntShiftLFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntShiftLFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntShiftLFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntShiftLFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntShiftLFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntShiftLFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntShiftLFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntShiftLFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntShiftLFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntShiftLFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntShiftLFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntShiftRFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntShiftRFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntShiftRFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntShiftRFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntShiftRFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntShiftRFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntShiftRFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntShiftRFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntShiftRFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntShiftRFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntShiftRFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntShiftRFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntSmallerEqualFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntSmallerEqualFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntSmallerEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntSmallerEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntSmallerEqualFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntSmallerEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntSmallerEqualFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntSmallerEqualFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntSmallerEqualFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntSmallerEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntSmallerEqualFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntSmallerEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntSmallerFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntSmallerFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntSmallerFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntSmallerFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntSmallerFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntSmallerFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntSmallerFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntSmallerFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntSmallerFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntSmallerFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntSmallerFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntSmallerFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntTimesFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntTimesFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntTimesFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntTimesFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntTimesFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntTimesFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntTimesFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntTimesFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntTimesFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntTimesFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntTimesFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntTimesFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetIntXorFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetIntXorFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetIntXorFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetIntXorFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetIntXorFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetIntXorFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntXorFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetIntXorFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntXorFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetIntXorFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetIntXorFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetIntXorFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetNameEqualFSN
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetNameEqualFSN final
{
public:
	class FName                                   NN;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              FSN;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetNameEqualFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetNameEqualFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetNameEqualFSN) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetNameEqualFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameEqualFSN, NN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetNameEqualFSN::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameEqualFSN, FSN) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetNameEqualFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameEqualFSN, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetNameEqualFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetNameGreaterFSN
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetNameGreaterFSN final
{
public:
	class FName                                   NN;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              FSN;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetNameGreaterFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetNameGreaterFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetNameGreaterFSN) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetNameGreaterFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameGreaterFSN, NN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetNameGreaterFSN::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameGreaterFSN, FSN) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetNameGreaterFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameGreaterFSN, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetNameGreaterFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetNameNotEqualFSN
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetNameNotEqualFSN final
{
public:
	class FName                                   NN;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              FSN;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetNameNotEqualFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetNameNotEqualFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetNameNotEqualFSN) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetNameNotEqualFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameNotEqualFSN, NN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetNameNotEqualFSN::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameNotEqualFSN, FSN) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetNameNotEqualFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameNotEqualFSN, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetNameNotEqualFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetNamePlusFSN
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetNamePlusFSN final
{
public:
	class FName                                   NN;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              FSN;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetNamePlusFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetNamePlusFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetNamePlusFSN) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetNamePlusFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNamePlusFSN, NN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetNamePlusFSN::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNamePlusFSN, FSN) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetNamePlusFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNamePlusFSN, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetNamePlusFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetNameSmallerFSN
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetNameSmallerFSN final
{
public:
	class FName                                   NN;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              FSN;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetNameSmallerFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetNameSmallerFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetNameSmallerFSN) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetNameSmallerFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameSmallerFSN, NN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetNameSmallerFSN::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameSmallerFSN, FSN) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetNameSmallerFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetNameSmallerFSN, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetNameSmallerFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorDivideFSR
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorDivideFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorDivideFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorDivideFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorDivideFSR) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetRotatorDivideFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorDivideFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorDivideFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorDivideFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorDivideFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorDivideFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorDivideFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorEqualFSR
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorEqualFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorEqualFSR) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetRotatorEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorEqualFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorEqualFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorEqualFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorEqualFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorGreaterEqualFSR
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorGreaterFSR
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorGreaterFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorGreaterFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorGreaterFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorGreaterFSR) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetRotatorGreaterFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorGreaterFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorGreaterFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorGreaterFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorGreaterFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorGreaterFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorGreaterFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorMinusFSR
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorMinusFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorMinusFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorMinusFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorMinusFSR) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetRotatorMinusFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorMinusFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorMinusFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorMinusFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorMinusFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorMinusFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorMinusFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorModFSR
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorModFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorModFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorModFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorModFSR) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetRotatorModFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorModFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorModFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorModFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorModFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorModFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorModFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorNotEqualFSR
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorNotEqualFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorNotEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorNotEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorNotEqualFSR) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetRotatorNotEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorNotEqualFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorNotEqualFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorNotEqualFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorNotEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorNotEqualFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorNotEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorPlusFSR
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorPlusFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorPlusFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorPlusFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorPlusFSR) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetRotatorPlusFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorPlusFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorPlusFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorPlusFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorPlusFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorPlusFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorPlusFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorSmallerEqualFSR
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorSmallerFSR
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorSmallerFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorSmallerFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorSmallerFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorSmallerFSR) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetRotatorSmallerFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorSmallerFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorSmallerFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorSmallerFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorSmallerFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorSmallerFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorSmallerFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetRotatorTimesFSR
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetRotatorTimesFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetRotatorTimesFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetRotatorTimesFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetRotatorTimesFSR) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetRotatorTimesFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorTimesFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetRotatorTimesFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorTimesFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetRotatorTimesFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetRotatorTimesFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetRotatorTimesFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolAndBool
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolAndBool final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolAndBool) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolAndBool");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolAndBool) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolAndBool");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndBool, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndBool::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndBool, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndBool::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndBool, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndBool::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndBool, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolAndFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolAndFSB final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeBool                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolAndFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolAndFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolAndFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolAndFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolAndFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeBoolAndFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolEqualBool
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolEqualBool final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolEqualBool) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolEqualBool");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolEqualBool) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolEqualBool");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualBool, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualBool::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualBool, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualBool::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualBool, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualBool::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualBool, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolEqualFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolEqualFSB final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeBool                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolEqualFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolEqualFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeBoolEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolNotEqualBool
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolNotEqualFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeBool                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolOrBool
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolOrBool final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolOrBool) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolOrBool");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolOrBool) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolOrBool");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrBool, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrBool::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrBool, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrBool::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrBool, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrBool::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrBool, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBoolOrFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBoolOrFSB final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeBool                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBoolOrFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBoolOrFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBoolOrFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeBoolOrFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBoolOrFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeBoolOrFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteAndByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteAndByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteAndByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteAndByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteAndByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteAndByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteAndFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteAndFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteAndFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteAndFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteAndFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteAndFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteAndFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteAndFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteDecreaseFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteDecreaseFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteDivideByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteDivideByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteDivideByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteDivideByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteDivideByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteDivideByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteDivideFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteDivideFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteDivideFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteDivideFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteDivideFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteDivideFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteDivideFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteDivideFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteEqualByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteEqualByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteEqualByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteEqualFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteEqualFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteEqualFSB, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteGreaterByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteGreaterByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteGreaterByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteGreaterByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteGreaterByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteGreaterByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteGreaterEqualByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteGreaterEqualFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteGreaterFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteGreaterFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteGreaterFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteGreaterFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteGreaterFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteGreaterFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteGreaterFSB, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteGreaterFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteIncreaseFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteIncreaseFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteMinusByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteMinusByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteMinusByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteMinusByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteMinusByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteMinusByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteMinusEqualByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteMinusEqualFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteMinusFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteMinusFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteMinusFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteMinusFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteMinusFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteMinusFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteMinusFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteMinusFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteModByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteModByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteModByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteModByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteModByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteModByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteModByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteModByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteModByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteModByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteModFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteModFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteModFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteModFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteModFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteModFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteModFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteModFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteModFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteModFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteModFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteNotByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteNotByte final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteNotByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteNotByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteNotByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteNotByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotByte, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotByte, Output) == 0x000001, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotByte, ReturnValue) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteNotEqualByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteNotEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteNotEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteNotEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteNotEqualByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteNotEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotEqualByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteNotEqualFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteNotFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteNotFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteNotFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteNotFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteNotFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteNotFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotFSB, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteNotFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteNotFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteOrByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteOrByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteOrByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteOrByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteOrByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteOrByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteOrFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteOrFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteOrFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteOrFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteOrFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteOrFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteOrFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteOrFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBytePlusByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBytePlusByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBytePlusByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBytePlusByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBytePlusByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeBytePlusByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBytePlusEqualByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBytePlusEqualFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeBytePlusFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeBytePlusFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeBytePlusFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeBytePlusFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeBytePlusFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeBytePlusFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeBytePlusFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeBytePlusFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteShiftLByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteShiftLByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteShiftLByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteShiftLByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteShiftLByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteShiftLByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteShiftLFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteShiftLFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteShiftLFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteShiftLFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteShiftLFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteShiftLFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftLFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftLFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteShiftRByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteShiftRByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteShiftRByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteShiftRByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteShiftRByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteShiftRByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteShiftRFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteShiftRFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteShiftRFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteShiftRFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteShiftRFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteShiftRFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteShiftRFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteShiftRFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteSmallerByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteSmallerByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteSmallerByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteSmallerByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteSmallerByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteSmallerByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteSmallerEqualByte
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte, ReturnValue) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteSmallerEqualFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteSmallerFSB
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteSmallerFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteSmallerFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteSmallerFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteSmallerFSB) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteSmallerFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteSmallerFSB, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteSmallerFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteTimesByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteTimesByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteTimesByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteTimesByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteTimesByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteTimesByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteTimesFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteTimesFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteTimesFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteTimesFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteTimesFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteTimesFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteTimesFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteTimesFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteXorByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteXorByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteXorByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteXorByte");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteXorByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteXorByte");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeByteXorFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeByteXorFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeByteXorFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeByteXorFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeByteXorFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeByteXorFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeByteXorFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeByteXorFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeColorEqualColor
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeColorEqualColor final
{
public:
	struct FSafeColor                             FSC;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NC;                                                // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeColorEqualColor) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeColorEqualColor");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeColorEqualColor) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeColorEqualColor");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorEqualColor, FSC) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeColorEqualColor::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorEqualColor, NC) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeColorEqualColor::NC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorEqualColor, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetSafeColorEqualColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeColorEqualFSC
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeColorEqualFSC final
{
public:
	struct FSafeColor                             FSC;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             SSC;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeColorEqualFSC) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeColorEqualFSC");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeColorEqualFSC) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeColorEqualFSC");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorEqualFSC, FSC) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeColorEqualFSC::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorEqualFSC, SSC) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeColorEqualFSC::SSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorEqualFSC, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeColorEqualFSC::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeColorNotEqualColor
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeColorNotEqualColor final
{
public:
	struct FSafeColor                             FSC;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NC;                                                // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeColorNotEqualColor) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeColorNotEqualColor");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeColorNotEqualColor) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeColorNotEqualColor");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorNotEqualColor, FSC) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeColorNotEqualColor::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorNotEqualColor, NC) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeColorNotEqualColor::NC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorNotEqualColor, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetSafeColorNotEqualColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeColorNotEqualFSC
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC final
{
public:
	struct FSafeColor                             FSC;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             SSC;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC, FSC) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC, SSC) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC::SSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeColorNotEqualFSC::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatDecreaseFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatDivideFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatDivideFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatDivideFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatDivideFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatDivideFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatDivideFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatDivideFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatDivideFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatDivideFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatDivideFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatDivideFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatDivideFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatDivideFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatDivideFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatEqualFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatEqualFloat) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatEqualFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatEqualFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatEqualFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatEqualFSF, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatGreaterEqualFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatGreaterEqualFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatGreaterFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatGreaterFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatGreaterFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatIncreaseFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatMinusEqualFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatMinusEqualFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatMinusFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatMinusFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatMinusFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatMinusFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatMinusFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatMinusFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatMinusFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatMinusFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatMinusFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatMinusFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatMinusFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatMinusFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatMinusFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatMinusFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatModFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatModFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatModFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatModFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatModFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatModFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatModFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatModFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatModFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatModFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatModFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatModFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatModFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatModFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatNotEqualFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatNotEqualFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatPlusEqualFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatPlusEqualFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatPlusFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatPlusFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatPlusFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatPlusFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatPlusFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatPlusFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatPlusFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatPlusFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatPlusFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatPlusFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatPlusFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatPlusFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatPlusFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatPlusFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatSmallerEqualFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatSmallerEqualFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatSmallerFloat
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatSmallerFSF
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatSmallerFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatTimesFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatTimesFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatTimesFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatTimesFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatTimesFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatTimesFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeFloatTimesFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeFloatTimesFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeFloatTimesFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeFloatTimesFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeFloatTimesFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeFloatTimesFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeFloatTimesFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeFloatTimesFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntAndFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntAndFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntAndFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntAndFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntAndFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntAndFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntAndInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntAndInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntAndInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntAndInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntAndInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntAndInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntAndInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntAndInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntDecreaseFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntDecreaseFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntDivideFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntDivideFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntDivideFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntDivideFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntDivideFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntDivideFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntDivideInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntDivideInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntDivideInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntDivideInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntDivideInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntDivideInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntDivideInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntDivideInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntEqualFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntEqualFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntEqualFSI, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntEqualInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntEqualInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntEqualInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntGreaterEqualFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntGreaterEqualInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntGreaterFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntGreaterFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntGreaterFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntGreaterFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntGreaterFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntGreaterFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterFSI, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntGreaterInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntGreaterInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntGreaterInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntGreaterInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntGreaterInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntGreaterInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntGreaterInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntGreaterInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntIncreaseFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntIncreaseFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntMinusEqualFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntMinusEqualInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntMinusFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntMinusFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntMinusFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntMinusFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntMinusFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntMinusFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntMinusInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntMinusInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntMinusInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntMinusInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntMinusInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntMinusInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntMinusInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntMinusInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntModFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntModFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntModFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntModFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntModFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntModFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntModFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntModFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntModFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntModFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntModInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntModInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntModInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntModInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntModInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntModInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntModInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntModInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntModInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntModInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntModInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntNotEqualFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntNotEqualInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntNotEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntNotEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntNotEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntNotEqualInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntNotEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotEqualInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntNotFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntNotFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntNotFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntNotFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntNotFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntNotFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotFSI, Output) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntNotInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntNotInt final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntNotInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntNotInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntNotInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntNotInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotInt, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotInt, Output) == 0x000004, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntNotInt, ReturnValue) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetSafeIntNotInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntOrFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntOrFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntOrFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntOrFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntOrFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntOrFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntOrInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntOrInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntOrInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntOrInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntOrInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntOrInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntOrInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntOrInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntPlusEqualFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntPlusEqualInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntPlusFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntPlusFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntPlusFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntPlusFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntPlusFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntPlusFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntPlusInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntPlusInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntPlusInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntPlusInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntPlusInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntPlusInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntPlusInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntPlusInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntShiftLFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntShiftLFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntShiftLFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntShiftLFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntShiftLFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntShiftLFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntShiftLInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntShiftLInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntShiftLInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntShiftLInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntShiftLInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntShiftLInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftLInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftLInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntShiftRFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntShiftRFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntShiftRFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntShiftRFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntShiftRFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntShiftRFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntShiftRInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntShiftRInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntShiftRInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntShiftRInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntShiftRInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntShiftRInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntShiftRInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntShiftRInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntSmallerEqualFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntSmallerEqualInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntSmallerFSI
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntSmallerFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntSmallerFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntSmallerFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntSmallerFSI) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntSmallerFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerFSI, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntSmallerInt
// 0x0040 (0x0040 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntSmallerInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntSmallerInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntSmallerInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntSmallerInt) == 0x000040, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntSmallerInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntSmallerInt, ReturnValue) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntSmallerInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntTimesFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntTimesFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntTimesFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntTimesFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntTimesFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntTimesFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntTimesInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntTimesInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntTimesInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntTimesInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntTimesInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntTimesInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntTimesInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntTimesInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntXorFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntXorFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntXorFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntXorFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntXorFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntXorFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeIntXorInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeIntXorInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeIntXorInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeIntXorInt");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeIntXorInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeIntXorInt");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeIntXorInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeIntXorInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameEqualFSN
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameEqualFSN final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              SSN;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameEqualFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameEqualFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameEqualFSN) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameEqualFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameEqualFSN, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameEqualFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameEqualFSN, SSN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameEqualFSN::SSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameEqualFSN, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeNameEqualFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameEqualName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameEqualName final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NN;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameEqualName) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameEqualName");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameEqualName) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameEqualName");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameEqualName, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameEqualName::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameEqualName, NN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameEqualName::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameEqualName, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeNameEqualName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameGreaterFSN
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameGreaterFSN final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              SSN;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameGreaterFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameGreaterFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameGreaterFSN) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameGreaterFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameGreaterFSN, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameGreaterFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameGreaterFSN, SSN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameGreaterFSN::SSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameGreaterFSN, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeNameGreaterFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameGreaterName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameGreaterName final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NN;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameGreaterName) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameGreaterName");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameGreaterName) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameGreaterName");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameGreaterName, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameGreaterName::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameGreaterName, NN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameGreaterName::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameGreaterName, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeNameGreaterName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameNotEqualFSN
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              SSN;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN, SSN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN::SSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeNameNotEqualFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameNotEqualName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameNotEqualName final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NN;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameNotEqualName) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameNotEqualName");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameNotEqualName) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameNotEqualName");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameNotEqualName, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameNotEqualName::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameNotEqualName, NN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameNotEqualName::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameNotEqualName, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeNameNotEqualName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNamePlusFSN
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNamePlusFSN final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              SSN;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Output;                                            // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNamePlusFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNamePlusFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNamePlusFSN) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeNamePlusFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusFSN, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusFSN, SSN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusFSN::SSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusFSN, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusFSN::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusFSN, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNamePlusName
// 0x0080 (0x0080 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNamePlusName final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NN;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Output;                                            // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              ReturnValue;                                       // 0x0048(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNamePlusName) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNamePlusName");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNamePlusName) == 0x000080, "Wrong size on SCLibrary_SCO_Pure_GetSafeNamePlusName");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusName, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusName::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusName, NN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusName::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusName, Output) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusName::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNamePlusName, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetSafeNamePlusName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameSmallerFSN
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameSmallerFSN final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              SSN;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameSmallerFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameSmallerFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameSmallerFSN) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameSmallerFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameSmallerFSN, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameSmallerFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameSmallerFSN, SSN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameSmallerFSN::SSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameSmallerFSN, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeNameSmallerFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeNameSmallerName
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeNameSmallerName final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NN;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeNameSmallerName) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeNameSmallerName");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeNameSmallerName) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_GetSafeNameSmallerName");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameSmallerName, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeNameSmallerName::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameSmallerName, NN) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeNameSmallerName::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeNameSmallerName, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_GetSafeNameSmallerName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorDivideFSR
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorDivideRotator
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeRotator                           ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorDivideRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorEqualFSR
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorEqualRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorEqualRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorGreaterEqualFSR
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorGreaterEqualRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorGreaterFSR
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorGreaterRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorMinusFSR
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorMinusRotator
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeRotator                           ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorMinusRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorModFSR
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorModFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorModFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorModFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorModFSR) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorModFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModFSR, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModFSR::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModFSR, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorModRotator
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorModRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeRotator                           ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorModRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorModRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorModRotator) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorModRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModRotator, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModRotator::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorModRotator, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorModRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorNotEqualFSR
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorNotEqualRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorPlusFSR
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorPlusRotator
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeRotator                           ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorPlusRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorSmallerEqualFSR
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorSmallerEqualRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorSmallerFSR
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorSmallerRotator
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorTimesFSR
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeRotatorTimesRotator
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeRotator                           ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeRotatorTimesRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringEqualFSS
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringEqualFSS final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            SS;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringEqualFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringEqualFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringEqualFSS) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringEqualFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringEqualFSS, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringEqualFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringEqualFSS, SS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringEqualFSS::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringEqualFSS, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeStringEqualFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringEqualString
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringEqualString final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NS;                                                // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringEqualString) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringEqualString");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringEqualString) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringEqualString");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringEqualString, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringEqualString::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringEqualString, NS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringEqualString::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringEqualString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetSafeStringEqualString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringGreaterFSS
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringGreaterFSS final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            SS;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringGreaterFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringGreaterFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringGreaterFSS) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringGreaterFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringGreaterFSS, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringGreaterFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringGreaterFSS, SS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringGreaterFSS::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringGreaterFSS, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeStringGreaterFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringGreaterString
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringGreaterString final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NS;                                                // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringGreaterString) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringGreaterString");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringGreaterString) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringGreaterString");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringGreaterString, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringGreaterString::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringGreaterString, NS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringGreaterString::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringGreaterString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetSafeStringGreaterString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringNotEqualFSS
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            SS;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS, SS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeStringNotEqualFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringNotEqualString
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringNotEqualString final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NS;                                                // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringNotEqualString) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringNotEqualString");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringNotEqualString) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringNotEqualString");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringNotEqualString, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringNotEqualString::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringNotEqualString, NS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringNotEqualString::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringNotEqualString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetSafeStringNotEqualString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringPlusFSS
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringPlusFSS final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            SS;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Output;                                            // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            ReturnValue;                                       // 0x0080(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringPlusFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringPlusFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringPlusFSS) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringPlusFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusFSS, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusFSS, SS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusFSS::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusFSS, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusFSS::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusFSS, ReturnValue) == 0x000080, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringPlusString
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringPlusString final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NS;                                                // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Output;                                            // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            ReturnValue;                                       // 0x0058(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringPlusString) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringPlusString");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringPlusString) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringPlusString");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusString, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusString::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusString, NS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusString::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusString, Output) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusString::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringPlusString, ReturnValue) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeStringPlusString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringSmallerFSS
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringSmallerFSS final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            SS;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringSmallerFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringSmallerFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringSmallerFSS) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringSmallerFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringSmallerFSS, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringSmallerFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringSmallerFSS, SS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringSmallerFSS::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringSmallerFSS, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeStringSmallerFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeStringSmallerString
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeStringSmallerString final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NS;                                                // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeStringSmallerString) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeStringSmallerString");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeStringSmallerString) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetSafeStringSmallerString");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringSmallerString, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeStringSmallerString::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringSmallerString, NS) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeStringSmallerString::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeStringSmallerString, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetSafeStringSmallerString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextEqualFST
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextEqualFST final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ST;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextEqualFST) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextEqualFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextEqualFST, ST) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextEqualFST::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextEqualFST, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeTextEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextEqualText
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextEqualText final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NT;                                                // 0x0038(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextEqualText) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextEqualText");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextEqualText) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextEqualText");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextEqualText, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextEqualText::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextEqualText, NT) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextEqualText::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextEqualText, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetSafeTextEqualText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextGreaterFST
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextGreaterFST final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ST;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextGreaterFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextGreaterFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextGreaterFST) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextGreaterFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextGreaterFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextGreaterFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextGreaterFST, ST) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextGreaterFST::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextGreaterFST, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeTextGreaterFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextGreaterText
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextGreaterText final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NT;                                                // 0x0038(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextGreaterText) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextGreaterText");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextGreaterText) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextGreaterText");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextGreaterText, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextGreaterText::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextGreaterText, NT) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextGreaterText::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextGreaterText, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetSafeTextGreaterText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextNotEqualFST
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextNotEqualFST final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ST;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextNotEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextNotEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextNotEqualFST) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextNotEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextNotEqualFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextNotEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextNotEqualFST, ST) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextNotEqualFST::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextNotEqualFST, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeTextNotEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextNotEqualText
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextNotEqualText final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NT;                                                // 0x0038(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextNotEqualText) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextNotEqualText");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextNotEqualText) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextNotEqualText");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextNotEqualText, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextNotEqualText::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextNotEqualText, NT) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextNotEqualText::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextNotEqualText, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetSafeTextNotEqualText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextPlusFST
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextPlusFST final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ST;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Output;                                            // 0x0070(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ReturnValue;                                       // 0x0088(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextPlusFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextPlusFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextPlusFST) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextPlusFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusFST, ST) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusFST::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusFST, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusFST::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusFST, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextPlusText
// 0x00A0 (0x00A0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextPlusText final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NT;                                                // 0x0038(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Output;                                            // 0x0050(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ReturnValue;                                       // 0x0068(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextPlusText) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextPlusText");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextPlusText) == 0x0000A0, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextPlusText");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusText, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusText::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusText, NT) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusText::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusText, Output) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusText::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextPlusText, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_GetSafeTextPlusText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextSmallerFST
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextSmallerFST final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ST;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextSmallerFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextSmallerFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextSmallerFST) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextSmallerFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextSmallerFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextSmallerFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextSmallerFST, ST) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextSmallerFST::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextSmallerFST, ReturnValue) == 0x000070, "Member 'SCLibrary_SCO_Pure_GetSafeTextSmallerFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTextSmallerText
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTextSmallerText final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NT;                                                // 0x0038(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTextSmallerText) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTextSmallerText");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTextSmallerText) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetSafeTextSmallerText");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextSmallerText, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTextSmallerText::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextSmallerText, NT) == 0x000038, "Member 'SCLibrary_SCO_Pure_GetSafeTextSmallerText::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTextSmallerText, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetSafeTextSmallerText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTransformEqualFST
// 0x02D8 (0x02D8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTransformEqualFST final
{
public:
	struct FSafeTransform                         FST;                                               // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeTransform                         SST;                                               // 0x0168(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTransformEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTransformEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTransformEqualFST) == 0x0002D8, "Wrong size on SCLibrary_SCO_Pure_GetSafeTransformEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformEqualFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTransformEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformEqualFST, SST) == 0x000168, "Member 'SCLibrary_SCO_Pure_GetSafeTransformEqualFST::SST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformEqualFST, ReturnValue) == 0x0002D0, "Member 'SCLibrary_SCO_Pure_GetSafeTransformEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTransformEqualTransform
// 0x01B0 (0x01B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTransformEqualTransform final
{
public:
	struct FSafeTransform                         FST;                                               // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NT;                                                // 0x0170(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTransformEqualTransform) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTransformEqualTransform");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTransformEqualTransform) == 0x0001B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeTransformEqualTransform");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformEqualTransform, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTransformEqualTransform::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformEqualTransform, NT) == 0x000170, "Member 'SCLibrary_SCO_Pure_GetSafeTransformEqualTransform::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformEqualTransform, ReturnValue) == 0x0001A0, "Member 'SCLibrary_SCO_Pure_GetSafeTransformEqualTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTransformNotEqualFST
// 0x02D8 (0x02D8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST final
{
public:
	struct FSafeTransform                         FST;                                               // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeTransform                         SST;                                               // 0x0168(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST) == 0x0002D8, "Wrong size on SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST, SST) == 0x000168, "Member 'SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST::SST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST, ReturnValue) == 0x0002D0, "Member 'SCLibrary_SCO_Pure_GetSafeTransformNotEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeTransformNotEqualTransform
// 0x01B0 (0x01B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform final
{
public:
	struct FSafeTransform                         FST;                                               // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NT;                                                // 0x0170(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform) == 0x0001B0, "Wrong size on SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform, NT) == 0x000170, "Member 'SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform, ReturnValue) == 0x0001A0, "Member 'SCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DDivideFSV
// 0x0110 (0x0110 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x00B8(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV) == 0x000110, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DDivideVector2D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D, Output) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DEqualFSV
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DEqualVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DGreaterEqualFSV
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DGreaterEqualVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DGreaterFSV
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DGreaterVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DMinusFSV
// 0x0110 (0x0110 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x00B8(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV) == 0x000110, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DMinusVector2D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D, Output) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DModFSV
// 0x0110 (0x0110 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DModFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x00B8(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DModFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DModFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DModFSV) == 0x000110, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DModFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModFSV, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModFSV, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DModVector2D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DModVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DModVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DModVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DModVector2D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DModVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModVector2D, Output) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModVector2D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DModVector2D, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DModVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DNotEqualFSV
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DNotEqualVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DPlusFSV
// 0x0110 (0x0110 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x00B8(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV) == 0x000110, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DPlusVector2D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D, Output) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DSmallerEqualFSV
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DSmallerEqualVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DSmallerFSV
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DSmallerVector2D
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DTimesFSV
// 0x0110 (0x0110 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x00B8(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV) == 0x000110, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector2DTimesVector2D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D, Output) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DDivideFSV
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DDivideVector3D
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DEqualFSV
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DEqualVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DGreaterEqualFSV
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DGreaterEqualVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DGreaterFSV
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DGreaterVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DMinusFSV
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DMinusVector3D
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DModFSV
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DModFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DModFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DModFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DModFSV) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DModFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModFSV, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModFSV, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DModVector3D
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DModVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DModVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DModVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DModVector3D) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DModVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModVector3D, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModVector3D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DModVector3D, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DModVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DNotEqualFSV
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DNotEqualVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DPlusFSV
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DPlusVector3D
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DSmallerEqualFSV
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DSmallerEqualVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DSmallerFSV
// 0x00F8 (0x00F8 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV) == 0x0000F8, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV, ReturnValue) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DSmallerVector3D
// 0x0088 (0x0088 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D) == 0x000088, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D, ReturnValue) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DTimesFSV
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector3DTimesVector3D
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DDivideFSV
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV) == 0x0001E0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DDivideVector4D
// 0x0160 (0x0160 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x00C0(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D) == 0x000160, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DEqualFSV
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DEqualVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DGreaterEqualFSV
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DGreaterEqualVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DGreaterFSV
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DGreaterVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DMinusFSV
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV) == 0x0001E0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DMinusVector4D
// 0x0160 (0x0160 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x00C0(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D) == 0x000160, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DModFSV
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DModFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DModFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DModFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DModFSV) == 0x0001E0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DModFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModFSV, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModFSV, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DModVector4D
// 0x0160 (0x0160 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DModVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x00C0(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DModVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DModVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DModVector4D) == 0x000160, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DModVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModVector4D, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModVector4D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DModVector4D, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DModVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DNotEqualFSV
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DNotEqualVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DPlusFSV
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV) == 0x0001E0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DPlusVector4D
// 0x0160 (0x0160 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x00C0(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D) == 0x000160, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DSmallerEqualFSV
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DSmallerEqualVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DSmallerFSV
// 0x0138 (0x0138 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV) == 0x000138, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV, ReturnValue) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DSmallerVector4D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DTimesFSV
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV) == 0x0001E0, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetSafeVector4DTimesVector4D
// 0x0160 (0x0160 - 0x0000)
struct SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x00C0(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D) == 0x000160, "Wrong size on SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetStringEqualFSS
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetStringEqualFSS final
{
public:
	class FString                                 NS;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            FSS;                                               // 0x0010(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetStringEqualFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetStringEqualFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetStringEqualFSS) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetStringEqualFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringEqualFSS, NS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetStringEqualFSS::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringEqualFSS, FSS) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetStringEqualFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringEqualFSS, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetStringEqualFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetStringGreaterFSS
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetStringGreaterFSS final
{
public:
	class FString                                 NS;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            FSS;                                               // 0x0010(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetStringGreaterFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetStringGreaterFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetStringGreaterFSS) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetStringGreaterFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringGreaterFSS, NS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetStringGreaterFSS::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringGreaterFSS, FSS) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetStringGreaterFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringGreaterFSS, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetStringGreaterFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetStringNotEqualFSS
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetStringNotEqualFSS final
{
public:
	class FString                                 NS;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            FSS;                                               // 0x0010(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetStringNotEqualFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetStringNotEqualFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetStringNotEqualFSS) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetStringNotEqualFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringNotEqualFSS, NS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetStringNotEqualFSS::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringNotEqualFSS, FSS) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetStringNotEqualFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringNotEqualFSS, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetStringNotEqualFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetStringPlusFSS
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetStringPlusFSS final
{
public:
	class FString                                 NS;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            FSS;                                               // 0x0010(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetStringPlusFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetStringPlusFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetStringPlusFSS) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetStringPlusFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringPlusFSS, NS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetStringPlusFSS::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringPlusFSS, FSS) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetStringPlusFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringPlusFSS, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetStringPlusFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetStringSmallerFSS
// 0x0050 (0x0050 - 0x0000)
struct SCLibrary_SCO_Pure_GetStringSmallerFSS final
{
public:
	class FString                                 NS;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            FSS;                                               // 0x0010(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetStringSmallerFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetStringSmallerFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_GetStringSmallerFSS) == 0x000050, "Wrong size on SCLibrary_SCO_Pure_GetStringSmallerFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringSmallerFSS, NS) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetStringSmallerFSS::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringSmallerFSS, FSS) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetStringSmallerFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetStringSmallerFSS, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_GetStringSmallerFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTextEqualFST
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetTextEqualFST final
{
public:
	class FText                                   NT;                                                // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              FST;                                               // 0x0018(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTextEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetTextEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTextEqualFST) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetTextEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextEqualFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTextEqualFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextEqualFST, FST) == 0x000018, "Member 'SCLibrary_SCO_Pure_GetTextEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextEqualFST, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetTextEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTextGreaterFST
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetTextGreaterFST final
{
public:
	class FText                                   NT;                                                // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              FST;                                               // 0x0018(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTextGreaterFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetTextGreaterFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTextGreaterFST) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetTextGreaterFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextGreaterFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTextGreaterFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextGreaterFST, FST) == 0x000018, "Member 'SCLibrary_SCO_Pure_GetTextGreaterFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextGreaterFST, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetTextGreaterFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTextNotEqualFST
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetTextNotEqualFST final
{
public:
	class FText                                   NT;                                                // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              FST;                                               // 0x0018(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTextNotEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetTextNotEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTextNotEqualFST) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetTextNotEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextNotEqualFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTextNotEqualFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextNotEqualFST, FST) == 0x000018, "Member 'SCLibrary_SCO_Pure_GetTextNotEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextNotEqualFST, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetTextNotEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTextPlusFST
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetTextPlusFST final
{
public:
	class FText                                   NT;                                                // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              FST;                                               // 0x0018(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTextPlusFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetTextPlusFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTextPlusFST) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetTextPlusFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextPlusFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTextPlusFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextPlusFST, FST) == 0x000018, "Member 'SCLibrary_SCO_Pure_GetTextPlusFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextPlusFST, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetTextPlusFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTextSmallerFST
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_GetTextSmallerFST final
{
public:
	class FText                                   NT;                                                // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              FST;                                               // 0x0018(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTextSmallerFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetTextSmallerFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTextSmallerFST) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_GetTextSmallerFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextSmallerFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTextSmallerFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextSmallerFST, FST) == 0x000018, "Member 'SCLibrary_SCO_Pure_GetTextSmallerFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTextSmallerFST, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_GetTextSmallerFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTransformEqualFST
// 0x01A0 (0x01A0 - 0x0000)
struct SCLibrary_SCO_Pure_GetTransformEqualFST final
{
public:
	struct FTransform                             NT;                                                // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeTransform                         FST;                                               // 0x0030(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTransformEqualFST) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetTransformEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTransformEqualFST) == 0x0001A0, "Wrong size on SCLibrary_SCO_Pure_GetTransformEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTransformEqualFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTransformEqualFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTransformEqualFST, FST) == 0x000030, "Member 'SCLibrary_SCO_Pure_GetTransformEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTransformEqualFST, ReturnValue) == 0x000198, "Member 'SCLibrary_SCO_Pure_GetTransformEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetTransformNotEqualFST
// 0x01A0 (0x01A0 - 0x0000)
struct SCLibrary_SCO_Pure_GetTransformNotEqualFST final
{
public:
	struct FTransform                             NT;                                                // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeTransform                         FST;                                               // 0x0030(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetTransformNotEqualFST) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetTransformNotEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_GetTransformNotEqualFST) == 0x0001A0, "Wrong size on SCLibrary_SCO_Pure_GetTransformNotEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTransformNotEqualFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetTransformNotEqualFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTransformNotEqualFST, FST) == 0x000030, "Member 'SCLibrary_SCO_Pure_GetTransformNotEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetTransformNotEqualFST, ReturnValue) == 0x000198, "Member 'SCLibrary_SCO_Pure_GetTransformNotEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DDivideFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DDivideFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DDivideFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DDivideFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DDivideFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DDivideFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DDivideFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DDivideFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DDivideFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DDivideFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DDivideFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DDivideFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DEqualFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DEqualFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DEqualFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DEqualFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DEqualFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DGreaterEqualFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DGreaterFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DGreaterFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DGreaterFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DGreaterFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DGreaterFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DGreaterFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DGreaterFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DGreaterFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DGreaterFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DGreaterFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DGreaterFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DGreaterFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DMinusFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DMinusFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DMinusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DMinusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DMinusFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DMinusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DMinusFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DMinusFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DMinusFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DMinusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DMinusFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DMinusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DModFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DModFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DModFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DModFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DModFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DModFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DModFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DModFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DModFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DModFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DModFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DModFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DNotEqualFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DNotEqualFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DNotEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DNotEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DNotEqualFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DNotEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DNotEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DNotEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DNotEqualFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DNotEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DNotEqualFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DNotEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DPlusFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DPlusFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DPlusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DPlusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DPlusFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DPlusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DPlusFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DPlusFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DPlusFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DPlusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DPlusFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DPlusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DSmallerEqualFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DSmallerFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DSmallerFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DSmallerFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DSmallerFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DSmallerFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DSmallerFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DSmallerFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DSmallerFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DSmallerFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DSmallerFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DSmallerFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DSmallerFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector2DTimesFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector2DTimesFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector2DTimesFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector2DTimesFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector2DTimesFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_GetVector2DTimesFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DTimesFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector2DTimesFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DTimesFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_GetVector2DTimesFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector2DTimesFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_GetVector2DTimesFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DDivideFSV
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DDivideFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DDivideFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DDivideFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DDivideFSV) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetVector3DDivideFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DDivideFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DDivideFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DDivideFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DDivideFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DDivideFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DDivideFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DEqualFSV
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DEqualFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DEqualFSV) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetVector3DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DEqualFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DGreaterEqualFSV
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DGreaterFSV
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DGreaterFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DGreaterFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DGreaterFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DGreaterFSV) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetVector3DGreaterFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DGreaterFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DGreaterFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DGreaterFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DGreaterFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DGreaterFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DGreaterFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DMinusFSV
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DMinusFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DMinusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DMinusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DMinusFSV) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetVector3DMinusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DMinusFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DMinusFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DMinusFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DMinusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DMinusFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DMinusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DModFSV
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DModFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DModFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DModFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DModFSV) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetVector3DModFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DModFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DModFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DModFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DModFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DModFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DModFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DNotEqualFSV
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DNotEqualFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DNotEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DNotEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DNotEqualFSV) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetVector3DNotEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DNotEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DNotEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DNotEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DNotEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DNotEqualFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DNotEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DPlusFSV
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DPlusFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DPlusFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DPlusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DPlusFSV) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetVector3DPlusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DPlusFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DPlusFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DPlusFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DPlusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DPlusFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DPlusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DSmallerEqualFSV
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DSmallerFSV
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DSmallerFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DSmallerFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DSmallerFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DSmallerFSV) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_GetVector3DSmallerFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DSmallerFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DSmallerFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DSmallerFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DSmallerFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DSmallerFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DSmallerFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector3DTimesFSV
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector3DTimesFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector3DTimesFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_GetVector3DTimesFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector3DTimesFSV) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_GetVector3DTimesFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DTimesFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector3DTimesFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DTimesFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector3DTimesFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector3DTimesFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_GetVector3DTimesFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DDivideFSV
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DDivideFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DDivideFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DDivideFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DDivideFSV) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DDivideFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DDivideFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DDivideFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DDivideFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DDivideFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DDivideFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetVector4DDivideFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DEqualFSV
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DEqualFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DEqualFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DEqualFSV) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DEqualFSV, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetVector4DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DGreaterEqualFSV
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DGreaterFSV
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DGreaterFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DGreaterFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DGreaterFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DGreaterFSV) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DGreaterFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DGreaterFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DGreaterFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DGreaterFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DGreaterFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DGreaterFSV, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetVector4DGreaterFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DMinusFSV
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DMinusFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DMinusFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DMinusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DMinusFSV) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DMinusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DMinusFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DMinusFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DMinusFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DMinusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DMinusFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetVector4DMinusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DModFSV
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DModFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DModFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DModFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DModFSV) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DModFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DModFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DModFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DModFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DModFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DModFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetVector4DModFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DNotEqualFSV
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DNotEqualFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DNotEqualFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DNotEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DNotEqualFSV) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DNotEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DNotEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DNotEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DNotEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DNotEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DNotEqualFSV, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetVector4DNotEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DPlusFSV
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DPlusFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DPlusFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DPlusFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DPlusFSV) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DPlusFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DPlusFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DPlusFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DPlusFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DPlusFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DPlusFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetVector4DPlusFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DSmallerEqualFSV
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DSmallerFSV
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DSmallerFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DSmallerFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DSmallerFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DSmallerFSV) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DSmallerFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DSmallerFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DSmallerFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DSmallerFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DSmallerFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DSmallerFSV, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_GetVector4DSmallerFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_GetVector4DTimesFSV
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_GetVector4DTimesFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_GetVector4DTimesFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_GetVector4DTimesFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_GetVector4DTimesFSV) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_GetVector4DTimesFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DTimesFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_GetVector4DTimesFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DTimesFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_GetVector4DTimesFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_GetVector4DTimesFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_GetVector4DTimesFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetBoolEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_SetBoolEqualFSB final
{
public:
	bool                                          NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetBoolEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetBoolEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_SetBoolEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_SetBoolEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_SetBoolEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetBoolEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetBoolEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_SetBoolEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetBoolEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetBoolEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetByteEqualFSB
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_SetByteEqualFSB final
{
public:
	uint8                                         NB;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              FSB;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetByteEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetByteEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_SetByteEqualFSB) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_SetByteEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_SetByteEqualFSB, NB) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetByteEqualFSB::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetByteEqualFSB, FSB) == 0x000008, "Member 'SCLibrary_SCO_Pure_SetByteEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetByteEqualFSB, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetByteEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetColorEqualFSC
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_SetColorEqualFSC final
{
public:
	struct FLinearColor                           NC;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             FSC;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetColorEqualFSC) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetColorEqualFSC");
static_assert(sizeof(SCLibrary_SCO_Pure_SetColorEqualFSC) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_SetColorEqualFSC");
static_assert(offsetof(SCLibrary_SCO_Pure_SetColorEqualFSC, NC) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetColorEqualFSC::NC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetColorEqualFSC, FSC) == 0x000010, "Member 'SCLibrary_SCO_Pure_SetColorEqualFSC::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetColorEqualFSC, ReturnValue) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_SetColorEqualFSC::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetFloatEqualFSF
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_SetFloatEqualFSF final
{
public:
	float                                         NF;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             FSF;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetFloatEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetFloatEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_SetFloatEqualFSF) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_SetFloatEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_SetFloatEqualFSF, NF) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetFloatEqualFSF::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetFloatEqualFSF, FSF) == 0x000008, "Member 'SCLibrary_SCO_Pure_SetFloatEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetFloatEqualFSF, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetFloatEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetIntEqualFSI
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_SetIntEqualFSI final
{
public:
	int32                                         NI;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               FSI;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetIntEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetIntEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_SetIntEqualFSI) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_SetIntEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_SetIntEqualFSI, NI) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetIntEqualFSI::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetIntEqualFSI, FSI) == 0x000008, "Member 'SCLibrary_SCO_Pure_SetIntEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetIntEqualFSI, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetIntEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetNameEqualFSN
// 0x0048 (0x0048 - 0x0000)
struct SCLibrary_SCO_Pure_SetNameEqualFSN final
{
public:
	class FName                                   NN;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              FSN;                                               // 0x0008(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetNameEqualFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetNameEqualFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_SetNameEqualFSN) == 0x000048, "Wrong size on SCLibrary_SCO_Pure_SetNameEqualFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_SetNameEqualFSN, NN) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetNameEqualFSN::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetNameEqualFSN, FSN) == 0x000008, "Member 'SCLibrary_SCO_Pure_SetNameEqualFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetNameEqualFSN, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetNameEqualFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetRotatorEqualFSR
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_SetRotatorEqualFSR final
{
public:
	struct FRotator                               NR;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           FSR;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetRotatorEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetRotatorEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_SetRotatorEqualFSR) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_SetRotatorEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_SetRotatorEqualFSR, NR) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetRotatorEqualFSR::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetRotatorEqualFSR, FSR) == 0x000010, "Member 'SCLibrary_SCO_Pure_SetRotatorEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetRotatorEqualFSR, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_SetRotatorEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeBoolEqualBool
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeBoolEqualBool final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeBoolEqualBool) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeBoolEqualBool");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeBoolEqualBool) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_SetSafeBoolEqualBool");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualBool, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualBool::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualBool, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualBool::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualBool, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualBool::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualBool, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualBool::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeBoolEqualFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeBoolEqualFSB final
{
public:
	struct FSafeBool                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeBool                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeBool                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeBoolEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeBoolEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeBoolEqualFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_SetSafeBoolEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeBoolEqualFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeBoolEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeByteEqualByte
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeByteEqualByte final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NB;                                                // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeByteEqualByte) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeByteEqualByte");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeByteEqualByte) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_SetSafeByteEqualByte");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualByte, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualByte::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualByte, NB) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualByte::NB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualByte, Output) == 0x000039, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualByte::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualByte, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualByte::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeByteEqualFSB
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeByteEqualFSB final
{
public:
	struct FSafeByte                              FSB;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeByte                              SSB;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Output;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeByte                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeByteEqualFSB) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeByteEqualFSB");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeByteEqualFSB) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_SetSafeByteEqualFSB");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualFSB, FSB) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualFSB::FSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualFSB, SSB) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualFSB::SSB' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualFSB, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualFSB::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeByteEqualFSB, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeByteEqualFSB::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeColorEqualColor
// 0x0150 (0x0150 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeColorEqualColor final
{
public:
	struct FSafeColor                             FSC;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SSC;                                               // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Output;                                            // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             ReturnValue;                                       // 0x00B8(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeColorEqualColor) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeColorEqualColor");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeColorEqualColor) == 0x000150, "Wrong size on SCLibrary_SCO_Pure_SetSafeColorEqualColor");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualColor, FSC) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualColor::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualColor, SSC) == 0x000098, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualColor::SSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualColor, Output) == 0x0000A8, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualColor::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualColor, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualColor::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeColorEqualFSC
// 0x01D8 (0x01D8 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeColorEqualFSC final
{
public:
	struct FSafeColor                             FSC;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             SSC;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeColor                             ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeColorEqualFSC) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeColorEqualFSC");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeColorEqualFSC) == 0x0001D8, "Wrong size on SCLibrary_SCO_Pure_SetSafeColorEqualFSC");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualFSC, FSC) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualFSC::FSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualFSC, SSC) == 0x000098, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualFSC::SSC' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualFSC, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualFSC::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeColorEqualFSC, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_SetSafeColorEqualFSC::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeFloatEqualFloat
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeFloatEqualFloat final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NF;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeFloatEqualFloat) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeFloatEqualFloat");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeFloatEqualFloat) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_SetSafeFloatEqualFloat");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFloat, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFloat::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFloat, NF) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFloat::NF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFloat, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFloat::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFloat, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFloat::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeFloatEqualFSF
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeFloatEqualFSF final
{
public:
	struct FSafeFloat                             FSF;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeFloat                             SSF;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeFloatEqualFSF) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeFloatEqualFSF");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeFloatEqualFSF) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_SetSafeFloatEqualFSF");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFSF, FSF) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFSF::FSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFSF, SSF) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFSF::SSF' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFSF, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFSF::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeFloatEqualFSF, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeFloatEqualFSF::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeIntEqualFSI
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeIntEqualFSI final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               SSI;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeInt                               ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeIntEqualFSI) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeIntEqualFSI");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeIntEqualFSI) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_SetSafeIntEqualFSI");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualFSI, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualFSI::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualFSI, SSI) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualFSI::SSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualFSI, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualFSI::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualFSI, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualFSI::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeIntEqualInt
// 0x0078 (0x0078 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeIntEqualInt final
{
public:
	struct FSafeInt                               FSI;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NI;                                                // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Output;                                            // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeInt                               ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeIntEqualInt) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeIntEqualInt");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeIntEqualInt) == 0x000078, "Wrong size on SCLibrary_SCO_Pure_SetSafeIntEqualInt");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualInt, FSI) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualInt::FSI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualInt, NI) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualInt::NI' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualInt, Output) == 0x00003C, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualInt::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeIntEqualInt, ReturnValue) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetSafeIntEqualInt::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeNameEqualFSN
// 0x00B0 (0x00B0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeNameEqualFSN final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              SSN;                                               // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Output;                                            // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              ReturnValue;                                       // 0x0078(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeNameEqualFSN) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeNameEqualFSN");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeNameEqualFSN) == 0x0000B0, "Wrong size on SCLibrary_SCO_Pure_SetSafeNameEqualFSN");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualFSN, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualFSN::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualFSN, SSN) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualFSN::SSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualFSN, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualFSN::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualFSN, ReturnValue) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualFSN::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeNameEqualName
// 0x0080 (0x0080 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeNameEqualName final
{
public:
	struct FSafeName                              FSN;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NN;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Output;                                            // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeName                              ReturnValue;                                       // 0x0048(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeNameEqualName) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeNameEqualName");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeNameEqualName) == 0x000080, "Wrong size on SCLibrary_SCO_Pure_SetSafeNameEqualName");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualName, FSN) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualName::FSN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualName, NN) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualName::NN' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualName, Output) == 0x000040, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualName::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeNameEqualName, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_SetSafeNameEqualName::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeRotatorEqualFSR
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeRotator                           SSR;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeRotator                           ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR, SSR) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR::SSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualFSR::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeRotatorEqualRotator
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator final
{
public:
	struct FSafeRotator                           FSR;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NR;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeRotator                           ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator, FSR) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator::FSR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator, NR) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator::NR' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_SetSafeRotatorEqualRotator::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeStringEqualFSS
// 0x00B8 (0x00B8 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeStringEqualFSS final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            SS;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Output;                                            // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            ReturnValue;                                       // 0x0080(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeStringEqualFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeStringEqualFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeStringEqualFSS) == 0x0000B8, "Wrong size on SCLibrary_SCO_Pure_SetSafeStringEqualFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualFSS, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualFSS, SS) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualFSS::SS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualFSS, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualFSS::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualFSS, ReturnValue) == 0x000080, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeStringEqualString
// 0x0090 (0x0090 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeStringEqualString final
{
public:
	struct FSafeString                            FSS;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NS;                                                // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Output;                                            // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            ReturnValue;                                       // 0x0058(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeStringEqualString) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeStringEqualString");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeStringEqualString) == 0x000090, "Wrong size on SCLibrary_SCO_Pure_SetSafeStringEqualString");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualString, FSS) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualString::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualString, NS) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualString::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualString, Output) == 0x000048, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualString::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeStringEqualString, ReturnValue) == 0x000058, "Member 'SCLibrary_SCO_Pure_SetSafeStringEqualString::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeTextEqualFST
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeTextEqualFST final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ST;                                                // 0x0038(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Output;                                            // 0x0070(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ReturnValue;                                       // 0x0088(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeTextEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeTextEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeTextEqualFST) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_SetSafeTextEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualFST, ST) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualFST::ST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualFST, Output) == 0x000070, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualFST::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualFST, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeTextEqualText
// 0x00A0 (0x00A0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeTextEqualText final
{
public:
	struct FSafeText                              FST;                                               // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NT;                                                // 0x0038(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Output;                                            // 0x0050(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSafeText                              ReturnValue;                                       // 0x0068(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeTextEqualText) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeTextEqualText");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeTextEqualText) == 0x0000A0, "Wrong size on SCLibrary_SCO_Pure_SetSafeTextEqualText");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualText, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualText::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualText, NT) == 0x000038, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualText::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualText, Output) == 0x000050, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualText::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTextEqualText, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_SetSafeTextEqualText::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeTransformEqualFST
// 0x0470 (0x0470 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeTransformEqualFST final
{
public:
	struct FSafeTransform                         FST;                                               // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeTransform                         SST;                                               // 0x0168(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Output;                                            // 0x02D0(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeTransform                         ReturnValue;                                       // 0x0300(0x0168)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeTransformEqualFST) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeTransformEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeTransformEqualFST) == 0x000470, "Wrong size on SCLibrary_SCO_Pure_SetSafeTransformEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualFST, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualFST, SST) == 0x000168, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualFST::SST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualFST, Output) == 0x0002D0, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualFST::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualFST, ReturnValue) == 0x000300, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeTransformEqualTransform
// 0x0340 (0x0340 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeTransformEqualTransform final
{
public:
	struct FSafeTransform                         FST;                                               // 0x0000(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SST;                                               // 0x0170(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Output;                                            // 0x01A0(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeTransform                         ReturnValue;                                       // 0x01D0(0x0168)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeTransformEqualTransform) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeTransformEqualTransform");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeTransformEqualTransform) == 0x000340, "Wrong size on SCLibrary_SCO_Pure_SetSafeTransformEqualTransform");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualTransform, FST) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualTransform::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualTransform, SST) == 0x000170, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualTransform::SST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualTransform, Output) == 0x0001A0, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualTransform::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeTransformEqualTransform, ReturnValue) == 0x0001D0, "Member 'SCLibrary_SCO_Pure_SetSafeTransformEqualTransform::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeVector2DEqualFSV
// 0x0110 (0x0110 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          SSV;                                               // 0x0058(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x00B8(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV) == 0x000110, "Wrong size on SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV, SSV) == 0x000058, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV, ReturnValue) == 0x0000B8, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeVector2DEqualVector2D
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D final
{
public:
	struct FSafeVector2D                          FSV;                                               // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NV;                                                // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Output;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D, NV) == 0x000058, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D, Output) == 0x000060, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D, ReturnValue) == 0x000068, "Member 'SCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeVector3DEqualFSV
// 0x0178 (0x0178 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          SSV;                                               // 0x0078(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x00F0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV) == 0x000178, "Wrong size on SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV, SSV) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV, Output) == 0x0000F0, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV, ReturnValue) == 0x000100, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeVector3DEqualVector3D
// 0x0108 (0x0108 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D final
{
public:
	struct FSafeVector3D                          FSV;                                               // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NV;                                                // 0x0078(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Output;                                            // 0x0084(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector3D                          ReturnValue;                                       // 0x0090(0x0078)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D) == 0x000108, "Wrong size on SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D, NV) == 0x000078, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D, Output) == 0x000084, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D, ReturnValue) == 0x000090, "Member 'SCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeVector4DEqualFSV
// 0x01E0 (0x01E0 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          SSV;                                               // 0x0098(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x0130(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x0140(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV) == 0x0001E0, "Wrong size on SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV, SSV) == 0x000098, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV::SSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV, Output) == 0x000130, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV, ReturnValue) == 0x000140, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetSafeVector4DEqualVector4D
// 0x0160 (0x0160 - 0x0000)
struct SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D final
{
public:
	struct FSafeVector4D                          FSV;                                               // 0x0000(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               NV;                                                // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Output;                                            // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          ReturnValue;                                       // 0x00C0(0x0098)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D");
static_assert(sizeof(SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D) == 0x000160, "Wrong size on SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D, FSV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D, NV) == 0x0000A0, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D, Output) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D::Output' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D, ReturnValue) == 0x0000C0, "Member 'SCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetStringEqualFSS
// 0x0058 (0x0058 - 0x0000)
struct SCLibrary_SCO_Pure_SetStringEqualFSS final
{
public:
	class FString                                 NS;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeString                            FSS;                                               // 0x0010(0x0038)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetStringEqualFSS) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetStringEqualFSS");
static_assert(sizeof(SCLibrary_SCO_Pure_SetStringEqualFSS) == 0x000058, "Wrong size on SCLibrary_SCO_Pure_SetStringEqualFSS");
static_assert(offsetof(SCLibrary_SCO_Pure_SetStringEqualFSS, NS) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetStringEqualFSS::NS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetStringEqualFSS, FSS) == 0x000010, "Member 'SCLibrary_SCO_Pure_SetStringEqualFSS::FSS' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetStringEqualFSS, ReturnValue) == 0x000048, "Member 'SCLibrary_SCO_Pure_SetStringEqualFSS::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetTextEqualFST
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_SetTextEqualFST final
{
public:
	class FText                                   NT;                                                // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSafeText                              FST;                                               // 0x0018(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetTextEqualFST) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetTextEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_SetTextEqualFST) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_SetTextEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_SetTextEqualFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetTextEqualFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetTextEqualFST, FST) == 0x000018, "Member 'SCLibrary_SCO_Pure_SetTextEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetTextEqualFST, ReturnValue) == 0x000050, "Member 'SCLibrary_SCO_Pure_SetTextEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetTransformEqualFST
// 0x01D0 (0x01D0 - 0x0000)
struct SCLibrary_SCO_Pure_SetTransformEqualFST final
{
public:
	struct FTransform                             NT;                                                // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSafeTransform                         FST;                                               // 0x0030(0x0168)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x01A0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetTransformEqualFST) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_SetTransformEqualFST");
static_assert(sizeof(SCLibrary_SCO_Pure_SetTransformEqualFST) == 0x0001D0, "Wrong size on SCLibrary_SCO_Pure_SetTransformEqualFST");
static_assert(offsetof(SCLibrary_SCO_Pure_SetTransformEqualFST, NT) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetTransformEqualFST::NT' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetTransformEqualFST, FST) == 0x000030, "Member 'SCLibrary_SCO_Pure_SetTransformEqualFST::FST' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetTransformEqualFST, ReturnValue) == 0x0001A0, "Member 'SCLibrary_SCO_Pure_SetTransformEqualFST::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetVector2DEqualFSV
// 0x0068 (0x0068 - 0x0000)
struct SCLibrary_SCO_Pure_SetVector2DEqualFSV final
{
public:
	struct FVector2D                              NV;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector2D                          FSV;                                               // 0x0008(0x0058)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetVector2DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetVector2DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_SetVector2DEqualFSV) == 0x000068, "Wrong size on SCLibrary_SCO_Pure_SetVector2DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector2DEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetVector2DEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector2DEqualFSV, FSV) == 0x000008, "Member 'SCLibrary_SCO_Pure_SetVector2DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector2DEqualFSV, ReturnValue) == 0x000060, "Member 'SCLibrary_SCO_Pure_SetVector2DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetVector3DEqualFSV
// 0x0098 (0x0098 - 0x0000)
struct SCLibrary_SCO_Pure_SetVector3DEqualFSV final
{
public:
	struct FVector                                NV;                                                // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeVector3D                          FSV;                                               // 0x0010(0x0078)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCLibrary_SCO_Pure_SetVector3DEqualFSV) == 0x000008, "Wrong alignment on SCLibrary_SCO_Pure_SetVector3DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_SetVector3DEqualFSV) == 0x000098, "Wrong size on SCLibrary_SCO_Pure_SetVector3DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector3DEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetVector3DEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector3DEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_SetVector3DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector3DEqualFSV, ReturnValue) == 0x000088, "Member 'SCLibrary_SCO_Pure_SetVector3DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SCLibrary.SCO_Pure_SetVector4DEqualFSV
// 0x00C0 (0x00C0 - 0x0000)
struct SCLibrary_SCO_Pure_SetVector4DEqualFSV final
{
public:
	struct FVector4                               NV;                                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSafeVector4D                          FSV;                                               // 0x0010(0x0098)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCLibrary_SCO_Pure_SetVector4DEqualFSV) == 0x000010, "Wrong alignment on SCLibrary_SCO_Pure_SetVector4DEqualFSV");
static_assert(sizeof(SCLibrary_SCO_Pure_SetVector4DEqualFSV) == 0x0000C0, "Wrong size on SCLibrary_SCO_Pure_SetVector4DEqualFSV");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector4DEqualFSV, NV) == 0x000000, "Member 'SCLibrary_SCO_Pure_SetVector4DEqualFSV::NV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector4DEqualFSV, FSV) == 0x000010, "Member 'SCLibrary_SCO_Pure_SetVector4DEqualFSV::FSV' has a wrong offset!");
static_assert(offsetof(SCLibrary_SCO_Pure_SetVector4DEqualFSV, ReturnValue) == 0x0000B0, "Member 'SCLibrary_SCO_Pure_SetVector4DEqualFSV::ReturnValue' has a wrong offset!");

// Function SCUE4.SafeGameInstanceSubsystem.HideGameGuardConsole
// 0x0001 (0x0001 - 0x0000)
struct SafeGameInstanceSubsystem_HideGameGuardConsole final
{
public:
	bool                                          Set;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeGameInstanceSubsystem_HideGameGuardConsole) == 0x000001, "Wrong alignment on SafeGameInstanceSubsystem_HideGameGuardConsole");
static_assert(sizeof(SafeGameInstanceSubsystem_HideGameGuardConsole) == 0x000001, "Wrong size on SafeGameInstanceSubsystem_HideGameGuardConsole");
static_assert(offsetof(SafeGameInstanceSubsystem_HideGameGuardConsole, Set) == 0x000000, "Member 'SafeGameInstanceSubsystem_HideGameGuardConsole::Set' has a wrong offset!");

}

