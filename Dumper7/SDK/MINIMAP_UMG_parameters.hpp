#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MINIMAP_UMG

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MINIMAP_UMG.MINIMAP_UMG_C.ExecuteUbergraph_MINIMAP_UMG
// 0x0148 (0x0148 - 0x0000)
struct MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_PointDetail_C*                      CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable;                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0058(0x0088)()
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG) == 0x000008, "Wrong alignment on MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG");
static_assert(sizeof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG) == 0x000148, "Wrong size on MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, EntryPoint) == 0x000000, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::EntryPoint' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_Create_ReturnValue) == 0x000008, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, ___bool_Has_Been_Initd_Variable) == 0x000010, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, ___bool_IsClosed_Variable) == 0x000011, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, K2Node_Event_MyGeometry) == 0x000014, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000050, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, K2Node_MakeStruct_SlateBrush) == 0x000058, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0000E0, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000E8, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0000F8, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_BreakVector_X) == 0x000100, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_BreakVector_Y) == 0x000104, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_BreakVector_Z) == 0x000108, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000110, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000118, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00011C, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_BreakRotator_Roll) == 0x000128, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_BreakRotator_Pitch) == 0x00012C, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_BreakRotator_Yaw) == 0x000130, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000134, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_Add_FloatFloat_ReturnValue) == 0x000138, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG, CallFunc_PlayAnimation_ReturnValue) == 0x000140, "Member 'MINIMAP_UMG_C_ExecuteUbergraph_MINIMAP_UMG::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function MINIMAP_UMG.MINIMAP_UMG_C.Tick
// 0x003C (0x003C - 0x0000)
struct MINIMAP_UMG_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MINIMAP_UMG_C_Tick) == 0x000004, "Wrong alignment on MINIMAP_UMG_C_Tick");
static_assert(sizeof(MINIMAP_UMG_C_Tick) == 0x00003C, "Wrong size on MINIMAP_UMG_C_Tick");
static_assert(offsetof(MINIMAP_UMG_C_Tick, MyGeometry) == 0x000000, "Member 'MINIMAP_UMG_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_Tick, InDeltaTime) == 0x000038, "Member 'MINIMAP_UMG_C_Tick::InDeltaTime' has a wrong offset!");

// Function MINIMAP_UMG.MINIMAP_UMG_C.AddPOI 
// 0x0010 (0x0010 - 0x0000)
struct MINIMAP_UMG_C_AddPOI_ final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MINIMAP_UMG_C_AddPOI_) == 0x000008, "Wrong alignment on MINIMAP_UMG_C_AddPOI_");
static_assert(sizeof(MINIMAP_UMG_C_AddPOI_) == 0x000010, "Wrong size on MINIMAP_UMG_C_AddPOI_");
static_assert(offsetof(MINIMAP_UMG_C_AddPOI_, Content) == 0x000000, "Member 'MINIMAP_UMG_C_AddPOI_::Content' has a wrong offset!");
static_assert(offsetof(MINIMAP_UMG_C_AddPOI_, CallFunc_AddChildToOverlay_ReturnValue) == 0x000008, "Member 'MINIMAP_UMG_C_AddPOI_::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");

}

