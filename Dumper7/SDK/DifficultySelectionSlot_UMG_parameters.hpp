#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DifficultySelectionSlot_UMG

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function DifficultySelectionSlot_UMG.DifficultySelectionSlot_UMG_C.ExecuteUbergraph_DifficultySelectionSlot_UMG
// 0x0118 (0x0118 - 0x0000)
struct DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMyGameInstance_C*                      K2Node_DynamicCast_AsMy_Game_Instance;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSaveGameExist_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStateSetting_C*                  K2Node_DynamicCast_AsPlayer_State_Setting;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_1;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0088(0x0028)()
	class UPlayerStateSetting_C*                  CallFunc_CreateSaveGameObject_ReturnValue;         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDifficultySelection_UMG_C*>     CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x00C0(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UDifficultySelection_UMG_C*>     CallFunc_GetAllWidgetsOfClass_FoundWidgets_1;      // 0x00D0(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UDifficultySelection_UMG_C*             CallFunc_Array_Get_Item;                           // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDifficultySelection_UMG_C*             CallFunc_Array_Get_Item_1;                         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMainMenu_UMG_C*>                CallFunc_GetAllWidgetsOfClass_FoundWidgets_2;      // 0x0100(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UMainMenu_UMG_C*                        CallFunc_Array_Get_Item_2;                         // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG) == 0x000008, "Wrong alignment on DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG");
static_assert(sizeof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG) == 0x000118, "Wrong size on DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, EntryPoint) == 0x000000, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::EntryPoint' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, ___int_Variable) == 0x000010, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::___int_Variable' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_DynamicCast_AsMy_Game_Instance) == 0x000018, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_DynamicCast_AsMy_Game_Instance' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000028, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_DoesSaveGameExist_ReturnValue) == 0x000030, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_DoesSaveGameExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_DynamicCast_AsPlayer_State_Setting) == 0x000038, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_DynamicCast_AsPlayer_State_Setting' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, ___int_Variable_1) == 0x000044, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_Event_IsDesignTime) == 0x000048, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_PlayAnimation_ReturnValue_1) == 0x000058, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, K2Node_MakeStruct_SlateColor_1) == 0x000088, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_CreateSaveGameObject_ReturnValue) == 0x0000B0, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_SaveGameToSlot_ReturnValue) == 0x0000B8, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x0000C0, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_GetAllWidgetsOfClass_FoundWidgets_1) == 0x0000D0, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_GetAllWidgetsOfClass_FoundWidgets_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Array_Get_Item_1) == 0x0000E8, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Array_Length_ReturnValue_1) == 0x0000F4, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Less_IntInt_ReturnValue) == 0x0000F8, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F9, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_GetAllWidgetsOfClass_FoundWidgets_2) == 0x000100, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_GetAllWidgetsOfClass_FoundWidgets_2' has a wrong offset!");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG, CallFunc_Array_Get_Item_2) == 0x000110, "Member 'DifficultySelectionSlot_UMG_C_ExecuteUbergraph_DifficultySelectionSlot_UMG::CallFunc_Array_Get_Item_2' has a wrong offset!");

// Function DifficultySelectionSlot_UMG.DifficultySelectionSlot_UMG_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct DifficultySelectionSlot_UMG_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DifficultySelectionSlot_UMG_C_PreConstruct) == 0x000001, "Wrong alignment on DifficultySelectionSlot_UMG_C_PreConstruct");
static_assert(sizeof(DifficultySelectionSlot_UMG_C_PreConstruct) == 0x000001, "Wrong size on DifficultySelectionSlot_UMG_C_PreConstruct");
static_assert(offsetof(DifficultySelectionSlot_UMG_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'DifficultySelectionSlot_UMG_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

