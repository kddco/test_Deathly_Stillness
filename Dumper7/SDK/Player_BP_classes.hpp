#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Player_BP

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "SCUE4_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WeaponType_structs.hpp"
#include "InventoryData_Struct_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "DS_PlayerState_structs.hpp"
#include "CharacterModel_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "ItemType_Enum_structs.hpp"
#include "BulletType_Enum_structs.hpp"
#include "Optics_Enum_structs.hpp"
#include "MuzzleType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Player_BP.Player_BP_C
// 0x0860 (0x0D20 - 0x04C0)
class APlayer_BP_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  被发现后期效果; // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LockPickingComponent_C*             BP_LockPickingComponent;                           // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        GunTrace;                                          // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        武器丢出位置;                                // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInventorySystem_Component_C*           InventorySystem_Component;                         // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Flashlight_Demo;                                // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  作弊码聆听PostProcess; // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_BreathingSoft;                                  // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_BreathingHeavy;                                 // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       QTE提示; // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera;                                        // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        QTELocation;                                       // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    QteSpringArm;                                      // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 手套; // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TPSCameraMesh;                                     // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FPPSence;                                          // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FPPCamera;                                         // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    FPPSpringArm;                                      // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HairSocket;                                        // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat;                                               // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Legs;                                              // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hand;                                              // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Belt;                                              // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Head;                                              // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Cloth;                                             // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Shoes;                                             // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Pants;                                             // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Backpack_A;                                     // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOInvokerComponent*                   AIOInvoker;                                        // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        foot_l;                                            // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        foot_r;                                            // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera1;                                           // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    DeadSpringArm;                                     // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       TPPCamera;                                         // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ____14______0_0DE8E8234CBA59B7E03183A5A62C6F67;    // 0x0618(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____14__Direction_0DE8E8234CBA59B7E03183A5A62C6F67; // 0x061C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61D[0x3];                                      // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_14; // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____12______0_6B1DC26B4677DC1F3A8D5183BB54DFF3;    // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____12__Direction_6B1DC26B4677DC1F3A8D5183BB54DFF3; // 0x062C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_12; // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____13_NewTrack_0_7D48C42C44C8ED155298CE8B0C28ABE3; // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____13__Direction_7D48C42C44C8ED155298CE8B0C28ABE3; // 0x063C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63D[0x3];                                      // 0x063D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_13; // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttchSecondarySmooth______0_804DDE3645E37F59A99881B7A0E938CA; // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AttchSecondarySmooth__Direction_804DDE3645E37F59A99881B7A0E938CA; // 0x064C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64D[0x3];                                      // 0x064D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AttchSecondarySmooth;                              // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttchPrimarySmooth______0_B9A42B104292430467441EA4EAA996B5; // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AttchPrimarySmooth__Direction_B9A42B104292430467441EA4EAA996B5; // 0x065C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AttchPrimarySmooth;                                // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____8______0_71EEB54B4636D1A3CF9195994116DF2B;     // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____8__Direction_71EEB54B4636D1A3CF9195994116DF2B; // 0x066C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66D[0x3];                                      // 0x066D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_8; // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____11______2_A58234714BFB06FAF8DE708FFA1D99D4;    // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____11______1_A58234714BFB06FAF8DE708FFA1D99D4;    // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____11______0_A58234714BFB06FAF8DE708FFA1D99D4;    // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____11__Direction_A58234714BFB06FAF8DE708FFA1D99D4; // 0x0684(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_685[0x3];                                      // 0x0685(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_11; // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ______________0_CDE4B66F4474C56C36D1C1BDFD037533;  // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            __________Direction_CDE4B66F4474C56C36D1C1BDFD037533; // 0x0694(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_695[0x3];                                      // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     手柄自瞄旋转设置; // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_DEFC63DF422D0CB9F5B6DBAC9A9C38DE; // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_DEFC63DF422D0CB9F5B6DBAC9A9C38DE; // 0x06A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A5[0x3];                                      // 0x06A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____10______0_AA2E4F63487911DABEF4CB9E241F0AB0;    // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____10__Direction_AA2E4F63487911DABEF4CB9E241F0AB0; // 0x06B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B5[0x3];                                      // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_10; // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____0_NewTrack_0_76E85296458F9B884262E297E58BB961; // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_76E85296458F9B884262E297E58BB961; // 0x06C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C5[0x3];                                      // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_0; // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____9______0_7306678745E6CDEC4F1B108994CA2AF3;     // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____9__Direction_7306678745E6CDEC4F1B108994CA2AF3; // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_9; // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ADS_FOV_76CEBC3D4FB3F297FC2BCB8267D0F900;          // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ADS_Alpha_76CEBC3D4FB3F297FC2BCB8267D0F900;        // 0x06E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ADS__Direction_76CEBC3D4FB3F297FC2BCB8267D0F900;   // 0x06E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x7];                                      // 0x06E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ADS;                                               // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ______NewTrack_0_F33D607F4B708783A339AE84DB0C3916; // 0x06F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            _______Direction_F33D607F4B708783A339AE84DB0C3916; // 0x06FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     扣血时间轴; // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _____________0_6BDB396D450BCA77CB832EB593BB83A0;   // 0x0708(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            _________Direction_6BDB396D450BCA77CB832EB593BB83A0; // 0x070C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70D[0x3];                                      // 0x070D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     自动回血时间轴; // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aim_NewTrack_0_09057ECC4237004FF562A88E0003CBFB;   // 0x0718(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Aim__Direction_09057ECC4237004FF562A88E0003CBFB;   // 0x071C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71D[0x3];                                      // 0x071D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Aim;                                               // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____7______0_F35463B640D4BC8D23F5AAB4F053906A;     // 0x0728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____7__Direction_F35463B640D4BC8D23F5AAB4F053906A; // 0x072C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72D[0x3];                                      // 0x072D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_7; // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____6______0_DD586F444C35A283855A49965276E0E8;     // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____6__Direction_DD586F444C35A283855A49965276E0E8; // 0x073C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73D[0x3];                                      // 0x073D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_6; // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____5_Alpha_5A9872CE47B74080E0152A9471DF4399;      // 0x0748(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____5__Direction_5A9872CE47B74080E0152A9471DF4399; // 0x074C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74D[0x3];                                      // 0x074D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_5; // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____4_Alpha_7850F2354A44CA6ABF914F9D0E9D9A42;      // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____4__Direction_7850F2354A44CA6ABF914F9D0E9D9A42; // 0x075C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75D[0x3];                                      // 0x075D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_4; // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____3______0_923112A7416F84A871D034A5B5554652;     // 0x0768(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____3__Direction_923112A7416F84A871D034A5B5554652; // 0x076C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76D[0x3];                                      // 0x076D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_3; // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____2_NewTrack_0_95A435B14F0AB199B170D8870A2EF353; // 0x0778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____2__Direction_95A435B14F0AB199B170D8870A2EF353; // 0x077C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77D[0x3];                                      // 0x077D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_2; // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____1_NewTrack_0_CC017F63449C12F4E4D38182FC67D3CA; // 0x0788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____1__Direction_CC017F63449C12F4E4D38182FC67D3CA; // 0x078C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78D[0x3];                                      // 0x078D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_1; // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_772BFAE24A784F386485D1BDBA599C3C; // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_772BFAE24A784F386485D1BDBA599C3C; // 0x079C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79D[0x3];                                      // 0x079D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprint_;                                           // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否右键瞄准; // 0x07A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA[0x2];                                      // 0x07AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         当前血量; // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RunStop;                                           // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   RunStopAnim;                                       // 0x07B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   WalkStopAnim;                                      // 0x07C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanStop_;                                          // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MontagePlaying;                                    // 0x07D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7DA[0x6];                                      // 0x07DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           RunStopAnim_0;                                     // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveForward;                                       // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveRight;                                         // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayer_Anim_C*                         PlayerAnimRef;                                     // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInGame_Umg_C*                          InGameUmg;                                         // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanControl;                                        // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_801[0x7];                                      // 0x0801(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   HitAnim;                                           // 0x0808(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          是否正在近战; // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MeleeState_;                                       // 0x0819(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DamageEfffect;                                     // 0x081A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B[0x1];                                      // 0x081B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         目标血量; // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadBobScale;                                      // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReload_;                                         // 0x0824(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EDS_PlayerState                               PlayerStateEnum;                                   // 0x0825(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRifleState_;                                     // 0x0826(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_827[0x1];                                      // 0x0827(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   RifleRunStopAnim;                                  // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   RifleWalkStopAnim;                                 // 0x0840(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         HitZombieRef;                                      // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   MeleeAnim;                                         // 0x0860(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   StartBone;                                         // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndBone;                                           // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         近战绝杀index; // 0x0880(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884[0x4];                                      // 0x0884(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   MeleeAnim_0;                                       // 0x0888(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SpreadCurrent;                                     // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spread_Min;                                        // 0x089C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMax;                                         // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spread_Decrease_Speed;                             // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Walk_;                                             // 0x08AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Relaxed;                                           // 0x08AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8AE[0x2];                                      // 0x08AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NearActor;                                         // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPause_UMG_C*                           PauseUMG;                                          // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanJump_;                                          // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C1[0x3];                                      // 0x08C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         大招触发次数; // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOV;                                               // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         鼠标X灵敏度; // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         脚步声音量; // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          女性角色_; // 0x08D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D5[0x3];                                      // 0x08D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DamageSound;                                       // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             JumpSound;                                         // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AttackSound;                                       // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         鼠标Y灵敏度; // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponScale;                                       // 0x08F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringSocketZ;                                     // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringSocketY;                                     // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否自动开启手电筒; // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          关闭伤害检测; // 0x0909(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A[0x6];                                      // 0x090A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   DeadMontage;                                       // 0x0910(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         反转Y轴; // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_924[0x4];                                      // 0x0924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 近战中的丧尸; // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterModel                               CharacterModel;                                    // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_931[0x7];                                      // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          BaseMesh;                                          // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          HeadMesh;                                          // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          HairMesh;                                          // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          ShoesMesh;                                         // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          ClothMesh;                                         // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          PantsMesh;                                         // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          BeltMesh;                                          // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          HandMesh;                                          // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          LegsMesh;                                          // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          HatMesh;                                           // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AInGamePlayerState_C*                   As_in_Game_Player_State;                           // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          是否开启长按_; // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          停止射击检测; // 0x0991(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_992[0x2];                                      // 0x0992(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                射击点; // 0x0994(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         jog;                                               // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sprint;                                            // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Walk;                                              // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9AC[0x4];                                      // 0x09AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArm_Anim_C*                      As_Spring_Arm_Anim;                                // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          是否可以使用机瞄; // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanWeaponSway;                                     // 0x09B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9BA[0x2];                                      // 0x09BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ADSSocketName;                                     // 0x09BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeFOV;                                          // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwayPitch;                                         // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ADSRotatorSpeed;                                   // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwayYaw;                                           // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否正在机瞄; // 0x09DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9DD[0x3];                                      // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeshFPSocke_ADSLoc;                                // 0x09E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MeshFPSocke_ADSRot;                                // 0x09EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MaxHealth;                                         // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   FireKey;                                           // 0x0A00(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FinishADSMove_;                                    // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsAsset*                          New_Physics_Asset;                                 // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         暂存血量; // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否按下键盘Q; // 0x0A2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2D[0x3];                                      // 0x0A2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombie_BP_C*                           QteZombie;                                         // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_to_Play;                                   // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFPP;                                             // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A41[0x3];                                      // 0x0A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         jogBack;                                           // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FPP奔跑射击; // 0x0A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否开启镜头晃动; // 0x0A49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          击杀提示; // 0x0A4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A4B[0x1];                                      // 0x0A4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                人物大小; // 0x0A4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5C[0x4];                                      // 0x0A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSafeFloat                             当前血量Safe; // 0x0A60(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSafeFloat                             目标血量Safe; // 0x0A98(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSafeFloat                             SpeedSafe;                                         // 0x0AD0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSafeFloat                             暂存血量Safe; // 0x0B08(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSafeFloat                             MaxHealthSafe;                                     // 0x0B40(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                FPP_MeshScale_3D;                                  // 0x0B78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Backroom_;                                         // 0x0B84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_B85[0x3];                                      // 0x0B85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocalDistance;                                     // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aperture_F_stop;                                   // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInventoryData_Struct                  InventoryDataStruct;                               // 0x0B90(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          是否装备BackroomPistol; // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C29[0x7];                                      // 0x0C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PickUpRef;                                         // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DeadSound;                                         // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UScreenDamage_Umg_C*                    ScreenDamage;                                      // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          禁用跳跃_; // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InsideBackroom;                                    // 0x0C49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanDynamicDOF_;                                    // 0x0C4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          开启摄像机镜像; // 0x0C4B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          禁用QTE;                                         // 0x0C4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C4D[0x3];                                      // 0x0C4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             As_Zombie_BP;                                      // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Force_Z;                                           // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Global_Time_Dilation;                              // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IniSpringArmLength;                                // 0x0C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否开启自动瞄准; // 0x0C64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          砸瓦鲁多; // 0x0C65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          闪电侠; // 0x0C66(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          QTE已触发; // 0x0C67(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DefaultSpringArmSocket;                            // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C6C[0x4];                                      // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBackpack_UMG_C*                        BackpackUMG;                                       // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenBackpack_;                                     // 0x0C78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C79[0x7];                                      // 0x0C79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMINIMAP_UMG_C*                         MiniMapUMG;                                        // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniMapZoom;                                       // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否检查物品; // 0x0C8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C8D[0x3];                                      // 0x0C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 跟随鼠标移动Actor; // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFuse_BP_C*                             Fuse_Ref;                                          // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          任务道具是否就位; // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA1[0x7];                                      // 0x0CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        QTE_ZombieSound;                                   // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         使用物品的ID; // 0x0CB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         体力值; // 0x0CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺消耗数值; // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          体力耗尽; // 0x0CBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CBD[0x3];                                      // 0x0CBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         体力值Save; // 0x0CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         近战消耗体力; // 0x0CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         体力上限; // 0x0CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CCC[0x4];                                      // 0x0CCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon_Master_C*                       主武器实例; // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon_Master_C*                       副武器实例; // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否装备主武器; // 0x0CE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否装备副武器; // 0x0CE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE2[0x2];                                      // 0x0CE2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Seven_65背包子弹总数; // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Five_56背包子弹总数; // 0x0CE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ninemm背包子弹总数; // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否打开地图; // 0x0CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否唤出鼠标右键; // 0x0CF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          通关成功; // 0x0CF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          一开始是否有枪_; // 0x0CF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF4[0x4];                                      // 0x0CF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Pick_Up_Item;                                      // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否落地减速; // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D01[0x3];                                      // 0x0D01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   主武器未装备插槽; // 0x0D04(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   副武器未装备插槽; // 0x0D0C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EquipPrimaryWeapon;                                // 0x0D14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EquipSencondaryWeapon;                             // 0x0D15(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Misty开场地上爬起来; // 0x0D16(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D17[0x1];                                      // 0x0D17(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         test;                                              // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Player_BP(int32 EntryPoint);
	void UISettingApply();
	void 播放微笑动画();
	void 播放眨眼动画();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void 取消奔跑();
	void MouseMovement();
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0(float AxisValue);
	void 关闭机瞄();
	void ResetAim();
	void 重置瞄准时间轴();
	void 手柄辅助瞄准检测();
	void 手柄辅助瞄准();
	void StopAiming();
	void StopFire();
	void StartFire();
	void 恢复血量();
	void 复活重置();
	void BloodEffcet_Disappear();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void RightFoot();
	void LeftFoot();
	void 播放跳跃音效();
	void 播放近战音效();
	void 近战检测();
	void 状态结束变成空白状态();
	void 自动换弹();
	void 放松状态();
	void 瞄准状态();
	void 拾取子弹(const struct FInventoryData_Struct& InventoryData);
	void 拾取成功播放拾取动画(const struct FVector& PickupStuffeLocation, const struct FInventoryData_Struct& PickUp_Struct, class AActor* PickUp_Item);
	void PickUpOutline();
	void 视野改变(float B);
	void 选择人物_Event(ECharacterModel CharacterModel_0);
	void 自动开启手电筒();
	void 解除蹲伏状态();
	void ResetWeaponSway();
	void ADSSway();
	void NormalADS();
	void 自动回血_Event();
	void 恢复武器插槽位置();
	void QTE检测();
	void Qte失败但是还活着();
	void Qte失败();
	void 有没有按下Q();
	void 第一人称武器插槽重新设置();
	void 关闭第一人称();
	void 开启第一人称();
	void 挑战成功_Event();
	void 后室第一人称();
	void 实体一直在追逐();
	void Event_Relax();
	void Event_GetScared();
	void ResetScaredSound();
	void BndEvt__Player_BP_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void ZoomDOF();
	void 聆听(bool 已启用);
	void 砸瓦鲁多状态(bool 砸瓦鲁多_0);
	void 自动瞄准状态(bool 是否开启自动瞄准_0);
	void 无重力模式(bool Condition);
	void 无后坐力(bool 无后坐力_0);
	void 开启子弹时间(float Time_Dilation);
	void 闪电侠状态(bool Condition);
	void 超级跳状态(bool 是否超级跳);
	void 无限子弹状态(bool 是否无限子弹);
	void 无敌状态(bool 关闭伤害检测_0, bool 禁用QTE_0);
	void OpenDoor();
	void 关闭背包();
	void Finish_Equip();
	void 打开背包();
	void 数据对调(int32 Current, int32 Target);
	void 使用物品(const struct FInventoryData_Struct& ItemData);
	void 使用完物品后();
	void 使用物品播放动画(const struct FInventoryData_Struct& Inventory);
	void 关闭小地图显示();
	void 小地图显示和隐藏();
	void 创建小地图();
	void InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void 丢弃副武器();
	void 丢弃主武器();
	void EquipPrimaryWeaponEvent();
	void EquipSencondaryWeapon_Event();
	void 装备副武器();
	void 丢弃物品(int32 丢弃数量, const struct FInventoryData_Struct& 丢弃物品的数据);
	void Heightjudge_Event();
	void OnLanded(const struct FHitResult& Hit);
	void 正在被发现中();
	void 取消发现();
	void Misty第二幕开场();
	void 数据对调接口(int32 Current, int32 Target);
	void 添加空的武器插槽(class UWB_Backpack_Weapon_C* WeaponDragUMG);
	void 添加武器数据(bool 是否是主武器, class AWeapon_Master_C* weapon);
	void 添加空格子(const TArray<struct FInventoryData_Struct>& InventoryData, class UInventorySystem_Component_C* 背包组件, class UBackpack_DragObject_UMG_C* ItemDragUMG, class UBackpack_Details_C* BackpackDetailsUMG);
	void 刷新数据(const struct FInventoryData_Struct& InventoryData, int32 Index_0);
	void InpActEvt_Walk_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Walk_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_机瞄_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_机瞄_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_9(const struct FKey& Key);
	void OnCompleted_825C60974DB5F8131C0EC6BD2802ED71(class FName NotifyName);
	void OnBlendOut_825C60974DB5F8131C0EC6BD2802ED71(class FName NotifyName);
	void OnInterrupted_825C60974DB5F8131C0EC6BD2802ED71(class FName NotifyName);
	void OnNotifyBegin_825C60974DB5F8131C0EC6BD2802ED71(class FName NotifyName);
	void OnNotifyEnd_825C60974DB5F8131C0EC6BD2802ED71(class FName NotifyName);
	void Brake_K2Node_InputActionEvent_10(const struct FKey& Key);
	void Brake_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_近战_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_PlayerInteration_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_PlayerInteration_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Decimal_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Escape_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_人物镜像_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Flashlight_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_18(const struct FKey& Key);
	void OnCompleted_FCDC3C854D0DE0D55A3319A17099F08C(class FName NotifyName);
	void OnBlendOut_FCDC3C854D0DE0D55A3319A17099F08C(class FName NotifyName);
	void OnInterrupted_FCDC3C854D0DE0D55A3319A17099F08C(class FName NotifyName);
	void OnNotifyBegin_FCDC3C854D0DE0D55A3319A17099F08C(class FName NotifyName);
	void OnNotifyEnd_FCDC3C854D0DE0D55A3319A17099F08C(class FName NotifyName);
	void OnCompleted_99AE74E84F2372A6F2AFDBAF03715924(class FName NotifyName);
	void OnBlendOut_99AE74E84F2372A6F2AFDBAF03715924(class FName NotifyName);
	void OnInterrupted_99AE74E84F2372A6F2AFDBAF03715924(class FName NotifyName);
	void OnNotifyBegin_99AE74E84F2372A6F2AFDBAF03715924(class FName NotifyName);
	void OnNotifyEnd_99AE74E84F2372A6F2AFDBAF03715924(class FName NotifyName);
	void OnCompleted_61D081624812E445A2E209BCB1BD4FBD(class FName NotifyName);
	void OnBlendOut_61D081624812E445A2E209BCB1BD4FBD(class FName NotifyName);
	void OnInterrupted_61D081624812E445A2E209BCB1BD4FBD(class FName NotifyName);
	void OnNotifyBegin_61D081624812E445A2E209BCB1BD4FBD(class FName NotifyName);
	void OnNotifyEnd_61D081624812E445A2E209BCB1BD4FBD(class FName NotifyName);
	void OnCompleted_1D1F684E45F0FEE78E4BAAACFBEA485F(class FName NotifyName);
	void OnBlendOut_1D1F684E45F0FEE78E4BAAACFBEA485F(class FName NotifyName);
	void OnInterrupted_1D1F684E45F0FEE78E4BAAACFBEA485F(class FName NotifyName);
	void OnNotifyBegin_1D1F684E45F0FEE78E4BAAACFBEA485F(class FName NotifyName);
	void OnNotifyEnd_1D1F684E45F0FEE78E4BAAACFBEA485F(class FName NotifyName);
	void InpActEvt_Q_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_切换FPP_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_全自动和半自动_K2Node_InputActionEvent_20(const struct FKey& Key);
	void OnCompleted_0B41B76842A5A8D0EA8DE282AA27480B(class FName NotifyName);
	void OnBlendOut_0B41B76842A5A8D0EA8DE282AA27480B(class FName NotifyName);
	void OnInterrupted_0B41B76842A5A8D0EA8DE282AA27480B(class FName NotifyName);
	void OnNotifyBegin_0B41B76842A5A8D0EA8DE282AA27480B(class FName NotifyName);
	void OnNotifyEnd_0B41B76842A5A8D0EA8DE282AA27480B(class FName NotifyName);
	void OnCompleted_0EC79BE14861A531593566B8D4C7704F(class FName NotifyName);
	void OnBlendOut_0EC79BE14861A531593566B8D4C7704F(class FName NotifyName);
	void OnInterrupted_0EC79BE14861A531593566B8D4C7704F(class FName NotifyName);
	void OnNotifyBegin_0EC79BE14861A531593566B8D4C7704F(class FName NotifyName);
	void OnNotifyEnd_0EC79BE14861A531593566B8D4C7704F(class FName NotifyName);
	void InpActEvt_Inspect_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Backpack_K2Node_InputActionEvent_22(const struct FKey& Key);
	void OnCompleted_8943DFCD4754D4AC35E446B247C5B215(class FName NotifyName);
	void OnBlendOut_8943DFCD4754D4AC35E446B247C5B215(class FName NotifyName);
	void OnInterrupted_8943DFCD4754D4AC35E446B247C5B215(class FName NotifyName);
	void OnNotifyBegin_8943DFCD4754D4AC35E446B247C5B215(class FName NotifyName);
	void OnNotifyEnd_8943DFCD4754D4AC35E446B247C5B215(class FName NotifyName);
	void InpActEvt_M_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_丢弃武器_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_副武器切换_K2Node_InputActionEvent_24(const struct FKey& Key);
	void OnCompleted_1ADADE8D45AB25F5D57F23B3C969935D(class FName NotifyName);
	void OnBlendOut_1ADADE8D45AB25F5D57F23B3C969935D(class FName NotifyName);
	void OnInterrupted_1ADADE8D45AB25F5D57F23B3C969935D(class FName NotifyName);
	void OnNotifyBegin_1ADADE8D45AB25F5D57F23B3C969935D(class FName NotifyName);
	void OnNotifyEnd_1ADADE8D45AB25F5D57F23B3C969935D(class FName NotifyName);
	void OnCompleted_070C19BB46CC2FB0D0B9D19F94F7BD0F(class FName NotifyName);
	void OnBlendOut_070C19BB46CC2FB0D0B9D19F94F7BD0F(class FName NotifyName);
	void OnInterrupted_070C19BB46CC2FB0D0B9D19F94F7BD0F(class FName NotifyName);
	void OnNotifyBegin_070C19BB46CC2FB0D0B9D19F94F7BD0F(class FName NotifyName);
	void OnNotifyEnd_070C19BB46CC2FB0D0B9D19F94F7BD0F(class FName NotifyName);
	void InpActEvt_主武器切换_K2Node_InputActionEvent_25(const struct FKey& Key);
	void OnCompleted_1C9BB7EE41BE5ABE82D4E387744A2F15(class FName NotifyName);
	void OnBlendOut_1C9BB7EE41BE5ABE82D4E387744A2F15(class FName NotifyName);
	void OnInterrupted_1C9BB7EE41BE5ABE82D4E387744A2F15(class FName NotifyName);
	void OnNotifyBegin_1C9BB7EE41BE5ABE82D4E387744A2F15(class FName NotifyName);
	void OnNotifyEnd_1C9BB7EE41BE5ABE82D4E387744A2F15(class FName NotifyName);
	void OnCompleted_8288217649771614B690278B3BA223FA(class FName NotifyName);
	void OnBlendOut_8288217649771614B690278B3BA223FA(class FName NotifyName);
	void OnInterrupted_8288217649771614B690278B3BA223FA(class FName NotifyName);
	void OnNotifyBegin_8288217649771614B690278B3BA223FA(class FName NotifyName);
	void OnNotifyEnd_8288217649771614B690278B3BA223FA(class FName NotifyName);
	void 时间轴_7__UpdateFunc();
	void 时间轴_7__FinishedFunc();
	void 时间轴_6__UpdateFunc();
	void 时间轴_6__FinishedFunc();
	void 时间轴_9__UpdateFunc();
	void 时间轴_9__FinishedFunc();
	void ADS__UpdateFunc();
	void ADS__FinishedFunc();
	void Aim__UpdateFunc();
	void Aim__FinishedFunc();
	void 手柄自瞄旋转设置__UpdateFunc();
	void 手柄自瞄旋转设置__FinishedFunc();
	void 时间轴_2__UpdateFunc();
	void 时间轴_2__FinishedFunc();
	void 扣血时间轴__UpdateFunc();
	void 扣血时间轴__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void 时间轴_4__UpdateFunc();
	void 时间轴_4__FinishedFunc();
	void 时间轴_5__UpdateFunc();
	void 时间轴_5__FinishedFunc();
	void 时间轴_1__UpdateFunc();
	void 时间轴_1__FinishedFunc();
	void 时间轴_3__UpdateFunc();
	void 时间轴_3__FinishedFunc();
	void 自动回血时间轴__UpdateFunc();
	void 自动回血时间轴__FinishedFunc();
	void 时间轴_0__UpdateFunc();
	void 时间轴_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void 时间轴_10__UpdateFunc();
	void 时间轴_10__FinishedFunc();
	void 时间轴_11__UpdateFunc();
	void 时间轴_11__FinishedFunc();
	void 时间轴_12__UpdateFunc();
	void 时间轴_12__FinishedFunc();
	void AttchSecondarySmooth__UpdateFunc();
	void AttchSecondarySmooth__FinishedFunc();
	void AttchPrimarySmooth__UpdateFunc();
	void AttchPrimarySmooth__FinishedFunc();
	void 时间轴_8__UpdateFunc();
	void 时间轴_8__FinishedFunc();
	void 时间轴_14__UpdateFunc();
	void 时间轴_14__FinishedFunc();
	void 时间轴_13__UpdateFunc();
	void 时间轴_13__FinishedFunc();
	void UserConstructionScript();
	float 角色速度判断();
	void 脚步声(class USceneComponent* Target, struct FVector* Location);
	void DecreaseSpread(float DecreaseSpread_0);
	void Increase_Spread(float Increase_Spread_0);
	void Rotate_to_Control_Rotation(float InterpSpeed);
	void 应用读取的数据();
	void 选择Female角色();
	void 射击点检测();
	void 机瞄参数设置(class FName ADSSocketName_0, float ScopeFOV_0, float ADSRotatorSpeed_0, bool FPPCamera_0, bool TPPCamera_0, bool 使用控制器旋转Yaw, bool 是否开启机瞄, float Aim_Play_Rate, ESlateVisibility 十字, ESlateVisibility DOT, float 后坐力大小);
	void 机瞄是否关闭判断();
	void 不同倍镜不同参数设置();
	void 摄像机tick寻找武器机瞄位置();
	void 开启qte前需要设置的();
	void 第三人称关闭机瞄模型设置();
	void 第三人称开启机瞄模式设置();
	struct FVector 角色Mesh高度设置(float Height);
	void SpawnBackroomWeapon();
	float DeltaTimeCaculate();
	class USubtitles_UMG_C* 剧情触发配音和字幕(TArray<class USoundBase*>& 男声, TArray<class USoundBase*>& 女声, TArray<class FText>& 字幕, TArray<class FText>& 谁说话);
	void 手电筒跟随摄像机();
	void 鼠标拖动物体移动();
	void 体力值计算();
	void 武器碰撞检测Tick();
	void 初始化备弹(EWeaponType Selection);
	void 添加地图上的图标指引();
	void 生成主武器();
	void 生成副武器();
	void 替换武器();
	void 主副武器未装备插槽设置();
	void 重新设置背上武器插槽();
	void 将手上的武器放到背上();
	void 丢弃武器到地上(class AWeapon_Master_C* 武器实例, bool 丢弃的枪是否装备);
	void 选择Man角色();
	void 拾取子弹刷新数量(const struct FInventoryData_Struct& InventoryData_Struct);
	void 关闭第一人称或机瞄状态();
	void 创建UI(class UWidget** 创建的UI);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Player_BP_C">();
	}
	static class APlayer_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayer_BP_C>();
	}
};
static_assert(alignof(APlayer_BP_C) == 0x000010, "Wrong alignment on APlayer_BP_C");
static_assert(sizeof(APlayer_BP_C) == 0x000D20, "Wrong size on APlayer_BP_C");
static_assert(offsetof(APlayer_BP_C, UberGraphFrame) == 0x0004C0, "Member 'APlayer_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 被发现后期效果) == 0x0004C8, "Member 'APlayer_BP_C::被发现后期效果' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, BP_LockPickingComponent) == 0x0004D0, "Member 'APlayer_BP_C::BP_LockPickingComponent' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, GunTrace) == 0x0004D8, "Member 'APlayer_BP_C::GunTrace' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 武器丢出位置) == 0x0004E0, "Member 'APlayer_BP_C::武器丢出位置' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PointLight1) == 0x0004E8, "Member 'APlayer_BP_C::PointLight1' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PointLight) == 0x0004F0, "Member 'APlayer_BP_C::PointLight' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, InventorySystem_Component) == 0x0004F8, "Member 'APlayer_BP_C::InventorySystem_Component' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, BP_Flashlight_Demo) == 0x000500, "Member 'APlayer_BP_C::BP_Flashlight_Demo' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 作弊码聆听PostProcess) == 0x000508, "Member 'APlayer_BP_C::作弊码聆听PostProcess' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Niagara) == 0x000510, "Member 'APlayer_BP_C::Niagara' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PostProcess) == 0x000518, "Member 'APlayer_BP_C::PostProcess' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PawnSensing) == 0x000520, "Member 'APlayer_BP_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SC_BreathingSoft) == 0x000528, "Member 'APlayer_BP_C::SC_BreathingSoft' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SC_BreathingHeavy) == 0x000530, "Member 'APlayer_BP_C::SC_BreathingHeavy' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, QTE提示) == 0x000538, "Member 'APlayer_BP_C::QTE提示' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CineCamera) == 0x000540, "Member 'APlayer_BP_C::CineCamera' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, QTELocation) == 0x000548, "Member 'APlayer_BP_C::QTELocation' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, QteSpringArm) == 0x000550, "Member 'APlayer_BP_C::QteSpringArm' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 手套) == 0x000558, "Member 'APlayer_BP_C::手套' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SpringArm) == 0x000560, "Member 'APlayer_BP_C::SpringArm' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, TPSCameraMesh) == 0x000568, "Member 'APlayer_BP_C::TPSCameraMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Scene) == 0x000570, "Member 'APlayer_BP_C::Scene' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FPPSence) == 0x000578, "Member 'APlayer_BP_C::FPPSence' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FPPCamera) == 0x000580, "Member 'APlayer_BP_C::FPPCamera' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FPPSpringArm) == 0x000588, "Member 'APlayer_BP_C::FPPSpringArm' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HairSocket) == 0x000590, "Member 'APlayer_BP_C::HairSocket' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Hat) == 0x000598, "Member 'APlayer_BP_C::Hat' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Legs) == 0x0005A0, "Member 'APlayer_BP_C::Legs' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Hand) == 0x0005A8, "Member 'APlayer_BP_C::Hand' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Belt) == 0x0005B0, "Member 'APlayer_BP_C::Belt' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Head) == 0x0005B8, "Member 'APlayer_BP_C::Head' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Cloth) == 0x0005C0, "Member 'APlayer_BP_C::Cloth' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Shoes) == 0x0005C8, "Member 'APlayer_BP_C::Shoes' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Pants) == 0x0005D0, "Member 'APlayer_BP_C::Pants' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SK_Backpack_A) == 0x0005D8, "Member 'APlayer_BP_C::SK_Backpack_A' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AIOInvoker) == 0x0005E0, "Member 'APlayer_BP_C::AIOInvoker' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Arrow1) == 0x0005E8, "Member 'APlayer_BP_C::Arrow1' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, foot_l) == 0x0005F0, "Member 'APlayer_BP_C::foot_l' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, foot_r) == 0x0005F8, "Member 'APlayer_BP_C::foot_r' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Camera1) == 0x000600, "Member 'APlayer_BP_C::Camera1' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, DeadSpringArm) == 0x000608, "Member 'APlayer_BP_C::DeadSpringArm' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, TPPCamera) == 0x000610, "Member 'APlayer_BP_C::TPPCamera' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____14______0_0DE8E8234CBA59B7E03183A5A62C6F67) == 0x000618, "Member 'APlayer_BP_C::____14______0_0DE8E8234CBA59B7E03183A5A62C6F67' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____14__Direction_0DE8E8234CBA59B7E03183A5A62C6F67) == 0x00061C, "Member 'APlayer_BP_C::____14__Direction_0DE8E8234CBA59B7E03183A5A62C6F67' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_14) == 0x000620, "Member 'APlayer_BP_C::时间轴_14' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____12______0_6B1DC26B4677DC1F3A8D5183BB54DFF3) == 0x000628, "Member 'APlayer_BP_C::____12______0_6B1DC26B4677DC1F3A8D5183BB54DFF3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____12__Direction_6B1DC26B4677DC1F3A8D5183BB54DFF3) == 0x00062C, "Member 'APlayer_BP_C::____12__Direction_6B1DC26B4677DC1F3A8D5183BB54DFF3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_12) == 0x000630, "Member 'APlayer_BP_C::时间轴_12' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____13_NewTrack_0_7D48C42C44C8ED155298CE8B0C28ABE3) == 0x000638, "Member 'APlayer_BP_C::____13_NewTrack_0_7D48C42C44C8ED155298CE8B0C28ABE3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____13__Direction_7D48C42C44C8ED155298CE8B0C28ABE3) == 0x00063C, "Member 'APlayer_BP_C::____13__Direction_7D48C42C44C8ED155298CE8B0C28ABE3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_13) == 0x000640, "Member 'APlayer_BP_C::时间轴_13' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttchSecondarySmooth______0_804DDE3645E37F59A99881B7A0E938CA) == 0x000648, "Member 'APlayer_BP_C::AttchSecondarySmooth______0_804DDE3645E37F59A99881B7A0E938CA' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttchSecondarySmooth__Direction_804DDE3645E37F59A99881B7A0E938CA) == 0x00064C, "Member 'APlayer_BP_C::AttchSecondarySmooth__Direction_804DDE3645E37F59A99881B7A0E938CA' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttchSecondarySmooth) == 0x000650, "Member 'APlayer_BP_C::AttchSecondarySmooth' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttchPrimarySmooth______0_B9A42B104292430467441EA4EAA996B5) == 0x000658, "Member 'APlayer_BP_C::AttchPrimarySmooth______0_B9A42B104292430467441EA4EAA996B5' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttchPrimarySmooth__Direction_B9A42B104292430467441EA4EAA996B5) == 0x00065C, "Member 'APlayer_BP_C::AttchPrimarySmooth__Direction_B9A42B104292430467441EA4EAA996B5' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttchPrimarySmooth) == 0x000660, "Member 'APlayer_BP_C::AttchPrimarySmooth' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____8______0_71EEB54B4636D1A3CF9195994116DF2B) == 0x000668, "Member 'APlayer_BP_C::____8______0_71EEB54B4636D1A3CF9195994116DF2B' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____8__Direction_71EEB54B4636D1A3CF9195994116DF2B) == 0x00066C, "Member 'APlayer_BP_C::____8__Direction_71EEB54B4636D1A3CF9195994116DF2B' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_8) == 0x000670, "Member 'APlayer_BP_C::时间轴_8' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____11______2_A58234714BFB06FAF8DE708FFA1D99D4) == 0x000678, "Member 'APlayer_BP_C::____11______2_A58234714BFB06FAF8DE708FFA1D99D4' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____11______1_A58234714BFB06FAF8DE708FFA1D99D4) == 0x00067C, "Member 'APlayer_BP_C::____11______1_A58234714BFB06FAF8DE708FFA1D99D4' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____11______0_A58234714BFB06FAF8DE708FFA1D99D4) == 0x000680, "Member 'APlayer_BP_C::____11______0_A58234714BFB06FAF8DE708FFA1D99D4' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____11__Direction_A58234714BFB06FAF8DE708FFA1D99D4) == 0x000684, "Member 'APlayer_BP_C::____11__Direction_A58234714BFB06FAF8DE708FFA1D99D4' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_11) == 0x000688, "Member 'APlayer_BP_C::时间轴_11' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ______________0_CDE4B66F4474C56C36D1C1BDFD037533) == 0x000690, "Member 'APlayer_BP_C::______________0_CDE4B66F4474C56C36D1C1BDFD037533' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, __________Direction_CDE4B66F4474C56C36D1C1BDFD037533) == 0x000694, "Member 'APlayer_BP_C::__________Direction_CDE4B66F4474C56C36D1C1BDFD037533' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 手柄自瞄旋转设置) == 0x000698, "Member 'APlayer_BP_C::手柄自瞄旋转设置' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Timeline_0_NewTrack_0_DEFC63DF422D0CB9F5B6DBAC9A9C38DE) == 0x0006A0, "Member 'APlayer_BP_C::Timeline_0_NewTrack_0_DEFC63DF422D0CB9F5B6DBAC9A9C38DE' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Timeline_0__Direction_DEFC63DF422D0CB9F5B6DBAC9A9C38DE) == 0x0006A4, "Member 'APlayer_BP_C::Timeline_0__Direction_DEFC63DF422D0CB9F5B6DBAC9A9C38DE' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Timeline_0) == 0x0006A8, "Member 'APlayer_BP_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____10______0_AA2E4F63487911DABEF4CB9E241F0AB0) == 0x0006B0, "Member 'APlayer_BP_C::____10______0_AA2E4F63487911DABEF4CB9E241F0AB0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____10__Direction_AA2E4F63487911DABEF4CB9E241F0AB0) == 0x0006B4, "Member 'APlayer_BP_C::____10__Direction_AA2E4F63487911DABEF4CB9E241F0AB0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_10) == 0x0006B8, "Member 'APlayer_BP_C::时间轴_10' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____0_NewTrack_0_76E85296458F9B884262E297E58BB961) == 0x0006C0, "Member 'APlayer_BP_C::____0_NewTrack_0_76E85296458F9B884262E297E58BB961' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____0__Direction_76E85296458F9B884262E297E58BB961) == 0x0006C4, "Member 'APlayer_BP_C::____0__Direction_76E85296458F9B884262E297E58BB961' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_0) == 0x0006C8, "Member 'APlayer_BP_C::时间轴_0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____9______0_7306678745E6CDEC4F1B108994CA2AF3) == 0x0006D0, "Member 'APlayer_BP_C::____9______0_7306678745E6CDEC4F1B108994CA2AF3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____9__Direction_7306678745E6CDEC4F1B108994CA2AF3) == 0x0006D4, "Member 'APlayer_BP_C::____9__Direction_7306678745E6CDEC4F1B108994CA2AF3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_9) == 0x0006D8, "Member 'APlayer_BP_C::时间轴_9' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ADS_FOV_76CEBC3D4FB3F297FC2BCB8267D0F900) == 0x0006E0, "Member 'APlayer_BP_C::ADS_FOV_76CEBC3D4FB3F297FC2BCB8267D0F900' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ADS_Alpha_76CEBC3D4FB3F297FC2BCB8267D0F900) == 0x0006E4, "Member 'APlayer_BP_C::ADS_Alpha_76CEBC3D4FB3F297FC2BCB8267D0F900' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ADS__Direction_76CEBC3D4FB3F297FC2BCB8267D0F900) == 0x0006E8, "Member 'APlayer_BP_C::ADS__Direction_76CEBC3D4FB3F297FC2BCB8267D0F900' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ADS) == 0x0006F0, "Member 'APlayer_BP_C::ADS' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ______NewTrack_0_F33D607F4B708783A339AE84DB0C3916) == 0x0006F8, "Member 'APlayer_BP_C::______NewTrack_0_F33D607F4B708783A339AE84DB0C3916' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, _______Direction_F33D607F4B708783A339AE84DB0C3916) == 0x0006FC, "Member 'APlayer_BP_C::_______Direction_F33D607F4B708783A339AE84DB0C3916' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 扣血时间轴) == 0x000700, "Member 'APlayer_BP_C::扣血时间轴' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, _____________0_6BDB396D450BCA77CB832EB593BB83A0) == 0x000708, "Member 'APlayer_BP_C::_____________0_6BDB396D450BCA77CB832EB593BB83A0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, _________Direction_6BDB396D450BCA77CB832EB593BB83A0) == 0x00070C, "Member 'APlayer_BP_C::_________Direction_6BDB396D450BCA77CB832EB593BB83A0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 自动回血时间轴) == 0x000710, "Member 'APlayer_BP_C::自动回血时间轴' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Aim_NewTrack_0_09057ECC4237004FF562A88E0003CBFB) == 0x000718, "Member 'APlayer_BP_C::Aim_NewTrack_0_09057ECC4237004FF562A88E0003CBFB' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Aim__Direction_09057ECC4237004FF562A88E0003CBFB) == 0x00071C, "Member 'APlayer_BP_C::Aim__Direction_09057ECC4237004FF562A88E0003CBFB' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Aim) == 0x000720, "Member 'APlayer_BP_C::Aim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____7______0_F35463B640D4BC8D23F5AAB4F053906A) == 0x000728, "Member 'APlayer_BP_C::____7______0_F35463B640D4BC8D23F5AAB4F053906A' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____7__Direction_F35463B640D4BC8D23F5AAB4F053906A) == 0x00072C, "Member 'APlayer_BP_C::____7__Direction_F35463B640D4BC8D23F5AAB4F053906A' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_7) == 0x000730, "Member 'APlayer_BP_C::时间轴_7' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____6______0_DD586F444C35A283855A49965276E0E8) == 0x000738, "Member 'APlayer_BP_C::____6______0_DD586F444C35A283855A49965276E0E8' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____6__Direction_DD586F444C35A283855A49965276E0E8) == 0x00073C, "Member 'APlayer_BP_C::____6__Direction_DD586F444C35A283855A49965276E0E8' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_6) == 0x000740, "Member 'APlayer_BP_C::时间轴_6' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____5_Alpha_5A9872CE47B74080E0152A9471DF4399) == 0x000748, "Member 'APlayer_BP_C::____5_Alpha_5A9872CE47B74080E0152A9471DF4399' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____5__Direction_5A9872CE47B74080E0152A9471DF4399) == 0x00074C, "Member 'APlayer_BP_C::____5__Direction_5A9872CE47B74080E0152A9471DF4399' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_5) == 0x000750, "Member 'APlayer_BP_C::时间轴_5' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____4_Alpha_7850F2354A44CA6ABF914F9D0E9D9A42) == 0x000758, "Member 'APlayer_BP_C::____4_Alpha_7850F2354A44CA6ABF914F9D0E9D9A42' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____4__Direction_7850F2354A44CA6ABF914F9D0E9D9A42) == 0x00075C, "Member 'APlayer_BP_C::____4__Direction_7850F2354A44CA6ABF914F9D0E9D9A42' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_4) == 0x000760, "Member 'APlayer_BP_C::时间轴_4' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____3______0_923112A7416F84A871D034A5B5554652) == 0x000768, "Member 'APlayer_BP_C::____3______0_923112A7416F84A871D034A5B5554652' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____3__Direction_923112A7416F84A871D034A5B5554652) == 0x00076C, "Member 'APlayer_BP_C::____3__Direction_923112A7416F84A871D034A5B5554652' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_3) == 0x000770, "Member 'APlayer_BP_C::时间轴_3' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____2_NewTrack_0_95A435B14F0AB199B170D8870A2EF353) == 0x000778, "Member 'APlayer_BP_C::____2_NewTrack_0_95A435B14F0AB199B170D8870A2EF353' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____2__Direction_95A435B14F0AB199B170D8870A2EF353) == 0x00077C, "Member 'APlayer_BP_C::____2__Direction_95A435B14F0AB199B170D8870A2EF353' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_2) == 0x000780, "Member 'APlayer_BP_C::时间轴_2' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____1_NewTrack_0_CC017F63449C12F4E4D38182FC67D3CA) == 0x000788, "Member 'APlayer_BP_C::____1_NewTrack_0_CC017F63449C12F4E4D38182FC67D3CA' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ____1__Direction_CC017F63449C12F4E4D38182FC67D3CA) == 0x00078C, "Member 'APlayer_BP_C::____1__Direction_CC017F63449C12F4E4D38182FC67D3CA' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 时间轴_1) == 0x000790, "Member 'APlayer_BP_C::时间轴_1' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Timeline_1_NewTrack_0_772BFAE24A784F386485D1BDBA599C3C) == 0x000798, "Member 'APlayer_BP_C::Timeline_1_NewTrack_0_772BFAE24A784F386485D1BDBA599C3C' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Timeline_1__Direction_772BFAE24A784F386485D1BDBA599C3C) == 0x00079C, "Member 'APlayer_BP_C::Timeline_1__Direction_772BFAE24A784F386485D1BDBA599C3C' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Timeline_1) == 0x0007A0, "Member 'APlayer_BP_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Sprint_) == 0x0007A8, "Member 'APlayer_BP_C::Sprint_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否右键瞄准) == 0x0007A9, "Member 'APlayer_BP_C::是否右键瞄准' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 当前血量) == 0x0007AC, "Member 'APlayer_BP_C::当前血量' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, RunStop) == 0x0007B0, "Member 'APlayer_BP_C::RunStop' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, RunStopAnim) == 0x0007B8, "Member 'APlayer_BP_C::RunStopAnim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, WalkStopAnim) == 0x0007C8, "Member 'APlayer_BP_C::WalkStopAnim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CanStop_) == 0x0007D8, "Member 'APlayer_BP_C::CanStop_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MontagePlaying) == 0x0007D9, "Member 'APlayer_BP_C::MontagePlaying' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, RunStopAnim_0) == 0x0007E0, "Member 'APlayer_BP_C::RunStopAnim_0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MoveForward) == 0x0007E8, "Member 'APlayer_BP_C::MoveForward' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MoveRight) == 0x0007EC, "Member 'APlayer_BP_C::MoveRight' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PlayerAnimRef) == 0x0007F0, "Member 'APlayer_BP_C::PlayerAnimRef' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, InGameUmg) == 0x0007F8, "Member 'APlayer_BP_C::InGameUmg' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CanControl) == 0x000800, "Member 'APlayer_BP_C::CanControl' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HitAnim) == 0x000808, "Member 'APlayer_BP_C::HitAnim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否正在近战) == 0x000818, "Member 'APlayer_BP_C::是否正在近战' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MeleeState_) == 0x000819, "Member 'APlayer_BP_C::MeleeState_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, DamageEfffect) == 0x00081A, "Member 'APlayer_BP_C::DamageEfffect' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 目标血量) == 0x00081C, "Member 'APlayer_BP_C::目标血量' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HeadBobScale) == 0x000820, "Member 'APlayer_BP_C::HeadBobScale' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, IsReload_) == 0x000824, "Member 'APlayer_BP_C::IsReload_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PlayerStateEnum) == 0x000825, "Member 'APlayer_BP_C::PlayerStateEnum' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, IsRifleState_) == 0x000826, "Member 'APlayer_BP_C::IsRifleState_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Speed) == 0x000828, "Member 'APlayer_BP_C::Speed' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, RifleRunStopAnim) == 0x000830, "Member 'APlayer_BP_C::RifleRunStopAnim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, RifleWalkStopAnim) == 0x000840, "Member 'APlayer_BP_C::RifleWalkStopAnim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HitZombieRef) == 0x000850, "Member 'APlayer_BP_C::HitZombieRef' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MeleeAnim) == 0x000860, "Member 'APlayer_BP_C::MeleeAnim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, StartBone) == 0x000870, "Member 'APlayer_BP_C::StartBone' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, EndBone) == 0x000878, "Member 'APlayer_BP_C::EndBone' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 近战绝杀index) == 0x000880, "Member 'APlayer_BP_C::近战绝杀index' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MeleeAnim_0) == 0x000888, "Member 'APlayer_BP_C::MeleeAnim_0' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SpreadCurrent) == 0x000898, "Member 'APlayer_BP_C::SpreadCurrent' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Spread_Min) == 0x00089C, "Member 'APlayer_BP_C::Spread_Min' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SpreadMax) == 0x0008A0, "Member 'APlayer_BP_C::SpreadMax' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Delta_Seconds) == 0x0008A4, "Member 'APlayer_BP_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Spread_Decrease_Speed) == 0x0008A8, "Member 'APlayer_BP_C::Spread_Decrease_Speed' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Walk_) == 0x0008AC, "Member 'APlayer_BP_C::Walk_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Relaxed) == 0x0008AD, "Member 'APlayer_BP_C::Relaxed' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, NearActor) == 0x0008B0, "Member 'APlayer_BP_C::NearActor' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PauseUMG) == 0x0008B8, "Member 'APlayer_BP_C::PauseUMG' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CanJump_) == 0x0008C0, "Member 'APlayer_BP_C::CanJump_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 大招触发次数) == 0x0008C4, "Member 'APlayer_BP_C::大招触发次数' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FOV) == 0x0008C8, "Member 'APlayer_BP_C::FOV' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 鼠标X灵敏度) == 0x0008CC, "Member 'APlayer_BP_C::鼠标X灵敏度' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 脚步声音量) == 0x0008D0, "Member 'APlayer_BP_C::脚步声音量' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 女性角色_) == 0x0008D4, "Member 'APlayer_BP_C::女性角色_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, DamageSound) == 0x0008D8, "Member 'APlayer_BP_C::DamageSound' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, JumpSound) == 0x0008E0, "Member 'APlayer_BP_C::JumpSound' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, AttackSound) == 0x0008E8, "Member 'APlayer_BP_C::AttackSound' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 鼠标Y灵敏度) == 0x0008F0, "Member 'APlayer_BP_C::鼠标Y灵敏度' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, WeaponScale) == 0x0008F4, "Member 'APlayer_BP_C::WeaponScale' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SpringSocketZ) == 0x000900, "Member 'APlayer_BP_C::SpringSocketZ' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SpringSocketY) == 0x000904, "Member 'APlayer_BP_C::SpringSocketY' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否自动开启手电筒) == 0x000908, "Member 'APlayer_BP_C::是否自动开启手电筒' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 关闭伤害检测) == 0x000909, "Member 'APlayer_BP_C::关闭伤害检测' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, DeadMontage) == 0x000910, "Member 'APlayer_BP_C::DeadMontage' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 反转Y轴) == 0x000920, "Member 'APlayer_BP_C::反转Y轴' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 近战中的丧尸) == 0x000928, "Member 'APlayer_BP_C::近战中的丧尸' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CharacterModel) == 0x000930, "Member 'APlayer_BP_C::CharacterModel' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, BaseMesh) == 0x000938, "Member 'APlayer_BP_C::BaseMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HeadMesh) == 0x000940, "Member 'APlayer_BP_C::HeadMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HairMesh) == 0x000948, "Member 'APlayer_BP_C::HairMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ShoesMesh) == 0x000950, "Member 'APlayer_BP_C::ShoesMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ClothMesh) == 0x000958, "Member 'APlayer_BP_C::ClothMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PantsMesh) == 0x000960, "Member 'APlayer_BP_C::PantsMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, BeltMesh) == 0x000968, "Member 'APlayer_BP_C::BeltMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HandMesh) == 0x000970, "Member 'APlayer_BP_C::HandMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, LegsMesh) == 0x000978, "Member 'APlayer_BP_C::LegsMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, HatMesh) == 0x000980, "Member 'APlayer_BP_C::HatMesh' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, As_in_Game_Player_State) == 0x000988, "Member 'APlayer_BP_C::As_in_Game_Player_State' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否开启长按_) == 0x000990, "Member 'APlayer_BP_C::是否开启长按_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 停止射击检测) == 0x000991, "Member 'APlayer_BP_C::停止射击检测' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 射击点) == 0x000994, "Member 'APlayer_BP_C::射击点' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, jog) == 0x0009A0, "Member 'APlayer_BP_C::jog' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Sprint) == 0x0009A4, "Member 'APlayer_BP_C::Sprint' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Walk) == 0x0009A8, "Member 'APlayer_BP_C::Walk' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, As_Spring_Arm_Anim) == 0x0009B0, "Member 'APlayer_BP_C::As_Spring_Arm_Anim' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否可以使用机瞄) == 0x0009B8, "Member 'APlayer_BP_C::是否可以使用机瞄' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CanWeaponSway) == 0x0009B9, "Member 'APlayer_BP_C::CanWeaponSway' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ADSSocketName) == 0x0009BC, "Member 'APlayer_BP_C::ADSSocketName' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ScopeFOV) == 0x0009C4, "Member 'APlayer_BP_C::ScopeFOV' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SwayPitch) == 0x0009C8, "Member 'APlayer_BP_C::SwayPitch' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ADSRotatorSpeed) == 0x0009CC, "Member 'APlayer_BP_C::ADSRotatorSpeed' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SwayYaw) == 0x0009D0, "Member 'APlayer_BP_C::SwayYaw' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Yaw) == 0x0009D4, "Member 'APlayer_BP_C::Yaw' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Pitch) == 0x0009D8, "Member 'APlayer_BP_C::Pitch' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否正在机瞄) == 0x0009DC, "Member 'APlayer_BP_C::是否正在机瞄' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MeshFPSocke_ADSLoc) == 0x0009E0, "Member 'APlayer_BP_C::MeshFPSocke_ADSLoc' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MeshFPSocke_ADSRot) == 0x0009EC, "Member 'APlayer_BP_C::MeshFPSocke_ADSRot' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MaxHealth) == 0x0009F8, "Member 'APlayer_BP_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FireKey) == 0x000A00, "Member 'APlayer_BP_C::FireKey' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FinishADSMove_) == 0x000A18, "Member 'APlayer_BP_C::FinishADSMove_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, New_Physics_Asset) == 0x000A20, "Member 'APlayer_BP_C::New_Physics_Asset' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 暂存血量) == 0x000A28, "Member 'APlayer_BP_C::暂存血量' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否按下键盘Q) == 0x000A2C, "Member 'APlayer_BP_C::是否按下键盘Q' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, QteZombie) == 0x000A30, "Member 'APlayer_BP_C::QteZombie' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Montage_to_Play) == 0x000A38, "Member 'APlayer_BP_C::Montage_to_Play' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, InFPP) == 0x000A40, "Member 'APlayer_BP_C::InFPP' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, jogBack) == 0x000A44, "Member 'APlayer_BP_C::jogBack' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FPP奔跑射击) == 0x000A48, "Member 'APlayer_BP_C::FPP奔跑射击' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否开启镜头晃动) == 0x000A49, "Member 'APlayer_BP_C::是否开启镜头晃动' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 击杀提示) == 0x000A4A, "Member 'APlayer_BP_C::击杀提示' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 人物大小) == 0x000A4C, "Member 'APlayer_BP_C::人物大小' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Time) == 0x000A58, "Member 'APlayer_BP_C::Time' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 当前血量Safe) == 0x000A60, "Member 'APlayer_BP_C::当前血量Safe' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 目标血量Safe) == 0x000A98, "Member 'APlayer_BP_C::目标血量Safe' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, SpeedSafe) == 0x000AD0, "Member 'APlayer_BP_C::SpeedSafe' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 暂存血量Safe) == 0x000B08, "Member 'APlayer_BP_C::暂存血量Safe' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MaxHealthSafe) == 0x000B40, "Member 'APlayer_BP_C::MaxHealthSafe' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FPP_MeshScale_3D) == 0x000B78, "Member 'APlayer_BP_C::FPP_MeshScale_3D' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Backroom_) == 0x000B84, "Member 'APlayer_BP_C::Backroom_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, FocalDistance) == 0x000B88, "Member 'APlayer_BP_C::FocalDistance' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Aperture_F_stop) == 0x000B8C, "Member 'APlayer_BP_C::Aperture_F_stop' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, InventoryDataStruct) == 0x000B90, "Member 'APlayer_BP_C::InventoryDataStruct' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否装备BackroomPistol) == 0x000C28, "Member 'APlayer_BP_C::是否装备BackroomPistol' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, PickUpRef) == 0x000C30, "Member 'APlayer_BP_C::PickUpRef' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, DeadSound) == 0x000C38, "Member 'APlayer_BP_C::DeadSound' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, ScreenDamage) == 0x000C40, "Member 'APlayer_BP_C::ScreenDamage' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 禁用跳跃_) == 0x000C48, "Member 'APlayer_BP_C::禁用跳跃_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, InsideBackroom) == 0x000C49, "Member 'APlayer_BP_C::InsideBackroom' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, CanDynamicDOF_) == 0x000C4A, "Member 'APlayer_BP_C::CanDynamicDOF_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 开启摄像机镜像) == 0x000C4B, "Member 'APlayer_BP_C::开启摄像机镜像' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 禁用QTE) == 0x000C4C, "Member 'APlayer_BP_C::禁用QTE' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, As_Zombie_BP) == 0x000C50, "Member 'APlayer_BP_C::As_Zombie_BP' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Force_Z) == 0x000C58, "Member 'APlayer_BP_C::Force_Z' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Global_Time_Dilation) == 0x000C5C, "Member 'APlayer_BP_C::Global_Time_Dilation' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, IniSpringArmLength) == 0x000C60, "Member 'APlayer_BP_C::IniSpringArmLength' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否开启自动瞄准) == 0x000C64, "Member 'APlayer_BP_C::是否开启自动瞄准' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 砸瓦鲁多) == 0x000C65, "Member 'APlayer_BP_C::砸瓦鲁多' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 闪电侠) == 0x000C66, "Member 'APlayer_BP_C::闪电侠' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, QTE已触发) == 0x000C67, "Member 'APlayer_BP_C::QTE已触发' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, DefaultSpringArmSocket) == 0x000C68, "Member 'APlayer_BP_C::DefaultSpringArmSocket' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, BackpackUMG) == 0x000C70, "Member 'APlayer_BP_C::BackpackUMG' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, OpenBackpack_) == 0x000C78, "Member 'APlayer_BP_C::OpenBackpack_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MiniMapUMG) == 0x000C80, "Member 'APlayer_BP_C::MiniMapUMG' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, MiniMapZoom) == 0x000C88, "Member 'APlayer_BP_C::MiniMapZoom' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否检查物品) == 0x000C8C, "Member 'APlayer_BP_C::是否检查物品' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 跟随鼠标移动Actor) == 0x000C90, "Member 'APlayer_BP_C::跟随鼠标移动Actor' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Fuse_Ref) == 0x000C98, "Member 'APlayer_BP_C::Fuse_Ref' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 任务道具是否就位) == 0x000CA0, "Member 'APlayer_BP_C::任务道具是否就位' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, QTE_ZombieSound) == 0x000CA8, "Member 'APlayer_BP_C::QTE_ZombieSound' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 使用物品的ID) == 0x000CB0, "Member 'APlayer_BP_C::使用物品的ID' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 体力值) == 0x000CB4, "Member 'APlayer_BP_C::体力值' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 冲刺消耗数值) == 0x000CB8, "Member 'APlayer_BP_C::冲刺消耗数值' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 体力耗尽) == 0x000CBC, "Member 'APlayer_BP_C::体力耗尽' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 体力值Save) == 0x000CC0, "Member 'APlayer_BP_C::体力值Save' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 近战消耗体力) == 0x000CC4, "Member 'APlayer_BP_C::近战消耗体力' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 体力上限) == 0x000CC8, "Member 'APlayer_BP_C::体力上限' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 主武器实例) == 0x000CD0, "Member 'APlayer_BP_C::主武器实例' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 副武器实例) == 0x000CD8, "Member 'APlayer_BP_C::副武器实例' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否装备主武器) == 0x000CE0, "Member 'APlayer_BP_C::是否装备主武器' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否装备副武器) == 0x000CE1, "Member 'APlayer_BP_C::是否装备副武器' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Seven_65背包子弹总数) == 0x000CE4, "Member 'APlayer_BP_C::Seven_65背包子弹总数' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Five_56背包子弹总数) == 0x000CE8, "Member 'APlayer_BP_C::Five_56背包子弹总数' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Ninemm背包子弹总数) == 0x000CEC, "Member 'APlayer_BP_C::Ninemm背包子弹总数' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否打开地图) == 0x000CF0, "Member 'APlayer_BP_C::是否打开地图' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否唤出鼠标右键) == 0x000CF1, "Member 'APlayer_BP_C::是否唤出鼠标右键' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 通关成功) == 0x000CF2, "Member 'APlayer_BP_C::通关成功' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 一开始是否有枪_) == 0x000CF3, "Member 'APlayer_BP_C::一开始是否有枪_' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Pick_Up_Item) == 0x000CF8, "Member 'APlayer_BP_C::Pick_Up_Item' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 是否落地减速) == 0x000D00, "Member 'APlayer_BP_C::是否落地减速' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 主武器未装备插槽) == 0x000D04, "Member 'APlayer_BP_C::主武器未装备插槽' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, 副武器未装备插槽) == 0x000D0C, "Member 'APlayer_BP_C::副武器未装备插槽' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, EquipPrimaryWeapon) == 0x000D14, "Member 'APlayer_BP_C::EquipPrimaryWeapon' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, EquipSencondaryWeapon) == 0x000D15, "Member 'APlayer_BP_C::EquipSencondaryWeapon' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, Misty开场地上爬起来) == 0x000D16, "Member 'APlayer_BP_C::Misty开场地上爬起来' has a wrong offset!");
static_assert(offsetof(APlayer_BP_C, test) == 0x000D18, "Member 'APlayer_BP_C::test' has a wrong offset!");

}

