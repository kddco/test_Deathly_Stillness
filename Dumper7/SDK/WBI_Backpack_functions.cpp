#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBI_Backpack

#include "Basic.hpp"

#include "WBI_Backpack_classes.hpp"
#include "WBI_Backpack_parameters.hpp"


namespace SDK
{

// Function WBI_Backpack.WBI_Backpack_C.刷新数据
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInventoryData_Struct&     InventoryData                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWBI_Backpack_C::刷新数据(const struct FInventoryData_Struct& InventoryData, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "刷新数据");

	Params::WBI_Backpack_C_刷新数据 Parms{};

	Parms.InventoryData = std::move(InventoryData);
	Parms.Index_0 = Index_0;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function WBI_Backpack.WBI_Backpack_C.创建UI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget**                         创建的UI(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWBI_Backpack_C::创建UI(class UWidget** 创建的UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "创建UI");

	Params::WBI_Backpack_C_创建UI Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (创建的UI != nullptr)
		*创建的UI = Parms.创建的UI;
}


// Function WBI_Backpack.WBI_Backpack_C.添加空格子
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FInventoryData_Struct>&InventoryData                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UInventorySystem_Component_C*     背包组件(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBackpack_DragObject_UMG_C*       ItemDragUMG                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBackpack_Details_C*              BackpackDetailsUMG                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWBI_Backpack_C::添加空格子(const TArray<struct FInventoryData_Struct>& InventoryData, class UInventorySystem_Component_C* 背包组件, class UBackpack_DragObject_UMG_C* ItemDragUMG, class UBackpack_Details_C* BackpackDetailsUMG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "添加空格子");

	Params::WBI_Backpack_C_添加空格子 Parms{};

	Parms.InventoryData = std::move(InventoryData);
	Parms.背包组件 = 背包组件;
	Parms.ItemDragUMG = ItemDragUMG;
	Parms.BackpackDetailsUMG = BackpackDetailsUMG;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function WBI_Backpack.WBI_Backpack_C.添加武器数据
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    是否是主武器(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AWeapon_Master_C*                 weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWBI_Backpack_C::添加武器数据(bool 是否是主武器, class AWeapon_Master_C* weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "添加武器数据");

	Params::WBI_Backpack_C_添加武器数据 Parms{};

	Parms.是否是主武器 = 是否是主武器;
	Parms.weapon = weapon;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function WBI_Backpack.WBI_Backpack_C.添加空的武器插槽
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWB_Backpack_Weapon_C*            WeaponDragUMG                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWBI_Backpack_C::添加空的武器插槽(class UWB_Backpack_Weapon_C* WeaponDragUMG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "添加空的武器插槽");

	Params::WBI_Backpack_C_添加空的武器插槽 Parms{};

	Parms.WeaponDragUMG = WeaponDragUMG;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function WBI_Backpack.WBI_Backpack_C.数据对调接口
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWBI_Backpack_C::数据对调接口(int32 Current, int32 Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "数据对调接口");

	Params::WBI_Backpack_C_数据对调接口 Parms{};

	Parms.Current = Current;
	Parms.Target = Target;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function WBI_Backpack.WBI_Backpack_C.拾取子弹
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInventoryData_Struct&     InventoryData                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void IWBI_Backpack_C::拾取子弹(const struct FInventoryData_Struct& InventoryData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WBI_Backpack_C", "拾取子弹");

	Params::WBI_Backpack_C_拾取子弹 Parms{};

	Parms.InventoryData = std::move(InventoryData);

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

