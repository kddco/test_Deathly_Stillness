#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIOptimizer

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "AIOptimizer_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class AIOptimizer.AIOptimizerSubsystem
// 0x00A0 (0x00D0 - 0x0030)
class UAIOptimizerSubsystem final : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(class UAIOSubjectComponent* SubjectComponent)> OnSubjectDespawned; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAIOSubjectComponent* SubjectComponent)> OnSubjectSpawned;   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsEnabled)> OnSubsystemEnabledChanged;                       // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FAIOSubject>                    SpawnedSubjects;                                   // 0x0060(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAIODespawnedSubject>           DespawnedSubjects;                                 // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAIOInvoker>                    Invokers;                                          // 0x0080(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAIOSubject>                    PendingDespawnSubjectsHeap;                        // 0x0090(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAIODespawnedSubject>           PendingSpawnSubjectsHeap;                          // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            DebugWidgetObj;                                    // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DebugAIOptimizer(bool bDebug);
	TMap<EAIODebugGroup, int32> GetCategorizedDebugSubjects(const TArray<struct FAIODebugSubjectData>& DebugSubjects);
	struct FVector GetClosestInvokerLocation(const struct FVector& QuerierLocation);
	TArray<struct FAIODebugSubjectData> GetDebugSubjects();
	float GetDistanceToClosestInvokerSquared(const struct FVector& QuerierLocation);
	int32 GetInvokerIndex(class UAIOInvokerComponent* Component);
	int32 GetSubjectIndex(class UAIOSubjectComponent* Component);
	bool K2_DespawnSubject(struct FAIOSubjectHandle* SubjectHandle, EDespawnMethod Method, class UAIOSubjectComponent* Component, float OverrideSpawnRadius, bool bAllowRespawnOnlyByHandle);
	bool K2_DespawnSubjectByHandle(struct FAIOSubjectHandle& SubjectHandle, EDespawnMethod Method, float OverrideSpawnRadius, bool bAllowRespawnOnlyByHandle);
	bool K2_SpawnSubjectByHandle(EDespawnMethod Method, const struct FAIOSubjectHandle& SubjectHandle);
	void LoopPendingSubjects();
	void LoopSubjects();
	bool RegisterInvoker(class UAIOInvokerComponent* InvokerComponent);
	bool RegisterSubject(class UAIOSubjectComponent* SubjectComponent);
	bool RemoveDespawnedSubjectByHandle(const struct FAIOSubjectHandle& Handle);
	void SetIsSystemEnabled(bool bIsEnabled);
	void ShrinkArrays();
	bool UnregisterInvoker(class UAIOInvokerComponent* InvokerComponent);
	bool UnregisterSubject(class UAIOSubjectComponent* SubjectComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIOptimizerSubsystem">();
	}
	static class UAIOptimizerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIOptimizerSubsystem>();
	}
};
static_assert(alignof(UAIOptimizerSubsystem) == 0x000008, "Wrong alignment on UAIOptimizerSubsystem");
static_assert(sizeof(UAIOptimizerSubsystem) == 0x0000D0, "Wrong size on UAIOptimizerSubsystem");
static_assert(offsetof(UAIOptimizerSubsystem, OnSubjectDespawned) == 0x000030, "Member 'UAIOptimizerSubsystem::OnSubjectDespawned' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, OnSubjectSpawned) == 0x000040, "Member 'UAIOptimizerSubsystem::OnSubjectSpawned' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, OnSubsystemEnabledChanged) == 0x000050, "Member 'UAIOptimizerSubsystem::OnSubsystemEnabledChanged' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, SpawnedSubjects) == 0x000060, "Member 'UAIOptimizerSubsystem::SpawnedSubjects' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, DespawnedSubjects) == 0x000070, "Member 'UAIOptimizerSubsystem::DespawnedSubjects' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, Invokers) == 0x000080, "Member 'UAIOptimizerSubsystem::Invokers' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, PendingDespawnSubjectsHeap) == 0x000090, "Member 'UAIOptimizerSubsystem::PendingDespawnSubjectsHeap' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, PendingSpawnSubjectsHeap) == 0x0000A0, "Member 'UAIOptimizerSubsystem::PendingSpawnSubjectsHeap' has a wrong offset!");
static_assert(offsetof(UAIOptimizerSubsystem, DebugWidgetObj) == 0x0000C8, "Member 'UAIOptimizerSubsystem::DebugWidgetObj' has a wrong offset!");

// Class AIOptimizer.AIOBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UAIOBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 AddUniqueHandle(TArray<struct FAIOSubjectHandle>& Array, const struct FAIOSubjectHandle& Handle);
	static int32 FindHandle(const TArray<struct FAIOSubjectHandle>& Array, const struct FAIOSubjectHandle& HandleToFind);
	static const class FName GetInvokerTag();
	static class FString GetString(const struct FAIOSubjectHandle& Handle);
	static const class FName GetSubjectTag();
	static bool IsHandleValid(const struct FAIOSubjectHandle& Handle);
	static bool RemoveHandle(TArray<struct FAIOSubjectHandle>& Array, const struct FAIOSubjectHandle& Handle);
	static void SetAILogicEnabled(class AActor* Actor, bool bEnable);
	static void SetCharacterMovementEnabled(class ACharacter* Character, bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIOBPLibrary">();
	}
	static class UAIOBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIOBPLibrary>();
	}
};
static_assert(alignof(UAIOBPLibrary) == 0x000008, "Wrong alignment on UAIOBPLibrary");
static_assert(sizeof(UAIOBPLibrary) == 0x000028, "Wrong size on UAIOBPLibrary");

// Class AIOptimizer.AIOSubjectComponent
// 0x0098 (0x0148 - 0x00B0)
class UAIOSubjectComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x1C];                                      // 0x00B0(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIOSubjectHandle                      Handle;                                            // 0x00CC(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen)> OnOptimizationUpdate; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAIOData_Base* Data)> OnPreDespawn;                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAIOData_Base* Data)> OnPostSpawned;                         // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                 Spawner;                                           // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanBeUpdatedBySubsystem : 1;                      // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowSubsystemToAutoDespawn : 1;                  // 0x0110(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideSubsystemDespawnRadius;                    // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAIOData_Base>              DataClass;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAIOptimizationLayer>           OptimizationLayers;                                // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bShouldCalculateIsSeen : 1;                        // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0xF];                                      // 0x0139(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanBeUpdatedBySubsystem();
	struct FVector GetClosestInvokerLocation();
	float GetDespawnRadiusSquared(class UAIOptimizerSubsystem* Subsystem);
	int32 GetOptimizationLayerForCurrentDistance();
	float GetSpawnRadiusSquared(class UAIOptimizerSubsystem* Subsystem);
	void RegisterSubject();
	void ReinitializeOptimizationLayers(TArray<struct FAIOptimizationLayer>& NewOptimizationLayers);
	void SetCanBeUpdatedBySubsystem(bool bCanBeUpdated);
	void SetCharacterFeatures(class ACharacter* Character, int32 FeaturesToEnable);
	void SetSpawner(TScriptInterface<class ISpawnerInterface> NewSpawner);
	bool ShouldBeDespawned(class UAIOptimizerSubsystem* Subsystem, bool bForceUpdateDataToInvokers);
	void UnregisterSubject();

	int32 GetCurrentOptimizationLayer() const;
	float GetDistanceToClosestInvoker() const;
	bool IsDespawning() const;
	float IsSeenByAnyInvoker() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIOSubjectComponent">();
	}
	static class UAIOSubjectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIOSubjectComponent>();
	}
};
static_assert(alignof(UAIOSubjectComponent) == 0x000008, "Wrong alignment on UAIOSubjectComponent");
static_assert(sizeof(UAIOSubjectComponent) == 0x000148, "Wrong size on UAIOSubjectComponent");
static_assert(offsetof(UAIOSubjectComponent, Handle) == 0x0000CC, "Member 'UAIOSubjectComponent::Handle' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, OnOptimizationUpdate) == 0x0000D8, "Member 'UAIOSubjectComponent::OnOptimizationUpdate' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, OnPreDespawn) == 0x0000E8, "Member 'UAIOSubjectComponent::OnPreDespawn' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, OnPostSpawned) == 0x0000F8, "Member 'UAIOSubjectComponent::OnPostSpawned' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, Spawner) == 0x000108, "Member 'UAIOSubjectComponent::Spawner' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, OverrideSubsystemDespawnRadius) == 0x000114, "Member 'UAIOSubjectComponent::OverrideSubsystemDespawnRadius' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, Priority) == 0x000118, "Member 'UAIOSubjectComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, DataClass) == 0x000120, "Member 'UAIOSubjectComponent::DataClass' has a wrong offset!");
static_assert(offsetof(UAIOSubjectComponent, OptimizationLayers) == 0x000128, "Member 'UAIOSubjectComponent::OptimizationLayers' has a wrong offset!");

// Class AIOptimizer.AIOData_Base
// 0x0000 (0x0028 - 0x0028)
class UAIOData_Base final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIOData_Base">();
	}
	static class UAIOData_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIOData_Base>();
	}
};
static_assert(alignof(UAIOData_Base) == 0x000008, "Wrong alignment on UAIOData_Base");
static_assert(sizeof(UAIOData_Base) == 0x000028, "Wrong size on UAIOData_Base");

// Class AIOptimizer.AIODeveloperSettings
// 0x0028 (0x0060 - 0x0038)
class UAIODeveloperSettings final : public UDeveloperSettings
{
public:
	uint8                                         bIsSubsystemEnabled : 1;                           // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisplayDebugInfo : 1;                             // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                DebugWidgetClass;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OptimizationUpdateInterval;                        // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDespawnMethod                                HandleSpawnDespawnMethod;                          // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnCapacityPerUpdate;                            // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnInterval;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DespawnRadius;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeripheralVisionHalfAngleDegrees;                  // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIODeveloperSettings">();
	}
	static class UAIODeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIODeveloperSettings>();
	}
};
static_assert(alignof(UAIODeveloperSettings) == 0x000008, "Wrong alignment on UAIODeveloperSettings");
static_assert(sizeof(UAIODeveloperSettings) == 0x000060, "Wrong size on UAIODeveloperSettings");
static_assert(offsetof(UAIODeveloperSettings, DebugWidgetClass) == 0x000040, "Member 'UAIODeveloperSettings::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(UAIODeveloperSettings, OptimizationUpdateInterval) == 0x000048, "Member 'UAIODeveloperSettings::OptimizationUpdateInterval' has a wrong offset!");
static_assert(offsetof(UAIODeveloperSettings, HandleSpawnDespawnMethod) == 0x00004C, "Member 'UAIODeveloperSettings::HandleSpawnDespawnMethod' has a wrong offset!");
static_assert(offsetof(UAIODeveloperSettings, SpawnCapacityPerUpdate) == 0x000050, "Member 'UAIODeveloperSettings::SpawnCapacityPerUpdate' has a wrong offset!");
static_assert(offsetof(UAIODeveloperSettings, SpawnInterval) == 0x000054, "Member 'UAIODeveloperSettings::SpawnInterval' has a wrong offset!");
static_assert(offsetof(UAIODeveloperSettings, DespawnRadius) == 0x000058, "Member 'UAIODeveloperSettings::DespawnRadius' has a wrong offset!");
static_assert(offsetof(UAIODeveloperSettings, PeripheralVisionHalfAngleDegrees) == 0x00005C, "Member 'UAIODeveloperSettings::PeripheralVisionHalfAngleDegrees' has a wrong offset!");

// Class AIOptimizer.AIOInvokerComponent
// 0x0008 (0x00B8 - 0x00B0)
class UAIOInvokerComponent final : public UActorComponent
{
public:
	class UUserWidget*                            DebugWidget;                                       // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DebugAIOptimizer(bool bDebug);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIOInvokerComponent">();
	}
	static class UAIOInvokerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIOInvokerComponent>();
	}
};
static_assert(alignof(UAIOInvokerComponent) == 0x000008, "Wrong alignment on UAIOInvokerComponent");
static_assert(sizeof(UAIOInvokerComponent) == 0x0000B8, "Wrong size on UAIOInvokerComponent");
static_assert(offsetof(UAIOInvokerComponent, DebugWidget) == 0x0000B0, "Member 'UAIOInvokerComponent::DebugWidget' has a wrong offset!");

// Class AIOptimizer.SpawnerInterface
// 0x0000 (0x0000 - 0x0000)
class ISpawnerInterface final
{
public:
	void OnSubjectDespawnedByOptimizerSubsystem(class UAIOSubjectComponent* DespawnedSubjectComponent);
	void OnSubjectSpawnedByOptimizerSubsystem(class UAIOSubjectComponent* SpawnedSubjectComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnerInterface">();
	}
	static class ISpawnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISpawnerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISpawnerInterface) == 0x000001, "Wrong alignment on ISpawnerInterface");
static_assert(sizeof(ISpawnerInterface) == 0x000001, "Wrong size on ISpawnerInterface");

}

