#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SettingUmg

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CustomMapping_Struct_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SettingUmg.SettingUmg_C
// 0x0258 (0x04B8 - 0x0260)
class USettingUmg_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Appear;                                            // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UScrollBox*                             CustomMapping;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      FPS显示; // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UKeyboardLayout_C*                      KeyboardLayout;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_735;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      丧尸下班;                                      // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      丧尸巨大化; // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   作弊码; // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      兔女郎丧尸; // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      全屏模式; // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      击杀提示; // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      分辨率; // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      反转鼠标Y轴; // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      后期处理质量; // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      垂直同步; // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      子弹时间; // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSliderSlot_C*                   屏幕百分比; // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      帧数限制; // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG4_C*                   应用按钮; // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      开启第一人称; // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      抗锯齿; // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      抗锯齿方法; // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             控制台设置; // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      无后坐力; // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      无敌; // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      无重力; // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      无限子弹; // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      植被质量; // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   游戏性按钮; // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             游戏性设置; // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      游戏难度; // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   画面按钮; // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             画面设置; // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      着色质量; // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      纹理质量; // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      聆听; // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSliderSlot_C*                   背景音量; // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      自动瞄准; // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      视觉质量; // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      视野FOV; // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             设置标题; // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             设置详情; // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      语言切换; // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      超级跳; // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   输入;                                            // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UReturnButton_UMG_C*                    返回按钮; // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   键盘和鼠标按钮; // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             键盘和鼠标设置; // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   键盘指南; // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      镜头晃动; // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      长按瞄准; // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      闪电侠; // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSlotUMG_C*                      阴影质量; // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSliderSlot_C*                   音效音量; // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCustomButton_UMG1_C*                   音频按钮; // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             音频设置; // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSliderSlot_C*                   鼠标X灵敏度; // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingSliderSlot_C*                   鼠标Y灵敏度; // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FCustomMapping_Struct>          CustomMappingStruct;                               // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCustomMapping_Struct                  CustomMappingKeyData;                              // 0x0448(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          重复了; // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          开启作弊码显示; // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_SettingUmg(int32 EntryPoint);
	void BndEvt__SettingUmg_应用按钮_K2Node_ComponentBoundEvent_1_Click__DelegateSignature();
	void BndEvt__SettingUmg_输入_K2Node_ComponentBoundEvent_10_Click__DelegateSignature();
	void BndEvt__SettingUmg_作弊码_K2Node_ComponentBoundEvent_9_Click__DelegateSignature();
	void BndEvt__SettingUmg_键盘指南_K2Node_ComponentBoundEvent_8_Click__DelegateSignature();
	void BndEvt__SettingUmg_音频按钮_K2Node_ComponentBoundEvent_7_Click__DelegateSignature();
	void BndEvt__SettingUmg_画面按钮_K2Node_ComponentBoundEvent_6_Click__DelegateSignature();
	void BndEvt__SettingUmg_键盘和鼠标按钮_K2Node_ComponentBoundEvent_5_Click__DelegateSignature();
	void 应用();
	void BndEvt__SettingUmg_游戏性按钮_K2Node_ComponentBoundEvent_4_Click__DelegateSignature();
	void BndEvt__SettingUmg_返回按钮_K2Node_ComponentBoundEvent_0_Click__DelegateSignature();
	void 查重(const struct FKey& InputKey, class UCustomMapping_Slot_C* Slot_0);
	void SettingDetails(const class FText& 标题, const class FText& 详情);
	void 游戏性();
	void Construct();
	void CustomMappingCheck(const struct FInputActionKeyMapping& InputAction, const struct FInputAxisKeyMapping& InputAxis);
	void initializeSetting();
	void Reset();
	void 关闭所有设置显示();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SettingUmg_C">();
	}
	static class USettingUmg_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingUmg_C>();
	}
};
static_assert(alignof(USettingUmg_C) == 0x000008, "Wrong alignment on USettingUmg_C");
static_assert(sizeof(USettingUmg_C) == 0x0004B8, "Wrong size on USettingUmg_C");
static_assert(offsetof(USettingUmg_C, UberGraphFrame) == 0x000260, "Member 'USettingUmg_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, Appear) == 0x000268, "Member 'USettingUmg_C::Appear' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, CustomMapping) == 0x000270, "Member 'USettingUmg_C::CustomMapping' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, FPS显示) == 0x000278, "Member 'USettingUmg_C::FPS显示' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, KeyboardLayout) == 0x000280, "Member 'USettingUmg_C::KeyboardLayout' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, TextBlock_735) == 0x000288, "Member 'USettingUmg_C::TextBlock_735' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 丧尸下班) == 0x000290, "Member 'USettingUmg_C::丧尸下班' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 丧尸巨大化) == 0x000298, "Member 'USettingUmg_C::丧尸巨大化' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 作弊码) == 0x0002A0, "Member 'USettingUmg_C::作弊码' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 兔女郎丧尸) == 0x0002A8, "Member 'USettingUmg_C::兔女郎丧尸' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 全屏模式) == 0x0002B0, "Member 'USettingUmg_C::全屏模式' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 击杀提示) == 0x0002B8, "Member 'USettingUmg_C::击杀提示' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 分辨率) == 0x0002C0, "Member 'USettingUmg_C::分辨率' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 反转鼠标Y轴) == 0x0002C8, "Member 'USettingUmg_C::反转鼠标Y轴' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 后期处理质量) == 0x0002D0, "Member 'USettingUmg_C::后期处理质量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 垂直同步) == 0x0002D8, "Member 'USettingUmg_C::垂直同步' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 子弹时间) == 0x0002E0, "Member 'USettingUmg_C::子弹时间' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 屏幕百分比) == 0x0002E8, "Member 'USettingUmg_C::屏幕百分比' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 帧数限制) == 0x0002F0, "Member 'USettingUmg_C::帧数限制' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 应用按钮) == 0x0002F8, "Member 'USettingUmg_C::应用按钮' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 开启第一人称) == 0x000300, "Member 'USettingUmg_C::开启第一人称' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 抗锯齿) == 0x000308, "Member 'USettingUmg_C::抗锯齿' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 抗锯齿方法) == 0x000310, "Member 'USettingUmg_C::抗锯齿方法' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 控制台设置) == 0x000318, "Member 'USettingUmg_C::控制台设置' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 无后坐力) == 0x000320, "Member 'USettingUmg_C::无后坐力' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 无敌) == 0x000328, "Member 'USettingUmg_C::无敌' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 无重力) == 0x000330, "Member 'USettingUmg_C::无重力' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 无限子弹) == 0x000338, "Member 'USettingUmg_C::无限子弹' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 植被质量) == 0x000340, "Member 'USettingUmg_C::植被质量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 游戏性按钮) == 0x000348, "Member 'USettingUmg_C::游戏性按钮' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 游戏性设置) == 0x000350, "Member 'USettingUmg_C::游戏性设置' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 游戏难度) == 0x000358, "Member 'USettingUmg_C::游戏难度' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 画面按钮) == 0x000360, "Member 'USettingUmg_C::画面按钮' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 画面设置) == 0x000368, "Member 'USettingUmg_C::画面设置' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 着色质量) == 0x000370, "Member 'USettingUmg_C::着色质量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 纹理质量) == 0x000378, "Member 'USettingUmg_C::纹理质量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 聆听) == 0x000380, "Member 'USettingUmg_C::聆听' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 背景音量) == 0x000388, "Member 'USettingUmg_C::背景音量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 自动瞄准) == 0x000390, "Member 'USettingUmg_C::自动瞄准' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 视觉质量) == 0x000398, "Member 'USettingUmg_C::视觉质量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 视野FOV) == 0x0003A0, "Member 'USettingUmg_C::视野FOV' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 设置标题) == 0x0003A8, "Member 'USettingUmg_C::设置标题' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 设置详情) == 0x0003B0, "Member 'USettingUmg_C::设置详情' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 语言切换) == 0x0003B8, "Member 'USettingUmg_C::语言切换' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 超级跳) == 0x0003C0, "Member 'USettingUmg_C::超级跳' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 输入) == 0x0003C8, "Member 'USettingUmg_C::输入' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 返回按钮) == 0x0003D0, "Member 'USettingUmg_C::返回按钮' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 键盘和鼠标按钮) == 0x0003D8, "Member 'USettingUmg_C::键盘和鼠标按钮' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 键盘和鼠标设置) == 0x0003E0, "Member 'USettingUmg_C::键盘和鼠标设置' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 键盘指南) == 0x0003E8, "Member 'USettingUmg_C::键盘指南' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 镜头晃动) == 0x0003F0, "Member 'USettingUmg_C::镜头晃动' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 长按瞄准) == 0x0003F8, "Member 'USettingUmg_C::长按瞄准' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 闪电侠) == 0x000400, "Member 'USettingUmg_C::闪电侠' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 阴影质量) == 0x000408, "Member 'USettingUmg_C::阴影质量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 音效音量) == 0x000410, "Member 'USettingUmg_C::音效音量' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 音频按钮) == 0x000418, "Member 'USettingUmg_C::音频按钮' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 音频设置) == 0x000420, "Member 'USettingUmg_C::音频设置' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 鼠标X灵敏度) == 0x000428, "Member 'USettingUmg_C::鼠标X灵敏度' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 鼠标Y灵敏度) == 0x000430, "Member 'USettingUmg_C::鼠标Y灵敏度' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, CustomMappingStruct) == 0x000438, "Member 'USettingUmg_C::CustomMappingStruct' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, CustomMappingKeyData) == 0x000448, "Member 'USettingUmg_C::CustomMappingKeyData' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 重复了) == 0x0004B0, "Member 'USettingUmg_C::重复了' has a wrong offset!");
static_assert(offsetof(USettingUmg_C, 开启作弊码显示) == 0x0004B1, "Member 'USettingUmg_C::开启作弊码显示' has a wrong offset!");

}

