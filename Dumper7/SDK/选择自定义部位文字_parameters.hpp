#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: 选择自定义部位文字

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function 选择自定义部位文字.选择自定义部位文字_C.ExecuteUbergraph_选择自定义部位文字
// 0x0108 (0x0108 - 0x0000)
struct 选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputActionKeyMapping                 K2Node_Event_InputAction;                          // 0x0018(0x0028)()
	struct FInputAxisKeyMapping                   K2Node_Event_InputAxis;                            // 0x0040(0x0028)()
	TArray<class UCustomCharacterUMG_C*>          CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0068(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomCharacterUMG_C*                  CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ACustomCharacter_C*>             CallFunc_GetAllActorsOfClass_OutActors;            // 0x0088(0x0010)(ReferenceParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACustomCharacter_C*                     CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00A8(0x0028)()
	class FText                                   K2Node_Event___;                                   // 0x00D0(0x0018)()
	class FText                                   K2Node_Event____1;                                 // 0x00E8(0x0018)()
	bool                                          CallFunc________ReturnValue;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc________ReturnValue_1;                     // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字) == 0x000008, "Wrong alignment on 选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字");
static_assert(sizeof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字) == 0x000108, "Wrong size on 选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, EntryPoint) == 0x000000, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::EntryPoint' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_Event_InputAction) == 0x000018, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_Event_InputAction' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_Event_InputAxis) == 0x000040, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_Event_InputAxis' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000068, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_SwitchEnum_CmpSuccess) == 0x000078, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc_Array_Get_Item) == 0x000080, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc_GetAllActorsOfClass_OutActors) == 0x000088, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_Event_IsDesignTime) == 0x000098, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_MakeStruct_SlateColor) == 0x0000A8, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_Event___) == 0x0000D0, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_Event___' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, K2Node_Event____1) == 0x0000E8, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::K2Node_Event____1' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc________ReturnValue) == 0x000100, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc________ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字, CallFunc________ReturnValue_1) == 0x000101, "Member '选择自定义部位文字_C_ExecuteUbergraph_选择自定义部位文字::CallFunc________ReturnValue_1' has a wrong offset!");

// Function 选择自定义部位文字.选择自定义部位文字_C.SettingDetails
// 0x0030 (0x0030 - 0x0000)
struct 选择自定义部位文字_C_SettingDetails final
{
public:
	class FText                                   标题; // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   详情; // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(选择自定义部位文字_C_SettingDetails) == 0x000008, "Wrong alignment on 选择自定义部位文字_C_SettingDetails");
static_assert(sizeof(选择自定义部位文字_C_SettingDetails) == 0x000030, "Wrong size on 选择自定义部位文字_C_SettingDetails");
static_assert(offsetof(选择自定义部位文字_C_SettingDetails, 标题) == 0x000000, "Member '选择自定义部位文字_C_SettingDetails::标题' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_SettingDetails, 详情) == 0x000018, "Member '选择自定义部位文字_C_SettingDetails::详情' has a wrong offset!");

// Function 选择自定义部位文字.选择自定义部位文字_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct 选择自定义部位文字_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(选择自定义部位文字_C_PreConstruct) == 0x000001, "Wrong alignment on 选择自定义部位文字_C_PreConstruct");
static_assert(sizeof(选择自定义部位文字_C_PreConstruct) == 0x000001, "Wrong size on 选择自定义部位文字_C_PreConstruct");
static_assert(offsetof(选择自定义部位文字_C_PreConstruct, IsDesignTime) == 0x000000, "Member '选择自定义部位文字_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function 选择自定义部位文字.选择自定义部位文字_C.CustomMappingCheck
// 0x0050 (0x0050 - 0x0000)
struct 选择自定义部位文字_C_CustomMappingCheck final
{
public:
	struct FInputActionKeyMapping                 InputAction;                                       // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FInputAxisKeyMapping                   InputAxis;                                         // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(选择自定义部位文字_C_CustomMappingCheck) == 0x000008, "Wrong alignment on 选择自定义部位文字_C_CustomMappingCheck");
static_assert(sizeof(选择自定义部位文字_C_CustomMappingCheck) == 0x000050, "Wrong size on 选择自定义部位文字_C_CustomMappingCheck");
static_assert(offsetof(选择自定义部位文字_C_CustomMappingCheck, InputAction) == 0x000000, "Member '选择自定义部位文字_C_CustomMappingCheck::InputAction' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_CustomMappingCheck, InputAxis) == 0x000028, "Member '选择自定义部位文字_C_CustomMappingCheck::InputAxis' has a wrong offset!");

// Function 选择自定义部位文字.选择自定义部位文字_C.选中状态
// 0x0070 (0x0070 - 0x0000)
struct 选择自定义部位文字_C_选中状态 final
{
public:
	int32                                         ___int_Array_Index_Variable;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0028)()
	TArray<class UUserWidget*>                    CallFunc_GetAllWidgetsWithInterface_FoundWidgets;  // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IUISettingInterface_C> K2Node_DynamicCast_AsUISetting_Interface;          // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(选择自定义部位文字_C_选中状态) == 0x000008, "Wrong alignment on 选择自定义部位文字_C_选中状态");
static_assert(sizeof(选择自定义部位文字_C_选中状态) == 0x000070, "Wrong size on 选择自定义部位文字_C_选中状态");
static_assert(offsetof(选择自定义部位文字_C_选中状态, ___int_Array_Index_Variable) == 0x000000, "Member '选择自定义部位文字_C_选中状态::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, ___int_Loop_Counter_Variable) == 0x000004, "Member '选择自定义部位文字_C_选中状态::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member '选择自定义部位文字_C_选中状态::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, K2Node_MakeStruct_SlateColor) == 0x000010, "Member '选择自定义部位文字_C_选中状态::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, CallFunc_GetAllWidgetsWithInterface_FoundWidgets) == 0x000038, "Member '选择自定义部位文字_C_选中状态::CallFunc_GetAllWidgetsWithInterface_FoundWidgets' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, CallFunc_Array_Get_Item) == 0x000048, "Member '选择自定义部位文字_C_选中状态::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, K2Node_DynamicCast_AsUISetting_Interface) == 0x000050, "Member '选择自定义部位文字_C_选中状态::K2Node_DynamicCast_AsUISetting_Interface' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, K2Node_DynamicCast_bSuccess) == 0x000060, "Member '选择自定义部位文字_C_选中状态::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member '选择自定义部位文字_C_选中状态::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_选中状态, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member '选择自定义部位文字_C_选中状态::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function 选择自定义部位文字.选择自定义部位文字_C.刷新部位名字
// 0x0005 (0x0005 - 0x0000)
struct 选择自定义部位文字_C_刷新部位名字 final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(选择自定义部位文字_C_刷新部位名字) == 0x000001, "Wrong alignment on 选择自定义部位文字_C_刷新部位名字");
static_assert(sizeof(选择自定义部位文字_C_刷新部位名字) == 0x000005, "Wrong size on 选择自定义部位文字_C_刷新部位名字");
static_assert(offsetof(选择自定义部位文字_C_刷新部位名字, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member '选择自定义部位文字_C_刷新部位名字::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_刷新部位名字, K2Node_SwitchEnum_CmpSuccess_1) == 0x000001, "Member '选择自定义部位文字_C_刷新部位名字::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_刷新部位名字, K2Node_SwitchEnum_CmpSuccess_2) == 0x000002, "Member '选择自定义部位文字_C_刷新部位名字::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_刷新部位名字, K2Node_SwitchEnum_CmpSuccess_3) == 0x000003, "Member '选择自定义部位文字_C_刷新部位名字::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_刷新部位名字, K2Node_SwitchEnum_CmpSuccess_4) == 0x000004, "Member '选择自定义部位文字_C_刷新部位名字::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");

// Function 选择自定义部位文字.选择自定义部位文字_C.单独视角设置
// 0x0058 (0x0058 - 0x0000)
struct 选择自定义部位文字_C_单独视角设置 final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0020(0x0018)()
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0038(0x0018)()
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(选择自定义部位文字_C_单独视角设置) == 0x000008, "Wrong alignment on 选择自定义部位文字_C_单独视角设置");
static_assert(sizeof(选择自定义部位文字_C_单独视角设置) == 0x000058, "Wrong size on 选择自定义部位文字_C_单独视角设置");
static_assert(offsetof(选择自定义部位文字_C_单独视角设置, Value) == 0x000000, "Member '选择自定义部位文字_C_单独视角设置::Value' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_单独视角设置, ReturnValue) == 0x000018, "Member '选择自定义部位文字_C_单独视角设置::ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_单独视角设置, CallFunc_MakeLiteralText_ReturnValue) == 0x000020, "Member '选择自定义部位文字_C_单独视角设置::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_单独视角设置, CallFunc_GetText_ReturnValue) == 0x000038, "Member '选择自定义部位文字_C_单独视角设置::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(选择自定义部位文字_C_单独视角设置, CallFunc_EqualEqual_TextText_ReturnValue) == 0x000050, "Member '选择自定义部位文字_C_单独视角设置::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");

}

