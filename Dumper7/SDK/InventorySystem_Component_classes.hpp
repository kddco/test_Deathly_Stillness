#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventorySystem_Component

#include "Basic.hpp"

#include "InventoryData_Struct_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass InventorySystem_Component.InventorySystem_Component_C
// 0x0050 (0x0100 - 0x00B0)
class UInventorySystem_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FInventoryData_Struct>          InventoryData;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         生成几个格子; // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否有相等物品; // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                数据界面; // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBackpack_DragObject_UMG_C*             ItemDragUMG;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Backpack_Weapon_C*                  WeaponDragUMG;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBackpack_Details_C*                    DetailsUMG;                                        // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner;                                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_InventorySystem_Component(int32 EntryPoint);
	void 添加武器(bool 是否是主武器, class AWeapon_Master_C* weapon);
	void 搜索第一个空格子();
	void 丢弃物品(int32 丢弃数量, const struct FInventoryData_Struct& 丢弃物品的数据);
	void 物品对调(int32 Current, int32 Target);
	void 刷新数据();
	void 使用物品(const struct FInventoryData_Struct& ItemData);
	void ReceiveBeginPlay();
	void 添加物品(const struct FInventoryData_Struct& ItemData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InventorySystem_Component_C">();
	}
	static class UInventorySystem_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventorySystem_Component_C>();
	}
};
static_assert(alignof(UInventorySystem_Component_C) == 0x000008, "Wrong alignment on UInventorySystem_Component_C");
static_assert(sizeof(UInventorySystem_Component_C) == 0x000100, "Wrong size on UInventorySystem_Component_C");
static_assert(offsetof(UInventorySystem_Component_C, UberGraphFrame) == 0x0000B0, "Member 'UInventorySystem_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, InventoryData) == 0x0000B8, "Member 'UInventorySystem_Component_C::InventoryData' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, 生成几个格子) == 0x0000C8, "Member 'UInventorySystem_Component_C::生成几个格子' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, 是否有相等物品) == 0x0000CC, "Member 'UInventorySystem_Component_C::是否有相等物品' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, Index_0) == 0x0000D0, "Member 'UInventorySystem_Component_C::Index_0' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, 数据界面) == 0x0000D8, "Member 'UInventorySystem_Component_C::数据界面' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, ItemDragUMG) == 0x0000E0, "Member 'UInventorySystem_Component_C::ItemDragUMG' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, WeaponDragUMG) == 0x0000E8, "Member 'UInventorySystem_Component_C::WeaponDragUMG' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, DetailsUMG) == 0x0000F0, "Member 'UInventorySystem_Component_C::DetailsUMG' has a wrong offset!");
static_assert(offsetof(UInventorySystem_Component_C, Owner) == 0x0000F8, "Member 'UInventorySystem_Component_C::Owner' has a wrong offset!");

}

