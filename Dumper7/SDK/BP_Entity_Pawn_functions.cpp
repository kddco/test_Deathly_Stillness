#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Entity_Pawn

#include "Basic.hpp"

#include "BP_Entity_Pawn_classes.hpp"
#include "BP_Entity_Pawn_parameters.hpp"


namespace SDK
{

// Function BP_Entity_Pawn.BP_Entity_Pawn_C.ExecuteUbergraph_BP_Entity_Pawn
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Entity_Pawn_C::ExecuteUbergraph_BP_Entity_Pawn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "ExecuteUbergraph_BP_Entity_Pawn");

	Params::BP_Entity_Pawn_C_ExecuteUbergraph_BP_Entity_Pawn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.关闭被击退状态
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::关闭被击退状态()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "关闭被击退状态");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.击退
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::击退()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "击退");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.UISettingApply
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::UISettingApply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "UISettingApply");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.重新开始音效播放
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::重新开始音效播放()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "重新开始音效播放");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Entity_Pawn_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.攻击范围
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::攻击范围()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "攻击范围");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.是否攻击玩家
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::是否攻击玩家()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "是否攻击玩家");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.开始蹲伏
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::开始蹲伏()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "开始蹲伏");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.结束蹲伏
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::结束蹲伏()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "结束蹲伏");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.玩家死亡
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::玩家死亡()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "玩家死亡");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.播放音效
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::播放音效()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "播放音效");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.看到玩家
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::看到玩家()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "看到玩家");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.随机移动
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::随机移动()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "随机移动");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.DamageHit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isMelee_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Entity_Pawn_C::DamageHit(const struct FHitResult& Hit_0, float Damage, bool isMelee_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "DamageHit");

	Params::BP_Entity_Pawn_C_DamageHit Parms{};

	Parms.Hit_0 = std::move(Hit_0);
	Parms.Damage = Damage;
	Parms.isMelee_ = isMelee_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.ResetScream
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::ResetScream()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "ResetScream");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.重置尖叫
// (BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::重置尖叫()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "重置尖叫");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.OnSuccess_A575B2C740A89FE0D490E0A57BBC2713
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPathFollowingResult                    MovementResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Entity_Pawn_C::OnSuccess_A575B2C740A89FE0D490E0A57BBC2713(EPathFollowingResult MovementResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "OnSuccess_A575B2C740A89FE0D490E0A57BBC2713");

	Params::BP_Entity_Pawn_C_OnSuccess_A575B2C740A89FE0D490E0A57BBC2713 Parms{};

	Parms.MovementResult = MovementResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.OnFail_A575B2C740A89FE0D490E0A57BBC2713
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPathFollowingResult                    MovementResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Entity_Pawn_C::OnFail_A575B2C740A89FE0D490E0A57BBC2713(EPathFollowingResult MovementResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "OnFail_A575B2C740A89FE0D490E0A57BBC2713");

	Params::BP_Entity_Pawn_C_OnFail_A575B2C740A89FE0D490E0A57BBC2713 Parms{};

	Parms.MovementResult = MovementResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.更改控制旋转模式
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Orient_Rotation_to_Movement                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Use_Controller_Rotation_Yaw                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    使用控制器所需的旋转(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Entity_Pawn_C::更改控制旋转模式(bool Orient_Rotation_to_Movement, bool Use_Controller_Rotation_Yaw, bool 使用控制器所需的旋转)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "更改控制旋转模式");

	Params::BP_Entity_Pawn_C_更改控制旋转模式 Parms{};

	Parms.Orient_Rotation_to_Movement = Orient_Rotation_to_Movement;
	Parms.Use_Controller_Rotation_Yaw = Use_Controller_Rotation_Yaw;
	Parms.使用控制器所需的旋转 = 使用控制器所需的旋转;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Entity_Pawn.BP_Entity_Pawn_C.Simulate Physics for Roar
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Entity_Pawn_C::Simulate_Physics_for_Roar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Entity_Pawn_C", "Simulate Physics for Roar");

	UObject::ProcessEvent(Func, nullptr);
}

}

