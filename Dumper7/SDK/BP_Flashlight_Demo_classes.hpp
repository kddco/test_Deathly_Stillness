#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Flashlight_Demo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Flashlight_Demo.BP_Flashlight_Demo_C
// 0x0048 (0x0268 - 0x0220)
class ABP_Flashlight_Demo_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Static_Mesh_Flashlight;                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ON;                                                // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Intensity_Multiplier;                        // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Outer_Cone_Angle;                                  // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Inner_Cone_Angle;                                  // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Light_Color;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Light_Source_1;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Spotlight_Beam_Texture;                            // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         New_Radius;                                        // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Flashlight_Demo(int32 EntryPoint);
	void 关闭模型阴影();
	void TurnOff();
	void TurnOn();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Set_Intensity();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Flashlight_Demo_C">();
	}
	static class ABP_Flashlight_Demo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Flashlight_Demo_C>();
	}
};
static_assert(alignof(ABP_Flashlight_Demo_C) == 0x000008, "Wrong alignment on ABP_Flashlight_Demo_C");
static_assert(sizeof(ABP_Flashlight_Demo_C) == 0x000268, "Wrong size on ABP_Flashlight_Demo_C");
static_assert(offsetof(ABP_Flashlight_Demo_C, UberGraphFrame) == 0x000220, "Member 'ABP_Flashlight_Demo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Static_Mesh_Flashlight) == 0x000228, "Member 'ABP_Flashlight_Demo_C::Static_Mesh_Flashlight' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Mesh) == 0x000230, "Member 'ABP_Flashlight_Demo_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, ON) == 0x000238, "Member 'ABP_Flashlight_Demo_C::ON' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Intensity) == 0x00023C, "Member 'ABP_Flashlight_Demo_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Light_Intensity_Multiplier) == 0x000240, "Member 'ABP_Flashlight_Demo_C::Light_Intensity_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Outer_Cone_Angle) == 0x000244, "Member 'ABP_Flashlight_Demo_C::Outer_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Inner_Cone_Angle) == 0x000248, "Member 'ABP_Flashlight_Demo_C::Inner_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Light_Color) == 0x00024C, "Member 'ABP_Flashlight_Demo_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Light_Source_1) == 0x000250, "Member 'ABP_Flashlight_Demo_C::Light_Source_1' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, Spotlight_Beam_Texture) == 0x000258, "Member 'ABP_Flashlight_Demo_C::Spotlight_Beam_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_Demo_C, New_Radius) == 0x000260, "Member 'ABP_Flashlight_Demo_C::New_Radius' has a wrong offset!");

}

